{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport styles from './styles.css.js';\nimport useFocusVisible from '../../hooks/focus-visible/index';\nexport default function FocusOutline(_a) {\n  var elementKey = _a.elementKey,\n    elementRef = _a.elementRef,\n    _b = _a.offset,\n    offset = _b === void 0 ? 0 : _b;\n  var ref = useRef(null);\n  var focusVisible = useFocusVisible()[\"data-awsui-focus-visible\"];\n  useEffect(function () {\n    if (!ref.current) {\n      return;\n    }\n    if (focusVisible && elementKey && elementRef && elementRef.current && elementRef.current.getBBox) {\n      var element = elementRef.current.getBBox();\n      showOutline(ref.current, element, offset);\n    } else {\n      hideOutline(ref.current);\n    }\n  }, [focusVisible, elementKey, elementRef, offset]);\n  return React.createElement(\"rect\", {\n    ref: ref,\n    \"aria-hidden\": \"true\",\n    className: styles['focus-outline'],\n    rx: \"2\"\n  });\n}\nfunction showOutline(el, position, offset) {\n  el.setAttribute('x', (position.x - offset).toString());\n  el.setAttribute('y', (position.y - offset).toString());\n  el.setAttribute('width', (position.width + 2 * offset).toString());\n  el.setAttribute('height', (position.height + 2 * offset).toString());\n  el.style.visibility = 'visible';\n}\nfunction hideOutline(el) {\n  el.style.visibility = 'hidden';\n  el.removeAttribute('x');\n  el.removeAttribute('y');\n  el.removeAttribute('width');\n  el.removeAttribute('height');\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEhD,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,eAAe,MAAM,iCAAiC;AAQ7D,eAAc,SAAUC,YAAY,CAACC,EAAyD;MAAvDC,UAAU;IAAEC,UAAU;IAAEC,cAAU;IAAVC,MAAM,mBAAG,CAAC;EACvE,IAAMC,GAAG,GAAGT,MAAM,CAAiB,IAAI,CAAC;EAChC,IAA4BU,YAAY,GAAKR,eAAe,EAAE,4BAAtB;EAEhDH,SAAS,CAAC;IACR,IAAI,CAACU,GAAG,CAACE,OAAO,EAAE;MAChB;;IAGF,IAAID,YAAY,IAAIL,UAAU,IAAIC,UAAU,IAAIA,UAAU,CAACK,OAAO,IAAIL,UAAU,CAACK,OAAO,CAACC,OAAO,EAAE;MAChG,IAAMC,OAAO,GAAGP,UAAU,CAACK,OAAO,CAACC,OAAO,EAAE;MAC5CE,WAAW,CAACL,GAAG,CAACE,OAAO,EAAEE,OAAO,EAAEL,MAAM,CAAC;KAC1C,MAAM;MACLO,WAAW,CAACN,GAAG,CAACE,OAAO,CAAC;;EAE5B,CAAC,EAAE,CAACD,YAAY,EAAEL,UAAU,EAAEC,UAAU,EAAEE,MAAM,CAAC,CAAC;EAElD,OAAOV;IAAMW,GAAG,EAAEA,GAAG;IAAA,eAAc,MAAM;IAACO,SAAS,EAAEf,MAAM,CAAC,eAAe,CAAC;IAAEgB,EAAE,EAAC;EAAG,EAAG;AACzF;AAEA,SAASH,WAAW,CAClBI,EAAkB,EAClBC,QAAiE,EACjEX,MAAc;EAEdU,EAAE,CAACE,YAAY,CAAC,GAAG,EAAE,CAACD,QAAQ,CAACE,CAAC,GAAGb,MAAM,EAAEc,QAAQ,EAAE,CAAC;EACtDJ,EAAE,CAACE,YAAY,CAAC,GAAG,EAAE,CAACD,QAAQ,CAACI,CAAC,GAAGf,MAAM,EAAEc,QAAQ,EAAE,CAAC;EACtDJ,EAAE,CAACE,YAAY,CAAC,OAAO,EAAE,CAACD,QAAQ,CAACK,KAAK,GAAG,CAAC,GAAGhB,MAAM,EAAEc,QAAQ,EAAE,CAAC;EAClEJ,EAAE,CAACE,YAAY,CAAC,QAAQ,EAAE,CAACD,QAAQ,CAACM,MAAM,GAAG,CAAC,GAAGjB,MAAM,EAAEc,QAAQ,EAAE,CAAC;EACpEJ,EAAE,CAACQ,KAAK,CAACC,UAAU,GAAG,SAAS;AACjC;AAEA,SAASZ,WAAW,CAACG,EAAkB;EACrCA,EAAE,CAACQ,KAAK,CAACC,UAAU,GAAG,QAAQ;EAC9BT,EAAE,CAACU,eAAe,CAAC,GAAG,CAAC;EACvBV,EAAE,CAACU,eAAe,CAAC,GAAG,CAAC;EACvBV,EAAE,CAACU,eAAe,CAAC,OAAO,CAAC;EAC3BV,EAAE,CAACU,eAAe,CAAC,QAAQ,CAAC;AAC9B","names":["React","useEffect","useRef","styles","useFocusVisible","FocusOutline","_a","elementKey","elementRef","_b","offset","ref","focusVisible","current","getBBox","element","showOutline","hideOutline","className","rx","el","position","setAttribute","x","toString","y","width","height","style","visibility","removeAttribute"],"sources":["/Users/dcastro/node_modules/src/internal/components/chart-plot/focus-outline.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\n\nimport styles from './styles.css.js';\nimport useFocusVisible from '../../hooks/focus-visible/index';\n\nexport interface FocusOutlineProps {\n  elementKey?: null | string | number | boolean;\n  elementRef?: React.RefObject<SVGSVGElement | SVGGElement>;\n  offset?: number;\n}\n\nexport default function FocusOutline({ elementKey, elementRef, offset = 0 }: FocusOutlineProps) {\n  const ref = useRef<SVGRectElement>(null);\n  const { 'data-awsui-focus-visible': focusVisible } = useFocusVisible();\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    if (focusVisible && elementKey && elementRef && elementRef.current && elementRef.current.getBBox) {\n      const element = elementRef.current.getBBox();\n      showOutline(ref.current, element, offset);\n    } else {\n      hideOutline(ref.current);\n    }\n  }, [focusVisible, elementKey, elementRef, offset]);\n\n  return <rect ref={ref} aria-hidden=\"true\" className={styles['focus-outline']} rx=\"2\" />;\n}\n\nfunction showOutline(\n  el: SVGRectElement,\n  position: { x: number; y: number; width: number; height: number },\n  offset: number\n) {\n  el.setAttribute('x', (position.x - offset).toString());\n  el.setAttribute('y', (position.y - offset).toString());\n  el.setAttribute('width', (position.width + 2 * offset).toString());\n  el.setAttribute('height', (position.height + 2 * offset).toString());\n  el.style.visibility = 'visible';\n}\n\nfunction hideOutline(el: SVGRectElement) {\n  el.style.visibility = 'hidden';\n  el.removeAttribute('x');\n  el.removeAttribute('y');\n  el.removeAttribute('width');\n  el.removeAttribute('height');\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}