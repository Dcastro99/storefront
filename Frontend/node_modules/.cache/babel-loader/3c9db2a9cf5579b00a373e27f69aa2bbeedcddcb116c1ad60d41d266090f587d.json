{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef, useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { InternalButton } from '../button/internal';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { useContainerQuery } from '../internal/hooks/container-queries';\nimport { KeyCode } from '../internal/keycode';\nimport { onPaginationClick, hasHorizontalOverflow, hasLeftOverflow, hasRightOverflow, scrollIntoView } from './scroll-utils';\nimport { isPlainLeftClick } from '../internal/events';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nexport function TabHeaderBar(_a) {\n  var _b, _c, _d;\n  var onChange = _a.onChange,\n    activeTabId = _a.activeTabId,\n    tabs = _a.tabs,\n    variant = _a.variant,\n    idNamespace = _a.idNamespace,\n    ariaLabel = _a.ariaLabel,\n    ariaLabelledby = _a.ariaLabelledby;\n  var focusVisible = useFocusVisible();\n  var headerBarRef = useRef(null);\n  var activeTabHeaderRef = useRef(null);\n  var leftOverflowButton = useRef(null);\n  var isVisualRefresh = useVisualRefresh();\n  var _e = useContainerQuery(function (rect) {\n      return rect.width;\n    }),\n    widthChange = _e[0],\n    containerRef = _e[1];\n  var tabRefs = useRef(new Map());\n  var _f = useState(false),\n    horizontalOverflow = _f[0],\n    setHorizontalOverflow = _f[1];\n  var _g = useState(false),\n    leftOverflow = _g[0],\n    setLeftOverflow = _g[1];\n  var _h = useState(false),\n    rightOverflow = _h[0],\n    setRightOverflow = _h[1];\n  useEffect(function () {\n    if (headerBarRef.current) {\n      setHorizontalOverflow(hasHorizontalOverflow(headerBarRef.current, leftOverflowButton));\n      setLeftOverflow(hasLeftOverflow(headerBarRef.current));\n      setRightOverflow(hasRightOverflow(headerBarRef.current));\n    }\n  }, [widthChange, tabs]);\n  var scrollIntoViewIfPossible = function (smooth) {\n    if (!activeTabId) {\n      return;\n    }\n    var activeTabRef = tabRefs.current.get(activeTabId);\n    if (activeTabRef && headerBarRef.current) {\n      scrollIntoView(activeTabRef, headerBarRef.current, smooth);\n    }\n  };\n  useEffect(function () {\n    // Delay scrollIntoView as the position is depending on parent elements\n    // (effects are called inside-out in the component tree).\n    // Wait one frame to allow parents to complete it's calculation.\n    requestAnimationFrame(function () {\n      scrollIntoViewIfPossible(false);\n    });\n    // Non-smooth scrolling should not be called upon activeId change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [horizontalOverflow, widthChange, tabs.length]);\n  useEffect(function () {\n    scrollIntoViewIfPossible(true);\n    // Smooth scrolling should only be called upon activeId change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeTabId]);\n  useEffect(function () {\n    var _a, _b;\n    /*\n     When the selected tab changes and we are currently already focused on a tab,\n     move the focus to the newly selected tab.\n    */\n    if ((_a = headerBarRef.current) === null || _a === void 0 ? void 0 : _a.contains(document.activeElement)) {\n      if (document.activeElement !== activeTabHeaderRef.current) {\n        (_b = activeTabHeaderRef.current) === null || _b === void 0 ? void 0 : _b.focus({\n          preventScroll: true\n        });\n      }\n    }\n  }, [activeTabId]);\n  var onScroll = function () {\n    if (headerBarRef.current) {\n      setLeftOverflow(hasLeftOverflow(headerBarRef.current));\n      setRightOverflow(hasRightOverflow(headerBarRef.current));\n    }\n  };\n  var classes = clsx((_b = {}, _b[styles['tabs-header']] = true, _b[styles['tabs-header-with-divider']] = variant === 'default' || isVisualRefresh, _b));\n  var leftButtonClasses = clsx((_c = {}, _c[styles['pagination-button']] = true, _c[styles['pagination-button-left']] = true, _c[styles['pagination-button-left-scrollable']] = leftOverflow, _c));\n  var rightButtonClasses = clsx((_d = {}, _d[styles['pagination-button']] = true, _d[styles['pagination-button-right']] = true, _d[styles['pagination-button-right-scrollable']] = rightOverflow, _d));\n  var paginationButtonAttributes = {\n    'aria-hidden': true,\n    tabIndex: -1\n  };\n  return (\n    //converted span to div as list should not be a child of span for HTML validation\n    React.createElement(\"div\", {\n      className: classes,\n      ref: containerRef\n    }, horizontalOverflow && React.createElement(\"span\", {\n      ref: leftOverflowButton,\n      className: leftButtonClasses\n    }, React.createElement(InternalButton, {\n      formAction: \"none\",\n      variant: \"icon\",\n      iconName: \"angle-left\",\n      __nativeAttributes: paginationButtonAttributes,\n      disabled: !leftOverflow,\n      onClick: function () {\n        return onPaginationClick(headerBarRef, -1);\n      }\n    })), React.createElement(\"ul\", {\n      role: \"tablist\",\n      className: styles['tabs-header-list'],\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledby,\n      ref: headerBarRef,\n      onScroll: onScroll\n    }, tabs.map(renderTabHeader)), horizontalOverflow && React.createElement(\"span\", {\n      className: rightButtonClasses\n    }, React.createElement(InternalButton, {\n      formAction: \"none\",\n      variant: \"icon\",\n      iconName: \"angle-right\",\n      __nativeAttributes: paginationButtonAttributes,\n      disabled: !rightOverflow,\n      onClick: function () {\n        return onPaginationClick(headerBarRef, 1);\n      }\n    })))\n  );\n  function renderTabHeader(tab) {\n    var _a;\n    var enabledTabsWithCurrentTab = tabs.filter(function (tab) {\n      return !tab.disabled || tab.id === activeTabId;\n    });\n    var highlightTab = function (enabledTabIndex) {\n      var tab = enabledTabsWithCurrentTab[enabledTabIndex];\n      if (tab.id === activeTabId) {\n        return;\n      }\n      onChange({\n        activeTabId: tab.id,\n        activeTabHref: tab.href\n      });\n    };\n    var handleKeyDown = function (event) {\n      var keyCode = event.keyCode;\n      var specialKeys = [KeyCode.right, KeyCode.left, KeyCode.end, KeyCode.home, KeyCode.pageUp, KeyCode.pageDown];\n      if (specialKeys.indexOf(keyCode) === -1) {\n        return;\n      }\n      event.preventDefault();\n      var activeIndex = enabledTabsWithCurrentTab.indexOf(tab);\n      switch (keyCode) {\n        case KeyCode.right:\n          if (activeIndex + 1 === enabledTabsWithCurrentTab.length) {\n            highlightTab(0);\n          } else {\n            highlightTab(activeIndex + 1);\n          }\n          return;\n        case KeyCode.left:\n          if (activeIndex === 0) {\n            highlightTab(enabledTabsWithCurrentTab.length - 1);\n          } else {\n            highlightTab(activeIndex - 1);\n          }\n          return;\n        case KeyCode.end:\n          highlightTab(enabledTabsWithCurrentTab.length - 1);\n          return;\n        case KeyCode.home:\n          highlightTab(0);\n          return;\n        case KeyCode.pageDown:\n          if (rightOverflow) {\n            onPaginationClick(headerBarRef, 1);\n          }\n          return;\n        case KeyCode.pageUp:\n          if (leftOverflow) {\n            onPaginationClick(headerBarRef, -1);\n          }\n          return;\n      }\n    };\n    var clickTab = function (event) {\n      if (tab.disabled) {\n        event.preventDefault();\n        return;\n      }\n      // if the primary mouse button is clicked with a modifier key, the browser will handle opening a new tab\n      var specialKey = !isPlainLeftClick(event);\n      if (specialKey && tab.href) {\n        return;\n      }\n      event.preventDefault();\n      // for browsers that do not focus buttons on button click\n      if (!tab.href) {\n        var clickedTabRef = tabRefs.current.get(tab.id);\n        if (clickedTabRef) {\n          var childElement = clickedTabRef.firstChild;\n          if (childElement && childElement !== document.activeElement) {\n            childElement.focus({\n              preventScroll: true\n            });\n          }\n        }\n      }\n      if (tab.id === activeTabId) {\n        return;\n      }\n      onChange({\n        activeTabId: tab.id,\n        activeTabHref: tab.href\n      });\n    };\n    var classes = clsx((_a = {}, _a[styles['tabs-tab-link']] = true, _a[styles.refresh] = isVisualRefresh, _a[styles['tabs-tab-active']] = activeTabId === tab.id && !tab.disabled, _a[styles['tabs-tab-disabled']] = tab.disabled, _a));\n    var commonProps = __assign(__assign({\n      className: classes\n    }, focusVisible), {\n      role: 'tab',\n      'aria-selected': tab.id === activeTabId,\n      'aria-controls': \"\".concat(idNamespace, \"-\").concat(tab.id, \"-panel\"),\n      'data-testid': tab.id,\n      children: React.createElement(\"span\", {\n        className: styles['tabs-tab-label']\n      }, tab.label)\n    });\n    if (tab.disabled) {\n      commonProps['aria-disabled'] = 'true';\n    } else {\n      commonProps.onClick = clickTab;\n    }\n    if (tab.id === activeTabId) {\n      commonProps.ref = activeTabHeaderRef;\n      commonProps.tabIndex = 0;\n      commonProps.onKeyDown = function (event) {\n        return handleKeyDown(event);\n      };\n    } else {\n      commonProps.tabIndex = -1;\n    }\n    var trigger = null;\n    if (tab.href) {\n      var anchorProps = commonProps;\n      anchorProps.href = tab.href;\n      trigger = React.createElement(\"a\", __assign({}, anchorProps));\n    } else {\n      var buttonProps = commonProps;\n      buttonProps.type = 'button';\n      if (tab.disabled) {\n        buttonProps.disabled = true;\n      }\n      trigger = React.createElement(\"button\", __assign({}, buttonProps));\n    }\n    return React.createElement(\"li\", {\n      ref: function (element) {\n        return tabRefs.current.set(tab.id, element);\n      },\n      className: styles['tabs-tab'],\n      role: \"presentation\",\n      key: tab.id\n    }, trigger);\n  }\n}","map":{"version":3,"mappings":"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","names":["React","useRef","useState","useEffect","clsx","styles","InternalButton","useFocusVisible","useContainerQuery","KeyCode","onPaginationClick","hasHorizontalOverflow","hasLeftOverflow","hasRightOverflow","scrollIntoView","isPlainLeftClick","useVisualRefresh","TabHeaderBar","_a","onChange","activeTabId","tabs","variant","idNamespace","ariaLabel","ariaLabelledby","focusVisible","headerBarRef","activeTabHeaderRef","leftOverflowButton","isVisualRefresh","width","widthChange","containerRef","tabRefs","Map","horizontalOverflow","setHorizontalOverflow","leftOverflow","setLeftOverflow","rightOverflow","setRightOverflow","current","scrollIntoViewIfPossible","smooth","activeTabRef","get","requestAnimationFrame","length","contains","document","activeElement","focus","preventScroll","onScroll","classes","_b","leftButtonClasses","_c","rightButtonClasses","_d","paginationButtonAttributes","tabIndex","className","ref","formAction","iconName","__nativeAttributes","disabled","onClick","role","map","renderTabHeader","tab","enabledTabsWithCurrentTab","filter","id","highlightTab","enabledTabIndex","activeTabHref","href","handleKeyDown","event","specialKeys","right","left","end","home","pageUp","pageDown","indexOf","keyCode","preventDefault","activeIndex","clickTab","specialKey","clickedTabRef","childElement","firstChild","refresh","commonProps","children","label","onKeyDown","trigger","anchorProps","buttonProps","type","set","element","key"],"sources":["/Users/dcastro/node_modules/src/tabs/tab-header-bar.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef, useState, useEffect } from 'react';\nimport { TabsProps } from './interfaces';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { InternalButton } from '../button/internal';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { useContainerQuery } from '../internal/hooks/container-queries';\nimport { KeyCode } from '../internal/keycode';\nimport {\n  onPaginationClick,\n  hasHorizontalOverflow,\n  hasLeftOverflow,\n  hasRightOverflow,\n  scrollIntoView,\n} from './scroll-utils';\nimport { isPlainLeftClick } from '../internal/events';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\n\nexport interface TabHeaderBarProps {\n  onChange: (changeDetail: TabsProps.ChangeDetail) => void;\n  activeTabId: TabsProps['activeTabId'];\n  tabs: TabsProps['tabs'];\n  variant: TabsProps['variant'];\n  idNamespace: string;\n  ariaLabel?: string;\n  ariaLabelledby?: string;\n}\n\nexport function TabHeaderBar({\n  onChange,\n  activeTabId,\n  tabs,\n  variant,\n  idNamespace,\n  ariaLabel,\n  ariaLabelledby,\n}: TabHeaderBarProps) {\n  const focusVisible = useFocusVisible();\n\n  const headerBarRef = useRef<HTMLUListElement>(null);\n  const activeTabHeaderRef = useRef<HTMLAnchorElement>(null);\n  const leftOverflowButton = useRef<HTMLElement>(null);\n\n  const isVisualRefresh = useVisualRefresh();\n\n  const [widthChange, containerRef] = useContainerQuery<number>(rect => rect.width);\n  const tabRefs = useRef<Map<string, HTMLElement>>(new Map());\n  const [horizontalOverflow, setHorizontalOverflow] = useState(false);\n  const [leftOverflow, setLeftOverflow] = useState(false);\n  const [rightOverflow, setRightOverflow] = useState(false);\n\n  useEffect(() => {\n    if (headerBarRef.current) {\n      setHorizontalOverflow(hasHorizontalOverflow(headerBarRef.current, leftOverflowButton));\n      setLeftOverflow(hasLeftOverflow(headerBarRef.current));\n      setRightOverflow(hasRightOverflow(headerBarRef.current));\n    }\n  }, [widthChange, tabs]);\n\n  const scrollIntoViewIfPossible = (smooth: boolean) => {\n    if (!activeTabId) {\n      return;\n    }\n    const activeTabRef = tabRefs.current.get(activeTabId);\n    if (activeTabRef && headerBarRef.current) {\n      scrollIntoView(activeTabRef, headerBarRef.current, smooth);\n    }\n  };\n\n  useEffect(() => {\n    // Delay scrollIntoView as the position is depending on parent elements\n    // (effects are called inside-out in the component tree).\n    // Wait one frame to allow parents to complete it's calculation.\n    requestAnimationFrame(() => {\n      scrollIntoViewIfPossible(false);\n    });\n    // Non-smooth scrolling should not be called upon activeId change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [horizontalOverflow, widthChange, tabs.length]);\n\n  useEffect(() => {\n    scrollIntoViewIfPossible(true);\n    // Smooth scrolling should only be called upon activeId change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeTabId]);\n\n  useEffect(() => {\n    /*\n     When the selected tab changes and we are currently already focused on a tab,\n     move the focus to the newly selected tab.\n    */\n    if (headerBarRef.current?.contains(document.activeElement)) {\n      if (document.activeElement !== activeTabHeaderRef.current) {\n        activeTabHeaderRef.current?.focus({ preventScroll: true });\n      }\n    }\n  }, [activeTabId]);\n\n  const onScroll = () => {\n    if (headerBarRef.current) {\n      setLeftOverflow(hasLeftOverflow(headerBarRef.current));\n      setRightOverflow(hasRightOverflow(headerBarRef.current));\n    }\n  };\n\n  const classes = clsx({\n    [styles['tabs-header']]: true,\n    [styles['tabs-header-with-divider']]: variant === 'default' || isVisualRefresh,\n  });\n\n  const leftButtonClasses = clsx({\n    [styles['pagination-button']]: true,\n    [styles['pagination-button-left']]: true,\n    [styles['pagination-button-left-scrollable']]: leftOverflow,\n  });\n\n  const rightButtonClasses = clsx({\n    [styles['pagination-button']]: true,\n    [styles['pagination-button-right']]: true,\n    [styles['pagination-button-right-scrollable']]: rightOverflow,\n  });\n\n  const paginationButtonAttributes = {\n    'aria-hidden': true,\n    tabIndex: -1,\n  };\n\n  return (\n    //converted span to div as list should not be a child of span for HTML validation\n    <div className={classes} ref={containerRef}>\n      {horizontalOverflow && (\n        <span ref={leftOverflowButton} className={leftButtonClasses}>\n          <InternalButton\n            formAction=\"none\"\n            variant=\"icon\"\n            iconName=\"angle-left\"\n            __nativeAttributes={paginationButtonAttributes}\n            disabled={!leftOverflow}\n            onClick={() => onPaginationClick(headerBarRef, -1)}\n          />\n        </span>\n      )}\n      <ul\n        role=\"tablist\"\n        className={styles['tabs-header-list']}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledby}\n        ref={headerBarRef}\n        onScroll={onScroll}\n      >\n        {tabs.map(renderTabHeader)}\n      </ul>\n      {horizontalOverflow && (\n        <span className={rightButtonClasses}>\n          <InternalButton\n            formAction=\"none\"\n            variant=\"icon\"\n            iconName=\"angle-right\"\n            __nativeAttributes={paginationButtonAttributes}\n            disabled={!rightOverflow}\n            onClick={() => onPaginationClick(headerBarRef, 1)}\n          />\n        </span>\n      )}\n    </div>\n  );\n\n  function renderTabHeader(tab: TabsProps.Tab) {\n    const enabledTabsWithCurrentTab = tabs.filter(tab => !tab.disabled || tab.id === activeTabId);\n\n    const highlightTab = function (enabledTabIndex: number) {\n      const tab = enabledTabsWithCurrentTab[enabledTabIndex];\n      if (tab.id === activeTabId) {\n        return;\n      }\n\n      onChange({ activeTabId: tab.id, activeTabHref: tab.href });\n    };\n\n    const handleKeyDown = function (\n      event: React.KeyboardEvent<HTMLAnchorElement> | React.KeyboardEvent<HTMLButtonElement>\n    ) {\n      const { keyCode } = event;\n      const specialKeys = [KeyCode.right, KeyCode.left, KeyCode.end, KeyCode.home, KeyCode.pageUp, KeyCode.pageDown];\n      if (specialKeys.indexOf(keyCode) === -1) {\n        return;\n      }\n      event.preventDefault();\n      const activeIndex = enabledTabsWithCurrentTab.indexOf(tab);\n      switch (keyCode) {\n        case KeyCode.right:\n          if (activeIndex + 1 === enabledTabsWithCurrentTab.length) {\n            highlightTab(0);\n          } else {\n            highlightTab(activeIndex + 1);\n          }\n          return;\n        case KeyCode.left:\n          if (activeIndex === 0) {\n            highlightTab(enabledTabsWithCurrentTab.length - 1);\n          } else {\n            highlightTab(activeIndex - 1);\n          }\n          return;\n        case KeyCode.end:\n          highlightTab(enabledTabsWithCurrentTab.length - 1);\n          return;\n        case KeyCode.home:\n          highlightTab(0);\n          return;\n        case KeyCode.pageDown:\n          if (rightOverflow) {\n            onPaginationClick(headerBarRef, 1);\n          }\n          return;\n        case KeyCode.pageUp:\n          if (leftOverflow) {\n            onPaginationClick(headerBarRef, -1);\n          }\n          return;\n      }\n    };\n\n    const clickTab = (event: React.MouseEvent) => {\n      if (tab.disabled) {\n        event.preventDefault();\n        return;\n      }\n\n      // if the primary mouse button is clicked with a modifier key, the browser will handle opening a new tab\n      const specialKey = !isPlainLeftClick(event);\n      if (specialKey && tab.href) {\n        return;\n      }\n\n      event.preventDefault();\n      // for browsers that do not focus buttons on button click\n      if (!tab.href) {\n        const clickedTabRef = tabRefs.current.get(tab.id);\n        if (clickedTabRef) {\n          const childElement = clickedTabRef.firstChild as HTMLButtonElement;\n          if (childElement && childElement !== document.activeElement) {\n            childElement.focus({ preventScroll: true });\n          }\n        }\n      }\n\n      if (tab.id === activeTabId) {\n        return;\n      }\n\n      onChange({ activeTabId: tab.id, activeTabHref: tab.href });\n    };\n\n    const classes = clsx({\n      [styles['tabs-tab-link']]: true,\n      [styles.refresh]: isVisualRefresh,\n      [styles['tabs-tab-active']]: activeTabId === tab.id && !tab.disabled,\n      [styles['tabs-tab-disabled']]: tab.disabled,\n    });\n\n    const commonProps: (JSX.IntrinsicElements['a'] | JSX.IntrinsicElements['button']) & { 'data-testid': string } = {\n      className: classes,\n      ...focusVisible,\n      role: 'tab',\n      'aria-selected': tab.id === activeTabId,\n      'aria-controls': `${idNamespace}-${tab.id}-panel`,\n      'data-testid': tab.id,\n      children: <span className={styles['tabs-tab-label']}>{tab.label}</span>,\n    };\n\n    if (tab.disabled) {\n      commonProps['aria-disabled'] = 'true';\n    } else {\n      commonProps.onClick = clickTab;\n    }\n\n    if (tab.id === activeTabId) {\n      commonProps.ref = activeTabHeaderRef;\n      commonProps.tabIndex = 0;\n      commonProps.onKeyDown = (\n        event: React.KeyboardEvent<HTMLAnchorElement> | React.KeyboardEvent<HTMLButtonElement>\n      ) => handleKeyDown(event);\n    } else {\n      commonProps.tabIndex = -1;\n    }\n\n    let trigger = null;\n    if (tab.href) {\n      const anchorProps = commonProps as JSX.IntrinsicElements['a'];\n      anchorProps.href = tab.href;\n      trigger = <a {...anchorProps} />;\n    } else {\n      const buttonProps = commonProps as JSX.IntrinsicElements['button'];\n      buttonProps.type = 'button';\n      if (tab.disabled) {\n        buttonProps.disabled = true;\n      }\n      trigger = <button {...buttonProps} />;\n    }\n\n    return (\n      <li\n        ref={element => tabRefs.current.set(tab.id, element as HTMLElement)}\n        className={styles['tabs-tab']}\n        role=\"presentation\"\n        key={tab.id}\n      >\n        {trigger}\n      </li>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}