{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// these styles needed to be imported for every public component\nimport './styles.css.js';\nimport { PACKAGE_VERSION } from '../environment';\n// expose version info, so it can be checked using the browser devtools\nif (typeof window !== 'undefined') {\n  if (!window.awsuiVersions) {\n    window.awsuiVersions = {};\n  }\n  if (!window.awsuiVersions.components) {\n    window.awsuiVersions.components = [];\n  }\n  window.awsuiVersions.components.push(PACKAGE_VERSION);\n}\nexport function getBaseProps(props) {\n  var baseProps = {};\n  Object.keys(props).forEach(function (prop) {\n    if (prop === 'id' || prop === 'className' || prop.match(/^data-/)) {\n      baseProps[prop] = props[prop];\n    }\n  });\n  return baseProps;\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA;AACA,OAAO,iBAAiB;AACxB,SAASA,eAAe,QAAQ,gBAAgB;AAQhD;AACA,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;EACjC,IAAI,CAACA,MAAM,CAACC,aAAa,EAAE;IACzBD,MAAM,CAACC,aAAa,GAAG,EAAE;;EAE3B,IAAI,CAACD,MAAM,CAACC,aAAa,CAACC,UAAU,EAAE;IACpCF,MAAM,CAACC,aAAa,CAACC,UAAU,GAAG,EAAE;;EAEtCF,MAAM,CAACC,aAAa,CAACC,UAAU,CAACC,IAAI,CAACJ,eAAe,CAAC;;AAmBvD,OAAM,SAAUK,YAAY,CAACC,KAAyB;EACpD,IAAMC,SAAS,GAAwB,EAAE;EACzCC,MAAM,CAACC,IAAI,CAACH,KAAK,CAAC,CAACI,OAAO,CAAC,cAAI;IAC7B,IAAIC,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,WAAW,IAAIA,IAAI,CAACC,KAAK,CAAC,QAAQ,CAAC,EAAE;MACjEL,SAAS,CAACI,IAAI,CAAC,GAAIL,KAA6B,CAACK,IAAI,CAAC;;EAE1D,CAAC,CAAC;EACF,OAAOJ,SAA+B;AACxC","names":["PACKAGE_VERSION","window","awsuiVersions","components","push","getBaseProps","props","baseProps","Object","keys","forEach","prop","match"],"sources":["/Users/dcastro/node_modules/src/internal/base-component/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n// these styles needed to be imported for every public component\nimport './styles.css.js';\nimport { PACKAGE_VERSION } from '../environment';\n\n// not using `declare global {}` to avoid polluting customers' typings with this info\ninterface CustomWindow extends Window {\n  awsuiVersions?: { components?: string[] };\n}\ndeclare const window: CustomWindow | undefined;\n\n// expose version info, so it can be checked using the browser devtools\nif (typeof window !== 'undefined') {\n  if (!window.awsuiVersions) {\n    window.awsuiVersions = {};\n  }\n  if (!window.awsuiVersions.components) {\n    window.awsuiVersions.components = [];\n  }\n  window.awsuiVersions.components.push(PACKAGE_VERSION);\n}\n\nexport interface BaseComponentProps {\n  /**\n   * Adds the specified classes to the root element of the component.\n   * @deprecated Custom CSS is not supported. For other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes).\n   */\n  className?: string;\n  /**\n   * Adds the specified ID to the root element of the component.\n   * @deprecated Custom CSS is not supported. For other use cases, use [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes).\n   */\n  id?: string;\n  // we also support data-* attributes, but they are always implicitly allowed by typescript\n  // http://www.typescriptlang.org/docs/handbook/jsx.html#attribute-type-checking\n  // \"Note: If an attribute name is not a valid JS identifier (like a data-* attribute), it is not considered to be an error\"\n}\n\nexport function getBaseProps(props: BaseComponentProps) {\n  const baseProps: Record<string, any> = {};\n  Object.keys(props).forEach(prop => {\n    if (prop === 'id' || prop === 'className' || prop.match(/^data-/)) {\n      baseProps[prop] = (props as Record<string, any>)[prop];\n    }\n  });\n  return baseProps as BaseComponentProps;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}