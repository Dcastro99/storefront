{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useImperativeHandle, useRef } from 'react';\nimport { useVirtual } from 'react-virtual';\nimport OptionsList from '../internal/components/options-list';\nimport { useContainerQuery } from '../internal/hooks/container-queries';\nimport AutosuggestOption from './autosuggest-option';\nimport { getOptionProps } from './plain-list';\nimport styles from './styles.css.js';\nvar VirtualList = function (_a) {\n  var autosuggestItemsState = _a.autosuggestItemsState,\n    handleLoadMore = _a.handleLoadMore,\n    menuProps = _a.menuProps,\n    enteredTextLabel = _a.enteredTextLabel,\n    highlightedA11yProps = _a.highlightedA11yProps,\n    hasDropdownStatus = _a.hasDropdownStatus,\n    highlightText = _a.highlightText,\n    listBottom = _a.listBottom,\n    screenReaderContent = _a.screenReaderContent;\n  var scrollRef = useRef(null);\n  // update component, when it gets wider or narrower to reposition items\n  var _b = useContainerQuery(function (rect) {\n      return rect.width;\n    }, []),\n    width = _b[0],\n    strutRef = _b[1];\n  useImperativeHandle(strutRef, function () {\n    return scrollRef.current;\n  });\n  var rowVirtualizer = useVirtual({\n    size: autosuggestItemsState.items.length,\n    parentRef: scrollRef,\n    // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n    // when the height of any option could have changed:\n    // 1: because the component got resized (width property got updated)\n    // 2: becasue the option changed its content (highlightText property controls the highlight and the visibility of hidden tags)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    estimateSize: useCallback(function () {\n      return 31;\n    }, [width, highlightText]),\n    overscan: 5\n  });\n  useEffect(function () {\n    if (autosuggestItemsState.highlightType === 'keyboard') {\n      rowVirtualizer.scrollToIndex(autosuggestItemsState.highlightedIndex);\n    }\n  }, [autosuggestItemsState.highlightType, autosuggestItemsState.highlightedIndex, rowVirtualizer]);\n  return React.createElement(OptionsList, __assign({}, menuProps, {\n    onLoadMore: handleLoadMore,\n    ref: scrollRef,\n    open: true,\n    // to prevent closing the list when clicking the scrollbar on IE11\n    nativeAttributes: {\n      unselectable: 'on'\n    }\n  }), React.createElement(\"div\", {\n    \"aria-hidden\": \"true\",\n    key: \"total-size\",\n    className: styles['layout-strut'],\n    style: {\n      height: rowVirtualizer.totalSize + (autosuggestItemsState.items.length === 1 ? 1 : 0)\n    }\n  }), rowVirtualizer.virtualItems.map(function (virtualRow) {\n    var index = virtualRow.index,\n      start = virtualRow.start,\n      measureRef = virtualRow.measureRef;\n    var item = autosuggestItemsState.items[index];\n    var optionProps = getOptionProps(index, item, autosuggestItemsState.items, highlightedA11yProps, autosuggestItemsState.highlightedOption, hasDropdownStatus);\n    return React.createElement(AutosuggestOption, __assign({\n      key: index,\n      ref: measureRef,\n      highlightText: highlightText,\n      option: item,\n      highlighted: item === autosuggestItemsState.highlightedOption,\n      \"data-mouse-target\": index,\n      enteredTextLabel: enteredTextLabel,\n      virtualPosition: start + (index === 0 ? 1 : 0),\n      screenReaderContent: screenReaderContent,\n      ariaSetsize: autosuggestItemsState.items.length,\n      ariaPosinset: index + 1,\n      highlightType: autosuggestItemsState.highlightType\n    }, optionProps));\n  }), listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n};\nexport default VirtualList;","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useImperativeHandle","useRef","useVirtual","OptionsList","useContainerQuery","AutosuggestOption","getOptionProps","styles","VirtualList","_a","autosuggestItemsState","handleLoadMore","menuProps","enteredTextLabel","highlightedA11yProps","hasDropdownStatus","highlightText","listBottom","screenReaderContent","scrollRef","width","strutRef","current","rowVirtualizer","size","items","length","parentRef","estimateSize","overscan","highlightType","scrollToIndex","highlightedIndex","onLoadMore","ref","open","nativeAttributes","unselectable","key","className","style","height","totalSize","virtualItems","map","virtualRow","start","measureRef","item","index","optionProps","highlightedOption","option","highlighted","virtualPosition","ariaSetsize","ariaPosinset","role"],"sources":["/Users/dcastro/node_modules/src/autosuggest/virtual-list.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useImperativeHandle, useRef } from 'react';\nimport { useVirtual } from 'react-virtual';\n\nimport OptionsList from '../internal/components/options-list';\nimport { useContainerQuery } from '../internal/hooks/container-queries';\n\nimport AutosuggestOption from './autosuggest-option';\nimport { getOptionProps, ListProps } from './plain-list';\nimport styles from './styles.css.js';\n\nconst VirtualList = ({\n  autosuggestItemsState,\n  handleLoadMore,\n  menuProps,\n  enteredTextLabel,\n  highlightedA11yProps,\n  hasDropdownStatus,\n  highlightText,\n  listBottom,\n  screenReaderContent,\n}: ListProps) => {\n  const scrollRef = useRef<HTMLUListElement>(null);\n  // update component, when it gets wider or narrower to reposition items\n  const [width, strutRef] = useContainerQuery(rect => rect.width, []);\n  useImperativeHandle(strutRef, () => scrollRef.current);\n  const rowVirtualizer = useVirtual({\n    size: autosuggestItemsState.items.length,\n    parentRef: scrollRef,\n    // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n    // when the height of any option could have changed:\n    // 1: because the component got resized (width property got updated)\n    // 2: becasue the option changed its content (highlightText property controls the highlight and the visibility of hidden tags)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    estimateSize: useCallback(() => 31, [width, highlightText]),\n    overscan: 5,\n  });\n\n  useEffect(() => {\n    if (autosuggestItemsState.highlightType === 'keyboard') {\n      rowVirtualizer.scrollToIndex(autosuggestItemsState.highlightedIndex);\n    }\n  }, [autosuggestItemsState.highlightType, autosuggestItemsState.highlightedIndex, rowVirtualizer]);\n\n  return (\n    <OptionsList\n      {...menuProps}\n      onLoadMore={handleLoadMore}\n      ref={scrollRef}\n      open={true}\n      // to prevent closing the list when clicking the scrollbar on IE11\n      nativeAttributes={{ unselectable: 'on' }}\n    >\n      <div\n        aria-hidden=\"true\"\n        key=\"total-size\"\n        className={styles['layout-strut']}\n        style={{ height: rowVirtualizer.totalSize + (autosuggestItemsState.items.length === 1 ? 1 : 0) }}\n      />\n      {rowVirtualizer.virtualItems.map(virtualRow => {\n        const { index, start, measureRef } = virtualRow;\n        const item = autosuggestItemsState.items[index];\n        const optionProps = getOptionProps(\n          index,\n          item,\n          autosuggestItemsState.items,\n          highlightedA11yProps,\n          autosuggestItemsState.highlightedOption,\n          hasDropdownStatus\n        );\n\n        return (\n          <AutosuggestOption\n            key={index}\n            ref={measureRef}\n            highlightText={highlightText}\n            option={item}\n            highlighted={item === autosuggestItemsState.highlightedOption}\n            data-mouse-target={index}\n            enteredTextLabel={enteredTextLabel}\n            virtualPosition={start + (index === 0 ? 1 : 0)}\n            screenReaderContent={screenReaderContent}\n            ariaSetsize={autosuggestItemsState.items.length}\n            ariaPosinset={index + 1}\n            highlightType={autosuggestItemsState.highlightType}\n            {...optionProps}\n          />\n        );\n      })}\n      {listBottom ? (\n        <li role=\"option\" className={styles['list-bottom']}>\n          {listBottom}\n        </li>\n      ) : null}\n    </OptionsList>\n  );\n};\n\nexport default VirtualList;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}