{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useRef } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from '../app-layout/visual-refresh/context';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { getBaseProps } from '../internal/base-component';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useDynamicOverlap } from '../app-layout/visual-refresh/hooks/use-dynamic-overlap';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport styles from './styles.css.js';\nexport default function ContentLayout(_a) {\n  var _b, _c, _d;\n  var children = _a.children,\n    disableOverlap = _a.disableOverlap,\n    header = _a.header,\n    rest = __rest(_a, [\"children\", \"disableOverlap\", \"header\"]);\n  var baseProps = getBaseProps(rest);\n  var breadcrumbs = useContext(AppLayoutContext).breadcrumbs;\n  var rootElement = useRef(null);\n  var __internalRootRef = useBaseComponent('ContentLayout').__internalRootRef;\n  var mergedRef = useMergeRefs(rootElement, __internalRootRef);\n  var overlapElement = useDynamicOverlap();\n  var isVisualRefresh = useVisualRefresh();\n  /**\n   * Disable the overlap if the component is missing either a header or child\n   * content. If the component is not using visual refresh then the overlap\n   * will not be displayed at all. This is handled in the CSS not the JavaScript.\n   */\n  var isOverlapDisabled = !children || !header || disableOverlap;\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.layout, (_b = {}, _b[styles['is-overlap-disabled']] = isOverlapDisabled, _b[styles['is-visual-refresh']] = isVisualRefresh, _b)),\n    ref: mergedRef\n  }), React.createElement(\"div\", {\n    className: clsx(styles.background, (_c = {}, _c[styles['is-overlap-disabled']] = isOverlapDisabled, _c), 'awsui-context-content-header'),\n    ref: overlapElement\n  }), header && React.createElement(\"div\", {\n    className: clsx(styles.header, (_d = {}, _d[styles['has-breadcrumbs']] = breadcrumbs, _d), 'awsui-context-content-header')\n  }, header), React.createElement(\"div\", {\n    className: styles.content\n  }, children));\n}\napplyDisplayName(ContentLayout, 'ContentLayout');","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AACjD,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,gBAAgB,QAAQ,sCAAsC;AACvE,SAASC,gBAAgB,QAAQ,sCAAsC;AAEvE,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAOC,gBAAgB,MAAM,sCAAsC;AACnE,SAASC,iBAAiB,QAAQ,wDAAwD;AAC1F,SAASC,YAAY,QAAQ,kCAAkC;AAC/D,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,OAAOC,MAAM,MAAM,iBAAiB;AAIpC,eAAc,SAAUC,aAAa,CAACC,EAAiE;;EAA/D,YAAQ;IAAEC,cAAc;IAAEC,MAAM;IAAKC,IAAI,cAA3C,wCAA6C,CAAF;EAC/E,IAAMC,SAAS,GAAGX,YAAY,CAACU,IAAI,CAAC;EAC5B,eAAW,GAAKf,UAAU,CAACG,gBAAgB,CAAC,YAAjC;EAEnB,IAAMc,WAAW,GAAGhB,MAAM,CAAiB,IAAI,CAAC;EACxC,qBAAiB,GAAKK,gBAAgB,CAAC,eAAe,CAAC,kBAAtC;EACzB,IAAMY,SAAS,GAAGV,YAAY,CAACS,WAAW,EAAEE,iBAAiB,CAAC;EAC9D,IAAMC,cAAc,GAAGb,iBAAiB,EAAE;EAC1C,IAAMc,eAAe,GAAGZ,gBAAgB,EAAE;EAE1C;;;;;EAKA,IAAMa,iBAAiB,GAAG,CAACC,QAAQ,IAAI,CAACT,MAAM,IAAID,cAAc;EAEhE,OACEd,wCACMiB,SAAS;IACbQ,SAAS,EAAEtB,IAAI,CAACc,SAAS,CAACQ,SAAS,EAAEd,MAAM,CAACe,MAAM,YAChDC,GAAChB,MAAM,CAAC,qBAAqB,CAAC,IAAGY,iBAAiB,EAClDI,GAAChB,MAAM,CAAC,mBAAmB,CAAC,IAAGW,eAAe,MAC9C;IACFM,GAAG,EAAET;EAAS,IAEdnB;IACEyB,SAAS,EAAEtB,IAAI,CACbQ,MAAM,CAACkB,UAAU,YACfC,GAACnB,MAAM,CAAC,qBAAqB,CAAC,IAAGY,iBAAiB,OACpD,8BAA8B,CAC/B;IACDK,GAAG,EAAEP;EAAc,EACnB,EAEDN,MAAM,IACLf;IACEyB,SAAS,EAAEtB,IAAI,CAACQ,MAAM,CAACI,MAAM,YAAIgB,GAACpB,MAAM,CAAC,iBAAiB,CAAC,IAAGqB,WAAW,OAAI,8BAA8B;EAAC,GAE3GjB,MAAM,CAEV,EAEDf;IAAKyB,SAAS,EAAEd,MAAM,CAACsB;EAAO,GAAGT,QAAQ,CAAO,CAC5C;AAEV;AAEAnB,gBAAgB,CAACO,aAAa,EAAE,eAAe,CAAC","names":["React","useContext","useRef","clsx","AppLayoutContext","applyDisplayName","getBaseProps","useBaseComponent","useDynamicOverlap","useMergeRefs","useVisualRefresh","styles","ContentLayout","_a","disableOverlap","header","rest","baseProps","rootElement","mergedRef","__internalRootRef","overlapElement","isVisualRefresh","isOverlapDisabled","children","className","layout","_b","ref","background","_c","_d","breadcrumbs","content"],"sources":["/Users/dcastro/node_modules/src/content-layout/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useRef } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from '../app-layout/visual-refresh/context';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { ContentLayoutProps } from './interfaces';\nimport { getBaseProps } from '../internal/base-component';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useDynamicOverlap } from '../app-layout/visual-refresh/hooks/use-dynamic-overlap';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport styles from './styles.css.js';\n\nexport { ContentLayoutProps };\n\nexport default function ContentLayout({ children, disableOverlap, header, ...rest }: ContentLayoutProps) {\n  const baseProps = getBaseProps(rest);\n  const { breadcrumbs } = useContext(AppLayoutContext);\n\n  const rootElement = useRef<HTMLDivElement>(null);\n  const { __internalRootRef } = useBaseComponent('ContentLayout');\n  const mergedRef = useMergeRefs(rootElement, __internalRootRef);\n  const overlapElement = useDynamicOverlap();\n  const isVisualRefresh = useVisualRefresh();\n\n  /**\n   * Disable the overlap if the component is missing either a header or child\n   * content. If the component is not using visual refresh then the overlap\n   * will not be displayed at all. This is handled in the CSS not the JavaScript.\n   */\n  const isOverlapDisabled = !children || !header || disableOverlap;\n\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.layout, {\n        [styles['is-overlap-disabled']]: isOverlapDisabled,\n        [styles['is-visual-refresh']]: isVisualRefresh,\n      })}\n      ref={mergedRef}\n    >\n      <div\n        className={clsx(\n          styles.background,\n          { [styles['is-overlap-disabled']]: isOverlapDisabled },\n          'awsui-context-content-header'\n        )}\n        ref={overlapElement}\n      />\n\n      {header && (\n        <div\n          className={clsx(styles.header, { [styles['has-breadcrumbs']]: breadcrumbs }, 'awsui-context-content-header')}\n        >\n          {header}\n        </div>\n      )}\n\n      <div className={styles.content}>{children}</div>\n    </div>\n  );\n}\n\napplyDisplayName(ContentLayout, 'ContentLayout');\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}