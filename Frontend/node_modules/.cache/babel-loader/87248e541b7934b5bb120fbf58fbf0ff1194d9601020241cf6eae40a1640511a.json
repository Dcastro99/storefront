{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState, createContext, useContext } from 'react';\nimport { getColumnKey } from './utils';\nimport headerCellStyles from './header-cell/styles.css.js';\nimport { warnOnce } from '../internal/logging';\nexport var DEFAULT_WIDTH = 120;\nvar SELECTION_CELL_WIDTH = 54;\nfunction checkProperty(column, name) {\n  var value = column[name];\n  if (typeof value !== 'number' && typeof value !== 'undefined') {\n    warnOnce('Table', \"resizableColumns feature requires \".concat(name, \" property to be a number, got \").concat(value, \". The component may work incorrectly.\"));\n  }\n}\nexport function checkColumnWidths(columnDefinitions) {\n  for (var _i = 0, columnDefinitions_1 = columnDefinitions; _i < columnDefinitions_1.length; _i++) {\n    var column = columnDefinitions_1[_i];\n    checkProperty(column, 'minWidth');\n    checkProperty(column, 'width');\n  }\n}\nfunction readWidths(headerEl, columnDefinitions, hasSelection) {\n  var result = {};\n  for (var index = 0; index < columnDefinitions.length; index++) {\n    var column = columnDefinitions[index];\n    var id = getColumnKey(columnDefinitions[index], index);\n    var width = column.width || 0;\n    var minWidth = column.minWidth || width || DEFAULT_WIDTH;\n    if (!width &&\n    // read width from the DOM if it is missing in the config\n    index !== columnDefinitions.length - 1 // skip reading for the last column, because it expands to fully fit the container\n    ) {\n      var colIndex = hasSelection ? index + 2 : index + 1;\n      var colEl = headerEl.querySelector(\".\".concat(headerCellStyles['header-cell'], \":nth-child(\").concat(colIndex, \")\"));\n      width = colEl.getBoundingClientRect().width;\n    }\n    result[id] = Math.max(width, minWidth);\n  }\n  return result;\n}\nfunction updateWidths(columnDefinitions, oldWidths, newWidth, colIndex) {\n  var _a;\n  var definition = columnDefinitions[colIndex];\n  var id = getColumnKey(definition, colIndex);\n  var minWidth = typeof definition.minWidth === 'number' ? definition.minWidth : DEFAULT_WIDTH;\n  newWidth = Math.max(newWidth, minWidth);\n  if (oldWidths[id] === newWidth) {\n    return oldWidths;\n  }\n  return __assign(__assign({}, oldWidths), (_a = {}, _a[id] = newWidth, _a));\n}\nvar WidthsContext = createContext({\n  totalWidth: 0,\n  columnWidths: {},\n  updateColumn: function () {}\n});\nexport function ColumnWidthsProvider(_a) {\n  var tableRef = _a.tableRef,\n    visibleColumnDefinitions = _a.visibleColumnDefinitions,\n    resizableColumns = _a.resizableColumns,\n    hasSelection = _a.hasSelection,\n    children = _a.children;\n  var visibleColumns = useRef(null);\n  var _b = useState({}),\n    columnWidths = _b[0],\n    setColumnWidths = _b[1];\n  useEffect(function () {\n    if (!resizableColumns) {\n      return;\n    }\n    var lastVisible = visibleColumns.current;\n    if (lastVisible) {\n      var _loop_1 = function (index) {\n        var column = visibleColumnDefinitions[index];\n        var id = getColumnKey(column, index);\n        if (!columnWidths[id] && lastVisible.indexOf(column.id) === -1) {\n          setColumnWidths(function (columnWidths) {\n            var _a;\n            return __assign(__assign({}, columnWidths), (_a = {}, _a[id] = column.width || DEFAULT_WIDTH, _a));\n          });\n        }\n      };\n      for (var index = 0; index < visibleColumnDefinitions.length; index++) {\n        _loop_1(index);\n      }\n    }\n    visibleColumns.current = visibleColumnDefinitions.map(function (column) {\n      return column.id;\n    });\n  }, [columnWidths, resizableColumns, visibleColumnDefinitions]);\n  useEffect(function () {\n    if (!resizableColumns) {\n      return;\n    }\n    setColumnWidths(function () {\n      return readWidths(tableRef.current, visibleColumnDefinitions, hasSelection);\n    });\n    // This code is intended to run only at the first render and should not re-run when table props change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  function updateColumn(colIndex, newWidth) {\n    setColumnWidths(function (columnWidths) {\n      return updateWidths(visibleColumnDefinitions, columnWidths, newWidth, colIndex);\n    });\n  }\n  var totalWidth = visibleColumnDefinitions.reduce(function (total, column, index) {\n    return total + (columnWidths[getColumnKey(column, index)] || DEFAULT_WIDTH);\n  }, 0);\n  if (hasSelection) {\n    totalWidth += SELECTION_CELL_WIDTH;\n  }\n  return React.createElement(WidthsContext.Provider, {\n    value: {\n      columnWidths: columnWidths,\n      totalWidth: totalWidth,\n      updateColumn: updateColumn\n    }\n  }, children);\n}\nexport function useColumnWidths() {\n  return useContext(WidthsContext);\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","useState","createContext","useContext","getColumnKey","headerCellStyles","warnOnce","DEFAULT_WIDTH","SELECTION_CELL_WIDTH","checkProperty","column","name","value","checkColumnWidths","columnDefinitions","columnDefinitions_1","_i","readWidths","headerEl","hasSelection","result","index","length","id","width","minWidth","colIndex","colEl","querySelector","getBoundingClientRect","Math","max","updateWidths","oldWidths","newWidth","definition","WidthsContext","totalWidth","columnWidths","updateColumn","ColumnWidthsProvider","_a","tableRef","visibleColumnDefinitions","resizableColumns","children","visibleColumns","setColumnWidths","lastVisible","current","indexOf","map","reduce","total","Provider","useColumnWidths"],"sources":["/Users/dcastro/node_modules/src/table/use-column-widths.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState, createContext, useContext } from 'react';\nimport { TableProps } from './interfaces';\nimport { getColumnKey } from './utils';\nimport headerCellStyles from './header-cell/styles.css.js';\nimport { warnOnce } from '../internal/logging';\n\nexport const DEFAULT_WIDTH = 120;\nconst SELECTION_CELL_WIDTH = 54;\n\nfunction checkProperty(column: TableProps.ColumnDefinition<any>, name: 'width' | 'minWidth') {\n  const value = column[name];\n  if (typeof value !== 'number' && typeof value !== 'undefined') {\n    warnOnce(\n      'Table',\n      `resizableColumns feature requires ${name} property to be a number, got ${value}. The component may work incorrectly.`\n    );\n  }\n}\n\nexport function checkColumnWidths(columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<any>>) {\n  for (const column of columnDefinitions) {\n    checkProperty(column, 'minWidth');\n    checkProperty(column, 'width');\n  }\n}\n\nfunction readWidths(\n  headerEl: HTMLElement,\n  columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<any>>,\n  hasSelection: boolean\n) {\n  const result: Record<string, number> = {};\n  for (let index = 0; index < columnDefinitions.length; index++) {\n    const column = columnDefinitions[index];\n    const id = getColumnKey(columnDefinitions[index], index);\n    let width = (column.width as number) || 0;\n    const minWidth = (column.minWidth as number) || width || DEFAULT_WIDTH;\n    if (\n      !width && // read width from the DOM if it is missing in the config\n      index !== columnDefinitions.length - 1 // skip reading for the last column, because it expands to fully fit the container\n    ) {\n      const colIndex = hasSelection ? index + 2 : index + 1;\n      const colEl = headerEl.querySelector<HTMLElement>(`.${headerCellStyles['header-cell']}:nth-child(${colIndex})`)!;\n      width = colEl.getBoundingClientRect().width;\n    }\n    result[id] = Math.max(width, minWidth);\n  }\n  return result;\n}\n\nfunction updateWidths(\n  columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<any>>,\n  oldWidths: Record<string, number>,\n  newWidth: number,\n  colIndex: number\n) {\n  const definition = columnDefinitions[colIndex];\n  const id = getColumnKey(definition, colIndex);\n  const minWidth = typeof definition.minWidth === 'number' ? definition.minWidth : DEFAULT_WIDTH;\n  newWidth = Math.max(newWidth, minWidth);\n  if (oldWidths[id] === newWidth) {\n    return oldWidths;\n  }\n  return { ...oldWidths, [id]: newWidth };\n}\n\ninterface WidthsContext {\n  totalWidth: number;\n  columnWidths: Record<string, number>;\n  updateColumn: (colIndex: number, newWidth: number) => void;\n}\n\nconst WidthsContext = createContext<WidthsContext>({\n  totalWidth: 0,\n  columnWidths: {},\n  updateColumn: () => {},\n});\n\ninterface WidthProviderProps {\n  tableRef: React.MutableRefObject<HTMLElement | null>;\n  visibleColumnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<any>>;\n  resizableColumns: boolean | undefined;\n  hasSelection: boolean;\n  children: React.ReactNode;\n}\n\nexport function ColumnWidthsProvider({\n  tableRef,\n  visibleColumnDefinitions,\n  resizableColumns,\n  hasSelection,\n  children,\n}: WidthProviderProps) {\n  const visibleColumns = useRef<(string | undefined)[] | null>(null);\n  const [columnWidths, setColumnWidths] = useState<Record<string, number>>({});\n\n  useEffect(() => {\n    if (!resizableColumns) {\n      return;\n    }\n    const lastVisible = visibleColumns.current;\n    if (lastVisible) {\n      for (let index = 0; index < visibleColumnDefinitions.length; index++) {\n        const column = visibleColumnDefinitions[index];\n        const id = getColumnKey(column, index);\n        if (!columnWidths[id] && lastVisible.indexOf(column.id) === -1) {\n          setColumnWidths(columnWidths => ({ ...columnWidths, [id]: (column.width as number) || DEFAULT_WIDTH }));\n        }\n      }\n    }\n    visibleColumns.current = visibleColumnDefinitions.map(column => column.id);\n  }, [columnWidths, resizableColumns, visibleColumnDefinitions]);\n\n  useEffect(() => {\n    if (!resizableColumns) {\n      return;\n    }\n    setColumnWidths(() => readWidths(tableRef.current!, visibleColumnDefinitions, hasSelection));\n    // This code is intended to run only at the first render and should not re-run when table props change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function updateColumn(colIndex: number, newWidth: number) {\n    setColumnWidths(columnWidths => updateWidths(visibleColumnDefinitions, columnWidths, newWidth, colIndex));\n  }\n\n  let totalWidth = visibleColumnDefinitions.reduce(\n    (total, column, index) => total + (columnWidths[getColumnKey(column, index)] || DEFAULT_WIDTH),\n    0\n  );\n  if (hasSelection) {\n    totalWidth += SELECTION_CELL_WIDTH;\n  }\n\n  return <WidthsContext.Provider value={{ columnWidths, totalWidth, updateColumn }}>{children}</WidthsContext.Provider>;\n}\n\nexport function useColumnWidths() {\n  return useContext(WidthsContext);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}