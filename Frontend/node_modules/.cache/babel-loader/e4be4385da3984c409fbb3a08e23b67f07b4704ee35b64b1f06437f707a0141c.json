{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useImperativeHandle, useRef } from 'react';\nimport InternalContainer from '../container/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport ToolsHeader from './tools-header';\nimport Thead from './thead';\nimport { TableBodyCell, TableBodyCellContent } from './body-cell';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport { useContainerQuery } from '../internal/hooks/container-queries';\nimport { supportsStickyPosition } from '../internal/utils/dom';\nimport SelectionControl from './selection-control';\nimport { checkSortingState, getColumnKey, getItemKey, toContainerVariant } from './utils';\nimport { useRowEvents } from './use-row-events';\nimport { focusMarkers, useFocusMove, useSelection } from './use-selection';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { isDevelopment } from '../internal/is-development';\nimport { checkColumnWidths, ColumnWidthsProvider, DEFAULT_WIDTH } from './use-column-widths';\nimport { useScrollSync } from '../internal/hooks/use-scroll-sync';\nimport { ResizeTracker } from './resizer';\nimport styles from './styles.css.js';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport StickyHeader from './sticky-header';\nimport StickyScrollbar from './sticky-scrollbar';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport useMouseDownTarget from './use-mouse-down-target';\nvar InternalTable = React.forwardRef(function (_a, ref) {\n  var _b;\n  var header = _a.header,\n    footer = _a.footer,\n    empty = _a.empty,\n    filter = _a.filter,\n    pagination = _a.pagination,\n    preferences = _a.preferences,\n    items = _a.items,\n    columnDefinitions = _a.columnDefinitions,\n    trackBy = _a.trackBy,\n    loading = _a.loading,\n    loadingText = _a.loadingText,\n    selectionType = _a.selectionType,\n    selectedItems = _a.selectedItems,\n    isItemDisabled = _a.isItemDisabled,\n    ariaLabels = _a.ariaLabels,\n    onSelectionChange = _a.onSelectionChange,\n    onSortingChange = _a.onSortingChange,\n    sortingColumn = _a.sortingColumn,\n    sortingDescending = _a.sortingDescending,\n    sortingDisabled = _a.sortingDisabled,\n    visibleColumns = _a.visibleColumns,\n    stickyHeader = _a.stickyHeader,\n    stickyHeaderVerticalOffset = _a.stickyHeaderVerticalOffset,\n    onRowClick = _a.onRowClick,\n    onRowContextMenu = _a.onRowContextMenu,\n    wrapLines = _a.wrapLines,\n    resizableColumns = _a.resizableColumns,\n    onColumnWidthsChange = _a.onColumnWidthsChange,\n    variant = _a.variant,\n    __internalRootRef = _a.__internalRootRef,\n    rest = __rest(_a, [\"header\", \"footer\", \"empty\", \"filter\", \"pagination\", \"preferences\", \"items\", \"columnDefinitions\", \"trackBy\", \"loading\", \"loadingText\", \"selectionType\", \"selectedItems\", \"isItemDisabled\", \"ariaLabels\", \"onSelectionChange\", \"onSortingChange\", \"sortingColumn\", \"sortingDescending\", \"sortingDisabled\", \"visibleColumns\", \"stickyHeader\", \"stickyHeaderVerticalOffset\", \"onRowClick\", \"onRowContextMenu\", \"wrapLines\", \"resizableColumns\", \"onColumnWidthsChange\", \"variant\", \"__internalRootRef\"]);\n  var baseProps = getBaseProps(rest);\n  stickyHeader = stickyHeader && supportsStickyPosition();\n  var _c = useContainerQuery(function (_a) {\n      var width = _a.width;\n      return width;\n    }),\n    containerWidth = _c[0],\n    wrapperMeasureRef = _c[1];\n  var wrapperRefObject = useRef(null);\n  var wrapperRef = useMergeRefs(wrapperMeasureRef, wrapperRefObject);\n  var _d = useContainerQuery(function (_a) {\n      var width = _a.width;\n      return width;\n    }),\n    tableWidth = _d[0],\n    tableMeasureRef = _d[1];\n  var tableRefObject = useRef(null);\n  var tableRef = useMergeRefs(tableMeasureRef, tableRefObject);\n  var secondaryWrapperRef = React.useRef(null);\n  var theadRef = useRef(null);\n  var stickyHeaderRef = React.useRef(null);\n  var scrollbarRef = React.useRef(null);\n  useImperativeHandle(ref, function () {\n    var _a;\n    return {\n      scrollToTop: ((_a = stickyHeaderRef.current) === null || _a === void 0 ? void 0 : _a.scrollToTop) || function () {\n        return undefined;\n      }\n    };\n  });\n  var handleScroll = useScrollSync([wrapperRefObject, scrollbarRef, secondaryWrapperRef], !supportsStickyPosition());\n  var _e = useFocusMove(selectionType, items.length),\n    moveFocusDown = _e.moveFocusDown,\n    moveFocusUp = _e.moveFocusUp,\n    moveFocus = _e.moveFocus;\n  var _f = useRowEvents({\n      onRowClick: onRowClick,\n      onRowContextMenu: onRowContextMenu\n    }),\n    onRowClickHandler = _f.onRowClickHandler,\n    onRowContextMenuHandler = _f.onRowContextMenuHandler;\n  var visibleColumnDefinitions = visibleColumns ? columnDefinitions.filter(function (column) {\n    return column.id && visibleColumns.indexOf(column.id) !== -1;\n  }) : columnDefinitions;\n  var _g = useSelection({\n      items: items,\n      trackBy: trackBy,\n      selectedItems: selectedItems,\n      selectionType: selectionType,\n      isItemDisabled: isItemDisabled,\n      onSelectionChange: onSelectionChange,\n      ariaLabels: ariaLabels\n    }),\n    isItemSelected = _g.isItemSelected,\n    selectAllProps = _g.selectAllProps,\n    getItemSelectionProps = _g.getItemSelectionProps,\n    updateShiftToggle = _g.updateShiftToggle;\n  if (loading) {\n    selectAllProps.disabled = true;\n  }\n  if (isDevelopment) {\n    if (resizableColumns) {\n      checkColumnWidths(columnDefinitions);\n    }\n    if (sortingColumn === null || sortingColumn === void 0 ? void 0 : sortingColumn.sortingComparator) {\n      checkSortingState(columnDefinitions, sortingColumn.sortingComparator);\n    }\n  }\n  var isRefresh = useVisualRefresh();\n  var computedVariant = isRefresh ? variant : ['embedded', 'full-page'].indexOf(variant) > -1 ? 'container' : variant;\n  var hasHeader = !!(header || filter || pagination || preferences);\n  var theadProps = {\n    containerWidth: containerWidth,\n    selectionType: selectionType,\n    selectAllProps: selectAllProps,\n    columnDefinitions: visibleColumnDefinitions,\n    variant: computedVariant,\n    wrapLines: wrapLines,\n    resizableColumns: resizableColumns,\n    sortingColumn: sortingColumn,\n    sortingDisabled: sortingDisabled,\n    sortingDescending: sortingDescending,\n    onSortingChange: onSortingChange,\n    onFocusMove: moveFocus,\n    onResizeFinish: function (newWidth) {\n      var widthsDetail = columnDefinitions.map(function (column, index) {\n        return newWidth[getColumnKey(column, index)] || column.width || DEFAULT_WIDTH;\n      });\n      var widthsChanged = widthsDetail.some(function (width, index) {\n        return columnDefinitions[index].width !== width;\n      });\n      if (widthsChanged) {\n        fireNonCancelableEvent(onColumnWidthsChange, {\n          widths: widthsDetail\n        });\n      }\n    }\n  };\n  // Allows keyboard users to scroll horizontally with arrow keys by making the wrapper part of the tab sequence\n  var isWrapperScrollable = tableWidth && containerWidth && tableWidth > containerWidth;\n  var wrapperProps = isWrapperScrollable ? {\n    role: 'region',\n    tabIndex: 0,\n    'aria-label': ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel\n  } : {};\n  var focusVisibleProps = useFocusVisible();\n  var getMouseDownTarget = useMouseDownTarget();\n  return React.createElement(ColumnWidthsProvider, {\n    tableRef: tableRefObject,\n    visibleColumnDefinitions: visibleColumnDefinitions,\n    resizableColumns: resizableColumns,\n    hasSelection: !!selectionType\n  }, React.createElement(InternalContainer, __assign({}, baseProps, {\n    __internalRootRef: __internalRootRef,\n    className: clsx(baseProps.className, styles.root),\n    header: React.createElement(React.Fragment, null, hasHeader && React.createElement(\"div\", {\n      className: clsx(styles['header-controls'], styles[\"variant-\".concat(computedVariant)])\n    }, React.createElement(ToolsHeader, {\n      header: header,\n      filter: filter,\n      pagination: pagination,\n      preferences: preferences\n    })), stickyHeader && React.createElement(StickyHeader, {\n      ref: stickyHeaderRef,\n      variant: computedVariant,\n      theadProps: theadProps,\n      wrapperRef: wrapperRefObject,\n      theadRef: theadRef,\n      secondaryWrapperRef: secondaryWrapperRef,\n      tableRef: tableRefObject,\n      onScroll: handleScroll\n    })),\n    disableHeaderPaddings: true,\n    disableContentPaddings: true,\n    variant: toContainerVariant(computedVariant),\n    __disableFooterPaddings: true,\n    __disableFooterDivider: true,\n    footer: footer && React.createElement(\"div\", {\n      className: clsx(styles['footer-wrapper'], styles[\"variant-\".concat(computedVariant)])\n    }, React.createElement(\"hr\", {\n      className: styles.divider\n    }), React.createElement(\"div\", {\n      className: styles.footer\n    }, footer)),\n    __stickyHeader: stickyHeader,\n    __stickyOffset: stickyHeaderVerticalOffset\n  }, focusMarkers.root), React.createElement(\"div\", __assign({\n    ref: wrapperRef,\n    className: clsx(styles.wrapper, styles[\"variant-\".concat(computedVariant)], (_b = {}, _b[styles['has-footer']] = !!footer, _b[styles['has-header']] = hasHeader, _b)),\n    onScroll: handleScroll\n  }, wrapperProps, focusVisibleProps), React.createElement(\"table\", {\n    ref: tableRef,\n    className: clsx(styles.table, resizableColumns && styles['table-layout-fixed']),\n    // Browsers have weird mechanism to guess whether it's a data table or a layout table.\n    // If we state explicitly, they get it always correctly even with low number of rows.\n    role: \"table\",\n    \"aria-label\": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel\n  }, React.createElement(Thead, __assign({\n    ref: theadRef,\n    hidden: stickyHeader,\n    onCellFocus: function (colIndex) {\n      var _a;\n      return (_a = stickyHeaderRef.current) === null || _a === void 0 ? void 0 : _a.setFocusedColumn(colIndex);\n    },\n    onCellBlur: function () {\n      var _a;\n      return (_a = stickyHeaderRef.current) === null || _a === void 0 ? void 0 : _a.setFocusedColumn(null);\n    }\n  }, theadProps)), React.createElement(\"tbody\", null, loading || items.length === 0 ? React.createElement(\"tr\", null, React.createElement(\"td\", {\n    colSpan: selectionType ? visibleColumnDefinitions.length + 1 : visibleColumnDefinitions.length,\n    className: styles['cell-merged']\n  }, React.createElement(\"div\", {\n    className: styles['cell-merged-content'],\n    style: {\n      width: supportsStickyPosition() && containerWidth && Math.floor(containerWidth) || undefined\n    }\n  }, loading ? React.createElement(InternalStatusIndicator, {\n    type: \"loading\",\n    className: styles.loading,\n    wrapText: true\n  }, loadingText) : React.createElement(\"div\", {\n    className: styles.empty\n  }, empty)))) : items.map(function (item, rowIndex) {\n    var firstVisible = rowIndex === 0;\n    var lastVisible = rowIndex === items.length - 1;\n    var isSelected = !!selectionType && isItemSelected(item);\n    var isPrevSelected = !!selectionType && !firstVisible && isItemSelected(items[rowIndex - 1]);\n    var isNextSelected = !!selectionType && !lastVisible && isItemSelected(items[rowIndex + 1]);\n    return React.createElement(\"tr\", __assign({\n      key: getItemKey(trackBy, item, rowIndex),\n      className: clsx(styles.row, isSelected && styles['row-selected']),\n      onFocus: function (_a) {\n        var _b;\n        var currentTarget = _a.currentTarget;\n        // When an element inside table row receives focus we want to adjust the scroll.\n        // However, that behaviour is unwanted when the focus is received as result of a click\n        // as it causes the click to never reach the target element.\n        if (!currentTarget.contains(getMouseDownTarget())) {\n          (_b = stickyHeaderRef.current) === null || _b === void 0 ? void 0 : _b.scrollToRow(currentTarget);\n        }\n      }\n    }, focusMarkers.item, {\n      onClick: onRowClickHandler && onRowClickHandler.bind(null, rowIndex, item),\n      onContextMenu: onRowContextMenuHandler && onRowContextMenuHandler.bind(null, rowIndex, item)\n    }), selectionType !== undefined && React.createElement(TableBodyCell, {\n      className: styles['selection-control'],\n      isFirstRow: firstVisible,\n      isLastRow: lastVisible,\n      isSelected: isSelected,\n      isNextSelected: isNextSelected,\n      isPrevSelected: isPrevSelected,\n      wrapLines: false\n    }, React.createElement(SelectionControl, __assign({\n      onFocusDown: moveFocusDown,\n      onFocusUp: moveFocusUp,\n      onShiftToggle: updateShiftToggle\n    }, getItemSelectionProps(item)))), visibleColumnDefinitions.map(function (column, colIndex) {\n      return React.createElement(TableBodyCellContent, {\n        key: getColumnKey(column, colIndex),\n        style: resizableColumns ? {} : {\n          width: column.width,\n          minWidth: column.minWidth,\n          maxWidth: column.maxWidth\n        },\n        column: column,\n        item: item,\n        wrapLines: wrapLines,\n        isFirstRow: firstVisible,\n        isLastRow: lastVisible,\n        isSelected: isSelected,\n        isNextSelected: isNextSelected,\n        isPrevSelected: isPrevSelected\n      });\n    }));\n  }))), resizableColumns && React.createElement(ResizeTracker, null)), React.createElement(StickyScrollbar, {\n    ref: scrollbarRef,\n    wrapperRef: wrapperRefObject,\n    tableRef: tableRefObject,\n    onScroll: handleScroll\n  })));\n});\nexport default InternalTable;","map":{"version":3,"mappings":"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","names":["clsx","React","useImperativeHandle","useRef","InternalContainer","getBaseProps","ToolsHeader","Thead","TableBodyCell","TableBodyCellContent","InternalStatusIndicator","useContainerQuery","supportsStickyPosition","SelectionControl","checkSortingState","getColumnKey","getItemKey","toContainerVariant","useRowEvents","focusMarkers","useFocusMove","useSelection","fireNonCancelableEvent","isDevelopment","checkColumnWidths","ColumnWidthsProvider","DEFAULT_WIDTH","useScrollSync","ResizeTracker","styles","useVisualRefresh","StickyHeader","StickyScrollbar","useFocusVisible","useMergeRefs","useMouseDownTarget","InternalTable","forwardRef","_a","ref","footer","empty","filter","pagination","preferences","items","columnDefinitions","trackBy","loading","loadingText","selectionType","selectedItems","isItemDisabled","ariaLabels","onSelectionChange","onSortingChange","sortingColumn","sortingDescending","sortingDisabled","visibleColumns","stickyHeader","stickyHeaderVerticalOffset","onRowClick","onRowContextMenu","wrapLines","resizableColumns","onColumnWidthsChange","variant","__internalRootRef","rest","baseProps","width","containerWidth","wrapperMeasureRef","wrapperRefObject","wrapperRef","tableWidth","tableMeasureRef","tableRefObject","tableRef","secondaryWrapperRef","theadRef","stickyHeaderRef","scrollbarRef","scrollToTop","current","handleScroll","length","moveFocusDown","moveFocusUp","moveFocus","onRowClickHandler","onRowContextMenuHandler","visibleColumnDefinitions","id","indexOf","column","isItemSelected","selectAllProps","getItemSelectionProps","updateShiftToggle","disabled","sortingComparator","isRefresh","computedVariant","hasHeader","header","theadProps","onFocusMove","onResizeFinish","newWidth","widthsDetail","map","index","widthsChanged","some","widths","isWrapperScrollable","wrapperProps","role","tabIndex","tableLabel","focusVisibleProps","getMouseDownTarget","hasSelection","className","root","onScroll","disableHeaderPaddings","disableContentPaddings","__disableFooterPaddings","__disableFooterDivider","divider","__stickyHeader","__stickyOffset","wrapper","_b","table","hidden","onCellFocus","setFocusedColumn","colIndex","onCellBlur","colSpan","style","Math","floor","undefined","type","wrapText","item","rowIndex","firstVisible","lastVisible","isSelected","isPrevSelected","isNextSelected","key","row","onFocus","currentTarget","contains","scrollToRow","onClick","bind","onContextMenu","isFirstRow","isLastRow","onFocusDown","onFocusUp","onShiftToggle","minWidth","maxWidth"],"sources":["/Users/dcastro/node_modules/src/table/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useImperativeHandle, useRef } from 'react';\nimport { TableForwardRefType, TableProps } from './interfaces';\nimport InternalContainer from '../container/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport ToolsHeader from './tools-header';\nimport Thead, { TheadProps } from './thead';\nimport { TableBodyCell, TableBodyCellContent } from './body-cell';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport { useContainerQuery } from '../internal/hooks/container-queries';\nimport { supportsStickyPosition } from '../internal/utils/dom';\nimport SelectionControl from './selection-control';\nimport { checkSortingState, getColumnKey, getItemKey, toContainerVariant } from './utils';\nimport { useRowEvents } from './use-row-events';\nimport { focusMarkers, useFocusMove, useSelection } from './use-selection';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { isDevelopment } from '../internal/is-development';\nimport { checkColumnWidths, ColumnWidthsProvider, DEFAULT_WIDTH } from './use-column-widths';\nimport { useScrollSync } from '../internal/hooks/use-scroll-sync';\nimport { ResizeTracker } from './resizer';\nimport styles from './styles.css.js';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport StickyHeader, { StickyHeaderRef } from './sticky-header';\nimport StickyScrollbar from './sticky-scrollbar';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { SomeRequired } from '../internal/types';\nimport useMouseDownTarget from './use-mouse-down-target';\n\ntype InternalTableProps<T> = SomeRequired<TableProps<T>, 'items' | 'selectedItems' | 'variant'> &\n  InternalBaseComponentProps;\n\nconst InternalTable = React.forwardRef(\n  <T,>(\n    {\n      header,\n      footer,\n      empty,\n      filter,\n      pagination,\n      preferences,\n      items,\n      columnDefinitions,\n      trackBy,\n      loading,\n      loadingText,\n      selectionType,\n      selectedItems,\n      isItemDisabled,\n      ariaLabels,\n      onSelectionChange,\n      onSortingChange,\n      sortingColumn,\n      sortingDescending,\n      sortingDisabled,\n      visibleColumns,\n      stickyHeader,\n      stickyHeaderVerticalOffset,\n      onRowClick,\n      onRowContextMenu,\n      wrapLines,\n      resizableColumns,\n      onColumnWidthsChange,\n      variant,\n      __internalRootRef,\n      ...rest\n    }: InternalTableProps<T>,\n    ref: React.Ref<TableProps.Ref>\n  ) => {\n    const baseProps = getBaseProps(rest);\n    stickyHeader = stickyHeader && supportsStickyPosition();\n\n    const [containerWidth, wrapperMeasureRef] = useContainerQuery<number>(({ width }) => width);\n    const wrapperRefObject = useRef(null);\n    const wrapperRef = useMergeRefs(wrapperMeasureRef, wrapperRefObject);\n\n    const [tableWidth, tableMeasureRef] = useContainerQuery<number>(({ width }) => width);\n    const tableRefObject = useRef(null);\n    const tableRef = useMergeRefs(tableMeasureRef, tableRefObject);\n\n    const secondaryWrapperRef = React.useRef<HTMLDivElement>(null);\n    const theadRef = useRef<HTMLTableRowElement>(null);\n    const stickyHeaderRef = React.useRef<StickyHeaderRef>(null);\n    const scrollbarRef = React.useRef<HTMLDivElement>(null);\n\n    useImperativeHandle(ref, () => ({ scrollToTop: stickyHeaderRef.current?.scrollToTop || (() => undefined) }));\n\n    const handleScroll = useScrollSync(\n      [wrapperRefObject, scrollbarRef, secondaryWrapperRef],\n      !supportsStickyPosition()\n    );\n\n    const { moveFocusDown, moveFocusUp, moveFocus } = useFocusMove(selectionType, items.length);\n    const { onRowClickHandler, onRowContextMenuHandler } = useRowEvents({ onRowClick, onRowContextMenu });\n    const visibleColumnDefinitions = visibleColumns\n      ? columnDefinitions.filter(column => column.id && visibleColumns.indexOf(column.id) !== -1)\n      : columnDefinitions;\n    const { isItemSelected, selectAllProps, getItemSelectionProps, updateShiftToggle } = useSelection({\n      items,\n      trackBy,\n      selectedItems,\n      selectionType,\n      isItemDisabled,\n      onSelectionChange,\n      ariaLabels,\n    });\n    if (loading) {\n      selectAllProps.disabled = true;\n    }\n\n    if (isDevelopment) {\n      if (resizableColumns) {\n        checkColumnWidths(columnDefinitions);\n      }\n      if (sortingColumn?.sortingComparator) {\n        checkSortingState(columnDefinitions, sortingColumn.sortingComparator);\n      }\n    }\n\n    const isRefresh = useVisualRefresh();\n    const computedVariant = isRefresh\n      ? variant\n      : ['embedded', 'full-page'].indexOf(variant) > -1\n      ? 'container'\n      : variant;\n    const hasHeader = !!(header || filter || pagination || preferences);\n\n    const theadProps: TheadProps = {\n      containerWidth,\n      selectionType,\n      selectAllProps,\n      columnDefinitions: visibleColumnDefinitions,\n      variant: computedVariant,\n      wrapLines,\n      resizableColumns,\n      sortingColumn,\n      sortingDisabled,\n      sortingDescending,\n      onSortingChange,\n      onFocusMove: moveFocus,\n      onResizeFinish(newWidth) {\n        const widthsDetail = columnDefinitions.map(\n          (column, index) => newWidth[getColumnKey(column, index)] || (column.width as number) || DEFAULT_WIDTH\n        );\n        const widthsChanged = widthsDetail.some((width, index) => columnDefinitions[index].width !== width);\n        if (widthsChanged) {\n          fireNonCancelableEvent(onColumnWidthsChange, { widths: widthsDetail });\n        }\n      },\n    };\n\n    // Allows keyboard users to scroll horizontally with arrow keys by making the wrapper part of the tab sequence\n    const isWrapperScrollable = tableWidth && containerWidth && tableWidth > containerWidth;\n    const wrapperProps = isWrapperScrollable\n      ? { role: 'region', tabIndex: 0, 'aria-label': ariaLabels?.tableLabel }\n      : {};\n    const focusVisibleProps = useFocusVisible();\n\n    const getMouseDownTarget = useMouseDownTarget();\n\n    return (\n      <ColumnWidthsProvider\n        tableRef={tableRefObject}\n        visibleColumnDefinitions={visibleColumnDefinitions}\n        resizableColumns={resizableColumns}\n        hasSelection={!!selectionType}\n      >\n        <InternalContainer\n          {...baseProps}\n          __internalRootRef={__internalRootRef}\n          className={clsx(baseProps.className, styles.root)}\n          header={\n            <>\n              {hasHeader && (\n                <div className={clsx(styles['header-controls'], styles[`variant-${computedVariant}`])}>\n                  <ToolsHeader header={header} filter={filter} pagination={pagination} preferences={preferences} />\n                </div>\n              )}\n              {stickyHeader && (\n                <StickyHeader\n                  ref={stickyHeaderRef}\n                  variant={computedVariant}\n                  theadProps={theadProps}\n                  wrapperRef={wrapperRefObject}\n                  theadRef={theadRef}\n                  secondaryWrapperRef={secondaryWrapperRef}\n                  tableRef={tableRefObject}\n                  onScroll={handleScroll}\n                />\n              )}\n            </>\n          }\n          disableHeaderPaddings={true}\n          disableContentPaddings={true}\n          variant={toContainerVariant(computedVariant)}\n          __disableFooterPaddings={true}\n          __disableFooterDivider={true}\n          footer={\n            footer && (\n              <div className={clsx(styles['footer-wrapper'], styles[`variant-${computedVariant}`])}>\n                <hr className={styles.divider} />\n                <div className={styles.footer}>{footer}</div>\n              </div>\n            )\n          }\n          __stickyHeader={stickyHeader}\n          __stickyOffset={stickyHeaderVerticalOffset}\n          {...focusMarkers.root}\n        >\n          <div\n            ref={wrapperRef}\n            className={clsx(styles.wrapper, styles[`variant-${computedVariant}`], {\n              [styles['has-footer']]: !!footer,\n              [styles['has-header']]: hasHeader,\n            })}\n            onScroll={handleScroll}\n            {...wrapperProps}\n            {...focusVisibleProps}\n          >\n            <table\n              ref={tableRef}\n              className={clsx(styles.table, resizableColumns && styles['table-layout-fixed'])}\n              // Browsers have weird mechanism to guess whether it's a data table or a layout table.\n              // If we state explicitly, they get it always correctly even with low number of rows.\n              role=\"table\"\n              aria-label={ariaLabels?.tableLabel}\n            >\n              <Thead\n                ref={theadRef}\n                hidden={stickyHeader}\n                onCellFocus={colIndex => stickyHeaderRef.current?.setFocusedColumn(colIndex)}\n                onCellBlur={() => stickyHeaderRef.current?.setFocusedColumn(null)}\n                {...theadProps}\n              />\n              <tbody>\n                {loading || items.length === 0 ? (\n                  <tr>\n                    <td\n                      colSpan={selectionType ? visibleColumnDefinitions.length + 1 : visibleColumnDefinitions.length}\n                      className={styles['cell-merged']}\n                    >\n                      <div\n                        className={styles['cell-merged-content']}\n                        style={{\n                          width:\n                            (supportsStickyPosition() && containerWidth && Math.floor(containerWidth)) || undefined,\n                        }}\n                      >\n                        {loading ? (\n                          <InternalStatusIndicator type=\"loading\" className={styles.loading} wrapText={true}>\n                            {loadingText}\n                          </InternalStatusIndicator>\n                        ) : (\n                          <div className={styles.empty}>{empty}</div>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ) : (\n                  items.map((item, rowIndex) => {\n                    const firstVisible = rowIndex === 0;\n                    const lastVisible = rowIndex === items.length - 1;\n                    const isSelected = !!selectionType && isItemSelected(item);\n                    const isPrevSelected = !!selectionType && !firstVisible && isItemSelected(items[rowIndex - 1]);\n                    const isNextSelected = !!selectionType && !lastVisible && isItemSelected(items[rowIndex + 1]);\n                    return (\n                      <tr\n                        key={getItemKey(trackBy, item, rowIndex)}\n                        className={clsx(styles.row, isSelected && styles['row-selected'])}\n                        onFocus={({ currentTarget }) => {\n                          // When an element inside table row receives focus we want to adjust the scroll.\n                          // However, that behaviour is unwanted when the focus is received as result of a click\n                          // as it causes the click to never reach the target element.\n                          if (!currentTarget.contains(getMouseDownTarget())) {\n                            stickyHeaderRef.current?.scrollToRow(currentTarget);\n                          }\n                        }}\n                        {...focusMarkers.item}\n                        onClick={onRowClickHandler && onRowClickHandler.bind(null, rowIndex, item)}\n                        onContextMenu={onRowContextMenuHandler && onRowContextMenuHandler.bind(null, rowIndex, item)}\n                      >\n                        {selectionType !== undefined && (\n                          <TableBodyCell\n                            className={styles['selection-control']}\n                            isFirstRow={firstVisible}\n                            isLastRow={lastVisible}\n                            isSelected={isSelected}\n                            isNextSelected={isNextSelected}\n                            isPrevSelected={isPrevSelected}\n                            wrapLines={false}\n                          >\n                            <SelectionControl\n                              onFocusDown={moveFocusDown}\n                              onFocusUp={moveFocusUp}\n                              onShiftToggle={updateShiftToggle}\n                              {...getItemSelectionProps(item)}\n                            />\n                          </TableBodyCell>\n                        )}\n                        {visibleColumnDefinitions.map((column, colIndex) => (\n                          <TableBodyCellContent\n                            key={getColumnKey(column, colIndex)}\n                            style={\n                              resizableColumns\n                                ? {}\n                                : {\n                                    width: column.width,\n                                    minWidth: column.minWidth,\n                                    maxWidth: column.maxWidth,\n                                  }\n                            }\n                            column={column}\n                            item={item}\n                            wrapLines={wrapLines}\n                            isFirstRow={firstVisible}\n                            isLastRow={lastVisible}\n                            isSelected={isSelected}\n                            isNextSelected={isNextSelected}\n                            isPrevSelected={isPrevSelected}\n                          />\n                        ))}\n                      </tr>\n                    );\n                  })\n                )}\n              </tbody>\n            </table>\n            {resizableColumns && <ResizeTracker />}\n          </div>\n          <StickyScrollbar\n            ref={scrollbarRef}\n            wrapperRef={wrapperRefObject}\n            tableRef={tableRefObject}\n            onScroll={handleScroll}\n          />\n        </InternalContainer>\n      </ColumnWidthsProvider>\n    );\n  }\n) as TableForwardRefType;\n\nexport default InternalTable;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}