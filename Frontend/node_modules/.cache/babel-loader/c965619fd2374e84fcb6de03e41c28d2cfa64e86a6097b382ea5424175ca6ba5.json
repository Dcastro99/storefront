{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useEffect } from 'react';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\n// Provides controlled or uncontrolled props to highlight chart elements.\nexport default function useHighlightProps(series, controlledHighlightedSeries, controlledOnHighlightChange) {\n  var _a = useControllable(controlledHighlightedSeries, controlledOnHighlightChange, null, {\n      componentName: 'AreaChart',\n      controlledProp: 'highlightedSeries',\n      changeHandler: 'onHighlightChange'\n    }),\n    _b = _a[0],\n    highlightedSeries = _b === void 0 ? null : _b,\n    setHighlightedSeries = _a[1];\n  var notifyHighlightedSeries = useCallback(function (s) {\n    fireNonCancelableEvent(controlledOnHighlightChange, {\n      highlightedSeries: s\n    });\n  }, [controlledOnHighlightChange]);\n  // Reset highlights if series change.\n  useEffect(function () {\n    if (controlledHighlightedSeries) {\n      var highlightedSeriesIndex = series.indexOf(controlledHighlightedSeries);\n      if (highlightedSeriesIndex === -1) {\n        setHighlightedSeries(null);\n        notifyHighlightedSeries(null);\n      }\n    }\n  }, [series, controlledHighlightedSeries, setHighlightedSeries, notifyHighlightedSeries]);\n  return [highlightedSeries, notifyHighlightedSeries];\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAC9C,SAASC,sBAAsB,QAAmC,uBAAuB;AACzF,SAASC,eAAe,QAAQ,uCAAuC;AAKvE;AACA,eAAc,SAAUC,iBAAiB,CACvCC,MAA2C,EAC3CC,2BAA6D,EAC7DC,2BAAgG;EAE1F,SAAmDJ,eAAe,CACtEG,2BAA2B,EAC3BC,2BAA2B,EAC3B,IAAI,EACJ;MACEC,aAAa,EAAE,WAAW;MAC1BC,cAAc,EAAE,mBAAmB;MACnCC,aAAa,EAAE;KAChB,CACF;IATMC,UAAwB;IAAxBC,iBAAiB,mBAAG,IAAI;IAAEC,oBAAoB,QASpD;EAED,IAAMC,uBAAuB,GAAGd,WAAW,CACzC,UAACe,CAAkC;IACjCb,sBAAsB,CAACK,2BAA2B,EAAE;MAAEK,iBAAiB,EAAEG;IAAC,CAAE,CAAC;EAC/E,CAAC,EACD,CAACR,2BAA2B,CAAC,CAC9B;EAED;EACAN,SAAS,CAAC;IACR,IAAIK,2BAA2B,EAAE;MAC/B,IAAMU,sBAAsB,GAAGX,MAAM,CAACY,OAAO,CAACX,2BAA2B,CAAC;MAE1E,IAAIU,sBAAsB,KAAK,CAAC,CAAC,EAAE;QACjCH,oBAAoB,CAAC,IAAI,CAAC;QAC1BC,uBAAuB,CAAC,IAAI,CAAC;;;EAGnC,CAAC,EAAE,CAACT,MAAM,EAAEC,2BAA2B,EAAEO,oBAAoB,EAAEC,uBAAuB,CAAC,CAAC;EAExF,OAAO,CAACF,iBAAiB,EAAEE,uBAAuB,CAAC;AACrD","names":["useCallback","useEffect","fireNonCancelableEvent","useControllable","useHighlightProps","series","controlledHighlightedSeries","controlledOnHighlightChange","componentName","controlledProp","changeHandler","_b","highlightedSeries","setHighlightedSeries","notifyHighlightedSeries","s","highlightedSeriesIndex","indexOf"],"sources":["/Users/dcastro/node_modules/src/area-chart/model/use-highlight-props.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useEffect } from 'react';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { AreaChartProps } from '../interfaces';\n\ntype HighlightProps<T> = [null | AreaChartProps.Series<T>, (s: null | AreaChartProps.Series<T>) => void];\n\n// Provides controlled or uncontrolled props to highlight chart elements.\nexport default function useHighlightProps<T>(\n  series: readonly AreaChartProps.Series<T>[],\n  controlledHighlightedSeries?: null | AreaChartProps.Series<T>,\n  controlledOnHighlightChange?: NonCancelableEventHandler<AreaChartProps.HighlightChangeDetail<T>>\n): HighlightProps<T> {\n  const [highlightedSeries = null, setHighlightedSeries] = useControllable(\n    controlledHighlightedSeries,\n    controlledOnHighlightChange,\n    null,\n    {\n      componentName: 'AreaChart',\n      controlledProp: 'highlightedSeries',\n      changeHandler: 'onHighlightChange',\n    }\n  );\n\n  const notifyHighlightedSeries = useCallback(\n    (s: null | AreaChartProps.Series<T>) => {\n      fireNonCancelableEvent(controlledOnHighlightChange, { highlightedSeries: s });\n    },\n    [controlledOnHighlightChange]\n  );\n\n  // Reset highlights if series change.\n  useEffect(() => {\n    if (controlledHighlightedSeries) {\n      const highlightedSeriesIndex = series.indexOf(controlledHighlightedSeries);\n\n      if (highlightedSeriesIndex === -1) {\n        setHighlightedSeries(null);\n        notifyHighlightedSeries(null);\n      }\n    }\n  }, [series, controlledHighlightedSeries, setHighlightedSeries, notifyHighlightedSeries]);\n\n  return [highlightedSeries, notifyHighlightedSeries];\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}