{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { nodeContains } from '../../internal/utils/dom';\nimport styles from '../styles.css.js';\nimport { isYThreshold } from '../utils';\nvar MAX_HOVER_MARGIN = 6;\nexport function useMouseHover(_a) {\n  var plotRef = _a.plotRef,\n    scaledSeries = _a.scaledSeries,\n    barGroups = _a.barGroups,\n    highlightSeries = _a.highlightSeries,\n    highlightPoint = _a.highlightPoint,\n    highlightGroup = _a.highlightGroup,\n    clearHighlightedSeries = _a.clearHighlightedSeries,\n    isGroupNavigation = _a.isGroupNavigation,\n    isHandlersDisabled = _a.isHandlersDisabled;\n  var _b = useState(null),\n    verticalMarkerLeft = _b[0],\n    setVerticalMarkerLeft = _b[1];\n  var onSeriesMouseMove = function (event) {\n    var svgRect = event.target.getBoundingClientRect();\n    var offsetX = event.clientX - svgRect.left;\n    var offsetY = event.clientY - svgRect.top;\n    var closestX = scaledSeries.map(function (v) {\n      return v.x;\n    }).reduce(function (prev, curr) {\n      return Math.abs(curr - offsetX) < Math.abs(prev - offsetX) ? curr : prev;\n    }, -Infinity);\n    var closestY = scaledSeries.filter(function (v) {\n      return v.x === closestX || isYThreshold(v.series);\n    }).map(function (v) {\n      return v.y;\n    }).reduce(function (prev, curr) {\n      return Math.abs(curr - offsetY) < Math.abs(prev - offsetY) ? curr : prev;\n    }, -Infinity);\n    if (isFinite(closestX)) {\n      setVerticalMarkerLeft(closestX);\n      if (isFinite(closestY) && Math.abs(offsetX - closestX) < MAX_HOVER_MARGIN && Math.abs(offsetY - closestY) < MAX_HOVER_MARGIN) {\n        var _a = scaledSeries.filter(function (s) {\n            return (s.x === closestX || isYThreshold(s.series)) && s.y === closestY;\n          })[0],\n          color = _a.color,\n          datum = _a.datum,\n          series = _a.series;\n        highlightSeries(series);\n        highlightPoint({\n          x: closestX,\n          y: closestY,\n          color: color,\n          datum: datum,\n          series: series\n        });\n      } else {\n        highlightSeries(null);\n        highlightPoint(null);\n      }\n    }\n  };\n  var onGroupMouseMove = function (event) {\n    var svgRect = event.target.getBoundingClientRect();\n    var offsetX = event.clientX - svgRect.left;\n    var offsetY = event.clientY - svgRect.top;\n    // If hovering over some group - highlight it.\n    for (var groupIndex = 0; groupIndex < barGroups.length; groupIndex++) {\n      var _a = barGroups[groupIndex].position,\n        x = _a.x,\n        y = _a.y,\n        width = _a.width,\n        height = _a.height;\n      if (x <= offsetX && offsetX <= x + width && y <= offsetY && offsetY <= y + height) {\n        highlightGroup(groupIndex);\n        return;\n      }\n    }\n    // Otherwise - clear the highlight.\n    clearHighlightedSeries();\n  };\n  var onSVGMouseMove = function (event) {\n    if (event.target === plotRef.current.svg && !isHandlersDisabled) {\n      if (isGroupNavigation) {\n        onGroupMouseMove(event);\n      } else if (scaledSeries.length > 0) {\n        onSeriesMouseMove(event);\n      }\n    }\n  };\n  var onSVGMouseOut = function (event) {\n    if (isHandlersDisabled) {\n      return;\n    }\n    if (!nodeContains(plotRef.current.svg, event.relatedTarget) ||\n    // `classList` is not supported on IE11 for SVG elements\n    (event.relatedTarget && event.relatedTarget.getAttribute('class') || '').split(' ').indexOf(styles.series) > -1) {\n      setVerticalMarkerLeft(null);\n      clearHighlightedSeries();\n    }\n  };\n  return {\n    verticalMarkerLeft: verticalMarkerLeft,\n    onSVGMouseMove: onSVGMouseMove,\n    onSVGMouseOut: onSVGMouseOut\n  };\n}","map":{"version":3,"mappings":"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","names":["useState","nodeContains","styles","isYThreshold","MAX_HOVER_MARGIN","useMouseHover","_a","plotRef","scaledSeries","barGroups","highlightSeries","highlightPoint","highlightGroup","clearHighlightedSeries","isGroupNavigation","isHandlersDisabled","verticalMarkerLeft","setVerticalMarkerLeft","onSeriesMouseMove","event","svgRect","target","getBoundingClientRect","offsetX","clientX","left","offsetY","clientY","top","closestX","map","x","reduce","prev","curr","Math","abs","Infinity","closestY","filter","v","series","y","isFinite","s","color","datum","onGroupMouseMove","groupIndex","length","width","height","onSVGMouseMove","current","svg","onSVGMouseOut","relatedTarget","getAttribute","split","indexOf"],"sources":["/Users/dcastro/node_modules/src/mixed-line-bar-chart/hooks/use-mouse-hover.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { nodeContains } from '../../internal/utils/dom';\n\nimport { ScaledBarGroup } from '../make-scaled-bar-groups';\nimport { ScaledPoint } from '../make-scaled-series';\n\nimport styles from '../styles.css.js';\nimport { ChartPlotRef } from '../../internal/components/chart-plot';\nimport { MixedLineBarChartProps } from '../interfaces';\nimport { isYThreshold } from '../utils';\n\nconst MAX_HOVER_MARGIN = 6;\n\nexport interface UseMouseHoverProps<T> {\n  plotRef: React.RefObject<ChartPlotRef>;\n  scaledSeries: ReadonlyArray<ScaledPoint<T>>;\n  barGroups: ScaledBarGroup<T>[];\n  highlightSeries: (series: MixedLineBarChartProps.ChartSeries<T> | null) => void;\n  highlightPoint: (point: ScaledPoint<T> | null) => void;\n  highlightGroup: (groupIndex: number) => void;\n  clearHighlightedSeries: () => void;\n  isGroupNavigation: boolean;\n  isHandlersDisabled: boolean;\n}\n\nexport function useMouseHover<T>({\n  plotRef,\n  scaledSeries,\n  barGroups,\n  highlightSeries,\n  highlightPoint,\n  highlightGroup,\n  clearHighlightedSeries,\n  isGroupNavigation,\n  isHandlersDisabled,\n}: UseMouseHoverProps<T>) {\n  const [verticalMarkerLeft, setVerticalMarkerLeft] = useState<number | null>(null);\n\n  const onSeriesMouseMove = (event: React.MouseEvent<SVGElement, MouseEvent>) => {\n    const svgRect = (event.target as SVGElement).getBoundingClientRect();\n    const offsetX = event.clientX - svgRect.left;\n    const offsetY = event.clientY - svgRect.top;\n\n    const closestX = scaledSeries\n      .map(v => v.x)\n      .reduce((prev, curr) => (Math.abs(curr - offsetX) < Math.abs(prev - offsetX) ? curr : prev), -Infinity);\n\n    const closestY = scaledSeries\n      .filter(v => v.x === closestX || isYThreshold(v.series))\n      .map(v => v.y)\n      .reduce((prev, curr) => (Math.abs(curr - offsetY) < Math.abs(prev - offsetY) ? curr : prev), -Infinity);\n\n    if (isFinite(closestX)) {\n      setVerticalMarkerLeft(closestX);\n      if (\n        isFinite(closestY) &&\n        Math.abs(offsetX - closestX) < MAX_HOVER_MARGIN &&\n        Math.abs(offsetY - closestY) < MAX_HOVER_MARGIN\n      ) {\n        const [{ color, datum, series }] = scaledSeries.filter(\n          s => (s.x === closestX || isYThreshold(s.series)) && s.y === closestY\n        );\n        highlightSeries(series);\n        highlightPoint({ x: closestX, y: closestY, color, datum, series });\n      } else {\n        highlightSeries(null);\n        highlightPoint(null);\n      }\n    }\n  };\n\n  const onGroupMouseMove = (event: React.MouseEvent<SVGElement, MouseEvent>) => {\n    const svgRect = (event.target as SVGElement).getBoundingClientRect();\n    const offsetX = event.clientX - svgRect.left;\n    const offsetY = event.clientY - svgRect.top;\n\n    // If hovering over some group - highlight it.\n    for (let groupIndex = 0; groupIndex < barGroups.length; groupIndex++) {\n      const {\n        position: { x, y, width, height },\n      } = barGroups[groupIndex];\n\n      if (x <= offsetX && offsetX <= x + width && y <= offsetY && offsetY <= y + height) {\n        highlightGroup(groupIndex);\n        return;\n      }\n    }\n    // Otherwise - clear the highlight.\n    clearHighlightedSeries();\n  };\n\n  const onSVGMouseMove = (event: React.MouseEvent<SVGElement, MouseEvent>) => {\n    if (event.target === plotRef.current!.svg && !isHandlersDisabled) {\n      if (isGroupNavigation) {\n        onGroupMouseMove(event);\n      } else if (scaledSeries.length > 0) {\n        onSeriesMouseMove(event);\n      }\n    }\n  };\n\n  const onSVGMouseOut = (event: React.MouseEvent<SVGElement, MouseEvent>) => {\n    if (isHandlersDisabled) {\n      return;\n    }\n    if (\n      !nodeContains(plotRef.current!.svg, event.relatedTarget as Element) ||\n      // `classList` is not supported on IE11 for SVG elements\n      ((event.relatedTarget && (event.relatedTarget as Element).getAttribute('class')) || '')\n        .split(' ')\n        .indexOf(styles.series) > -1\n    ) {\n      setVerticalMarkerLeft(null);\n      clearHighlightedSeries();\n    }\n  };\n\n  return { verticalMarkerLeft, onSVGMouseMove, onSVGMouseOut };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}