{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { InternalButton } from '../../button/internal';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\nimport { Transition } from '../../internal/components/transition';\nimport { findUpUntil } from '../../internal/utils/dom';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * The Navigation component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the show navigation form that contains the trigger for the drawer in large viewports;\n * the navigation, or drawer, that contains the hide navigation form and the children\n * passed through the API;\n */\nexport default function Navigation() {\n  var _a = useContext(AppLayoutContext),\n    ariaLabels = _a.ariaLabels,\n    handleNavigationClick = _a.handleNavigationClick,\n    isMobile = _a.isMobile,\n    isNavigationOpen = _a.isNavigationOpen,\n    navigation = _a.navigation,\n    navigationHide = _a.navigationHide,\n    navigationWidth = _a.navigationWidth,\n    isToolsOpen = _a.isToolsOpen,\n    isAnyPanelOpen = _a.isAnyPanelOpen,\n    toolsHide = _a.toolsHide;\n  var focusRefs = useFocusControl(isNavigationOpen).refs;\n  if (navigationHide) {\n    return null;\n  }\n  // Close the Navigation drawer on mobile when a user clicks a link inside.\n  var onNavigationClick = function (event) {\n    var hasLink = findUpUntil(event.target, function (node) {\n      return node.tagName === 'A' && !!node.href;\n    });\n    if (hasLink && isMobile) {\n      handleNavigationClick(false);\n    }\n  };\n  var isUnfocusable = isMobile && isAnyPanelOpen && isToolsOpen && !toolsHide;\n  return React.createElement(Transition, {\n    \"in\": isNavigationOpen\n  }, function (state, transitionEventsRef) {\n    var _a, _b, _c, _d;\n    var _e, _f, _g;\n    return React.createElement(\"div\", {\n      className: clsx(styles['navigation-container'], (_a = {}, _a[testutilStyles['drawer-closed']] = !isNavigationOpen, _a[styles.unfocusable] = isUnfocusable, _a)),\n      // Overwrite the default nav width (depends on breakpoints) only when the `navigationWidth` property is set.\n      style: __assign({}, navigationWidth && (_b = {}, _b[customCssProps.navigationWidth] = \"\".concat(navigationWidth, \"px\"), _b))\n    }, !isMobile && React.createElement(\"nav\", {\n      \"aria-hidden\": isMobile || isNavigationOpen ? true : false,\n      \"aria-label\": (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _e !== void 0 ? _e : undefined,\n      className: clsx(styles['show-navigation'], (_c = {}, _c[styles.animating] = state === 'exiting', _c[styles['is-navigation-open']] = isNavigationOpen, _c)),\n      ref: state === 'exiting' ? transitionEventsRef : undefined\n    }, React.createElement(TriggerButton, {\n      ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle,\n      iconName: \"menu\",\n      className: testutilStyles['navigation-toggle'],\n      onClick: function () {\n        return handleNavigationClick(true);\n      },\n      ref: focusRefs.toggle\n    })), React.createElement(\"nav\", {\n      \"aria-label\": (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _f !== void 0 ? _f : undefined,\n      className: clsx(styles.navigation, (_d = {}, _d[styles.animating] = state === 'entering', _d[styles['is-navigation-open']] = isNavigationOpen, _d), testutilStyles.navigation),\n      ref: state !== 'exiting' ? transitionEventsRef : undefined,\n      \"aria-hidden\": !isNavigationOpen,\n      onClick: function (event) {\n        onNavigationClick && onNavigationClick(event);\n      }\n    }, React.createElement(\"div\", {\n      className: clsx(styles['animated-content'])\n    }, React.createElement(\"div\", {\n      className: clsx(styles['hide-navigation'])\n    }, React.createElement(InternalButton, {\n      ariaLabel: (_g = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationClose) !== null && _g !== void 0 ? _g : undefined,\n      iconName: isMobile ? 'close' : 'angle-left',\n      onClick: function () {\n        return handleNavigationClick(false);\n      },\n      variant: \"icon\",\n      formAction: \"none\",\n      className: testutilStyles['navigation-close'],\n      ref: focusRefs.close,\n      ariaExpanded: true,\n      __nativeAttributes: {\n        'aria-haspopup': true\n      }\n    })), navigation)));\n  });\n}","map":{"version":3,"mappings":"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","names":["React","useContext","clsx","AppLayoutContext","InternalButton","TriggerButton","styles","testutilStyles","useFocusControl","Transition","findUpUntil","customCssProps","Navigation","ariaLabels","handleNavigationClick","isMobile","isNavigationOpen","navigation","navigationHide","navigationWidth","isToolsOpen","isAnyPanelOpen","toolsHide","focusRefs","onNavigationClick","event","hasLink","target","tagName","node","href","isUnfocusable","state","transitionEventsRef","className","_a","unfocusable","style","_b","undefined","_c","animating","ref","ariaLabel","navigationToggle","iconName","onClick","toggle","_d","navigationClose","variant","formAction","close","ariaExpanded","__nativeAttributes"],"sources":["/Users/dcastro/node_modules/src/app-layout/visual-refresh/navigation.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { InternalButton } from '../../button/internal';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\nimport { Transition } from '../../internal/components/transition';\nimport { findUpUntil } from '../../internal/utils/dom';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\n/**\n * The Navigation component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the show navigation form that contains the trigger for the drawer in large viewports;\n * the navigation, or drawer, that contains the hide navigation form and the children\n * passed through the API;\n */\nexport default function Navigation() {\n  const {\n    ariaLabels,\n    handleNavigationClick,\n    isMobile,\n    isNavigationOpen,\n    navigation,\n    navigationHide,\n    navigationWidth,\n    isToolsOpen,\n    isAnyPanelOpen,\n    toolsHide,\n  } = useContext(AppLayoutContext);\n\n  const { refs: focusRefs } = useFocusControl(isNavigationOpen);\n\n  if (navigationHide) {\n    return null;\n  }\n\n  // Close the Navigation drawer on mobile when a user clicks a link inside.\n  const onNavigationClick = (event: React.MouseEvent) => {\n    const hasLink = findUpUntil(\n      event.target as HTMLElement,\n      node => node.tagName === 'A' && !!(node as HTMLAnchorElement).href\n    );\n    if (hasLink && isMobile) {\n      handleNavigationClick(false);\n    }\n  };\n\n  const isUnfocusable = isMobile && isAnyPanelOpen && isToolsOpen && !toolsHide;\n\n  return (\n    <Transition in={isNavigationOpen}>\n      {(state, transitionEventsRef) => (\n        <div\n          className={clsx(styles['navigation-container'], {\n            [testutilStyles['drawer-closed']]: !isNavigationOpen,\n            [styles.unfocusable]: isUnfocusable,\n          })}\n          // Overwrite the default nav width (depends on breakpoints) only when the `navigationWidth` property is set.\n          style={{ ...(navigationWidth && { [customCssProps.navigationWidth]: `${navigationWidth}px` }) }}\n        >\n          {!isMobile && (\n            <nav\n              aria-hidden={isMobile || isNavigationOpen ? true : false}\n              aria-label={ariaLabels?.navigation ?? undefined}\n              className={clsx(styles['show-navigation'], {\n                [styles.animating]: state === 'exiting',\n                [styles['is-navigation-open']]: isNavigationOpen,\n              })}\n              ref={state === 'exiting' ? transitionEventsRef : undefined}\n            >\n              <TriggerButton\n                ariaLabel={ariaLabels?.navigationToggle}\n                iconName=\"menu\"\n                className={testutilStyles['navigation-toggle']}\n                onClick={() => handleNavigationClick(true)}\n                ref={focusRefs.toggle}\n              />\n            </nav>\n          )}\n\n          <nav\n            aria-label={ariaLabels?.navigation ?? undefined}\n            className={clsx(\n              styles.navigation,\n              {\n                [styles.animating]: state === 'entering',\n                [styles['is-navigation-open']]: isNavigationOpen,\n              },\n              testutilStyles.navigation\n            )}\n            ref={state !== 'exiting' ? transitionEventsRef : undefined}\n            aria-hidden={!isNavigationOpen}\n            onClick={event => {\n              onNavigationClick && onNavigationClick(event);\n            }}\n          >\n            <div className={clsx(styles['animated-content'])}>\n              <div className={clsx(styles['hide-navigation'])}>\n                <InternalButton\n                  ariaLabel={ariaLabels?.navigationClose ?? undefined}\n                  iconName={isMobile ? 'close' : 'angle-left'}\n                  onClick={() => handleNavigationClick(false)}\n                  variant=\"icon\"\n                  formAction=\"none\"\n                  className={testutilStyles['navigation-close']}\n                  ref={focusRefs.close}\n                  ariaExpanded={true}\n                  __nativeAttributes={{ 'aria-haspopup': true }}\n                />\n              </div>\n              {navigation}\n            </div>\n          </nav>\n        </div>\n      )}\n    </Transition>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}