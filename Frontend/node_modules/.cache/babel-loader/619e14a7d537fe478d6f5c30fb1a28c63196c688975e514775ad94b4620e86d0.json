{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { line } from 'd3-shape';\nimport { isXThreshold, isYThreshold } from './utils';\nexport default function LineSeries(_a) {\n  var _b;\n  var axis = _a.axis,\n    series = _a.series,\n    color = _a.color,\n    xScale = _a.xScale,\n    yScale = _a.yScale,\n    chartAreaClipPath = _a.chartAreaClipPath;\n  var commonProps = {\n    'aria-hidden': true,\n    stroke: color,\n    clipPath: \"url(#\".concat(chartAreaClipPath, \")\")\n  };\n  // Render data path. The chart orientation is ignored as only horizontally-oriented lines are supported.\n  if (series.type === 'line') {\n    var lineGenerator = line().x(function (d) {\n      var x = xScale.d3Scale(d.x) || 0;\n      if (xScale.isCategorical()) {\n        var offset = Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2;\n        x += offset;\n      }\n      return x;\n    }).y(function (d) {\n      return yScale.d3Scale(d.y) || 0;\n    });\n    // Filter out any data that is not part of the xScale\n    var visibleData = series.data.filter(function (_a) {\n      var x = _a.x;\n      return xScale.d3Scale(x) !== undefined;\n    });\n    return React.createElement(\"path\", __assign({}, commonProps, {\n      d: lineGenerator(visibleData) || ''\n    }));\n  }\n  // Render a horizontal line (vertical if chart orientation is inverted).\n  else if (isYThreshold(series)) {\n    var _c = xScale.d3Scale.range(),\n      x1 = _c[0],\n      x2 = _c[1];\n    var y = yScale.d3Scale(series.y);\n    var coordinates = axis === 'x' ? {\n      x1: x1,\n      x2: x2,\n      y1: y,\n      y2: y\n    } : {\n      x1: y,\n      x2: y,\n      y1: x1,\n      y2: x2\n    };\n    return React.createElement(\"line\", __assign({}, commonProps, coordinates));\n  }\n  // Render a vertical line (horizontal if chart orientation is inverted).\n  // The offset is necessary for categorical scale to render the line in the middle of the category bar.\n  else if (isXThreshold(series)) {\n    var _d = yScale.d3Scale.range(),\n      y1 = _d[0],\n      y2 = _d[1];\n    var xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;\n    var x = ((_b = xScale.d3Scale(series.x)) !== null && _b !== void 0 ? _b : NaN) + xOffset;\n    var coordinates = axis === 'x' ? {\n      x1: x,\n      x2: x,\n      y1: y1,\n      y2: y2\n    } : {\n      x1: y1,\n      x2: y2,\n      y1: x,\n      y2: x\n    };\n    return React.createElement(\"line\", __assign({}, commonProps, coordinates));\n  }\n  // Bar series are handled separately.\n  else {\n    return null;\n  }\n}","map":{"version":3,"mappings":"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","names":["React","line","isXThreshold","isYThreshold","LineSeries","_a","axis","series","color","xScale","yScale","chartAreaClipPath","commonProps","stroke","clipPath","type","lineGenerator","x","d","d3Scale","isCategorical","offset","Math","max","bandwidth","y","visibleData","data","filter","undefined","range","x1","x2","coordinates","y1","y2","xOffset","NaN"],"sources":["/Users/dcastro/node_modules/src/mixed-line-bar-chart/line-series.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { line } from 'd3-shape';\n\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport { MixedLineBarChartProps } from './interfaces';\nimport { isXThreshold, isYThreshold } from './utils';\n\nexport interface LineSeriesProps<T> {\n  axis: 'x' | 'y';\n  series: MixedLineBarChartProps.LineDataSeries<T> | MixedLineBarChartProps.ThresholdSeries<T>;\n\n  color: string;\n  chartAreaClipPath: string;\n\n  xScale: ChartScale;\n  yScale: NumericChartScale;\n}\n\nexport default function LineSeries<T>({ axis, series, color, xScale, yScale, chartAreaClipPath }: LineSeriesProps<T>) {\n  const commonProps = { 'aria-hidden': true, stroke: color, clipPath: `url(#${chartAreaClipPath})` };\n\n  // Render data path. The chart orientation is ignored as only horizontally-oriented lines are supported.\n  if (series.type === 'line') {\n    const lineGenerator = line<MixedLineBarChartProps.Datum<T>>()\n      .x((d: MixedLineBarChartProps.Datum<T>) => {\n        let x = xScale.d3Scale(d.x as any) || 0;\n        if (xScale.isCategorical()) {\n          const offset = Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2;\n          x += offset;\n        }\n        return x;\n      })\n      .y((d: MixedLineBarChartProps.Datum<T>) => yScale.d3Scale(d.y) || 0);\n\n    // Filter out any data that is not part of the xScale\n    const visibleData = series.data.filter(({ x }) => xScale.d3Scale(x as any) !== undefined);\n\n    return (\n      <path\n        {...commonProps}\n        d={lineGenerator(visibleData as unknown as Array<MixedLineBarChartProps.Datum<T>>) || ''}\n      />\n    );\n  }\n  // Render a horizontal line (vertical if chart orientation is inverted).\n  else if (isYThreshold(series)) {\n    const [x1, x2] = xScale.d3Scale.range();\n    const y = yScale.d3Scale(series.y);\n    const coordinates = axis === 'x' ? { x1, x2, y1: y, y2: y } : { x1: y, x2: y, y1: x1, y2: x2 };\n    return <line {...commonProps} {...coordinates} />;\n  }\n  // Render a vertical line (horizontal if chart orientation is inverted).\n  // The offset is necessary for categorical scale to render the line in the middle of the category bar.\n  else if (isXThreshold(series)) {\n    const [y1, y2] = yScale.d3Scale.range();\n    const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;\n    const x = (xScale.d3Scale(series.x as any) ?? NaN) + xOffset;\n    const coordinates = axis === 'x' ? { x1: x, x2: x, y1, y2 } : { x1: y1, x2: y2, y1: x, y2: x };\n    return <line {...commonProps} {...coordinates} />;\n  }\n  // Bar series are handled separately.\n  else {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}