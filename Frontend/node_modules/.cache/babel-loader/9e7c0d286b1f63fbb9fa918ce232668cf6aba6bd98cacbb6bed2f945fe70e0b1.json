{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useRef } from 'react';\nimport styles from '../styles.css.js';\nimport { KeyCode } from '../../internal/keycode';\nimport { isSameDay, isSameMonth } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport { getDateLabel, renderDayName } from '../utils/intl';\nimport useFocusVisible from '../../internal/hooks/focus-visible/index.js';\nimport clsx from 'clsx';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update.js';\nimport ScreenreaderOnly from '../../internal/components/screenreader-only/index.js';\nimport { moveNextDay, movePrevDay, moveNextWeek, movePrevWeek } from '../utils/navigation';\nexport default function Grid(_a) {\n  var locale = _a.locale,\n    baseDate = _a.baseDate,\n    isDateEnabled = _a.isDateEnabled,\n    focusedDate = _a.focusedDate,\n    focusableDate = _a.focusableDate,\n    onSelectDate = _a.onSelectDate,\n    onFocusDate = _a.onFocusDate,\n    onChangeMonth = _a.onChangeMonth,\n    startOfWeek = _a.startOfWeek,\n    todayAriaLabel = _a.todayAriaLabel,\n    selectedDate = _a.selectedDate;\n  var focusedDateRef = useRef(null);\n  var onGridKeyDownHandler = function (event) {\n    var updatedFocusDate;\n    if (focusableDate === null) {\n      return;\n    }\n    switch (event.keyCode) {\n      case KeyCode.space:\n      case KeyCode.enter:\n        event.preventDefault();\n        if (focusableDate) {\n          onFocusDate(null);\n          onSelectDate(focusableDate);\n        }\n        return;\n      case KeyCode.right:\n        event.preventDefault();\n        updatedFocusDate = moveNextDay(focusableDate, isDateEnabled);\n        break;\n      case KeyCode.left:\n        event.preventDefault();\n        updatedFocusDate = movePrevDay(focusableDate, isDateEnabled);\n        break;\n      case KeyCode.up:\n        event.preventDefault();\n        updatedFocusDate = movePrevWeek(focusableDate, isDateEnabled);\n        break;\n      case KeyCode.down:\n        event.preventDefault();\n        updatedFocusDate = moveNextWeek(focusableDate, isDateEnabled);\n        break;\n      default:\n        return;\n    }\n    if (!isSameMonth(updatedFocusDate, baseDate)) {\n      onChangeMonth(updatedFocusDate);\n    }\n    onFocusDate(updatedFocusDate);\n  };\n  // The focused date changes as a feedback to keyboard navigation in the grid.\n  // Once changed, the corresponding day button needs to receive the actual focus.\n  useEffectOnUpdate(function () {\n    if (focusedDate && focusedDateRef.current) {\n      focusedDateRef.current.focus();\n    }\n  }, [focusedDate]);\n  var weeks = useMemo(function () {\n    return getCalendarMonth(baseDate, {\n      firstDayOfWeek: startOfWeek\n    });\n  }, [baseDate, startOfWeek]);\n  var weekdays = weeks[0].map(function (date) {\n    return date.getDay();\n  });\n  var focusVisible = useFocusVisible();\n  return React.createElement(\"table\", {\n    role: \"grid\",\n    className: styles['calendar-grid']\n  }, React.createElement(\"thead\", null, React.createElement(\"tr\", null, weekdays.map(function (dayIndex) {\n    return React.createElement(\"th\", {\n      key: dayIndex,\n      scope: \"col\",\n      className: clsx(styles['calendar-grid-cell'], styles['calendar-day-header'])\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, renderDayName(locale, dayIndex, 'short')), React.createElement(ScreenreaderOnly, null, renderDayName(locale, dayIndex, 'long')));\n  }))), React.createElement(\"tbody\", {\n    onKeyDown: onGridKeyDownHandler\n  }, weeks.map(function (week, weekIndex) {\n    return React.createElement(\"tr\", {\n      key: weekIndex,\n      className: styles['calendar-week']\n    }, week.map(function (date, dateIndex) {\n      var _a;\n      var isFocusable = !!focusableDate && isSameDay(date, focusableDate);\n      var isSelected = !!selectedDate && isSameDay(date, selectedDate);\n      var isEnabled = !isDateEnabled || isDateEnabled(date);\n      var isDateOnSameDay = isSameDay(date, new Date());\n      // Can't be focused.\n      var tabIndex = undefined;\n      if (isFocusable && isEnabled) {\n        // Next focus target.\n        tabIndex = 0;\n      } else if (isEnabled) {\n        // Can be focused programmatically.\n        tabIndex = -1;\n      }\n      // Screen-reader announcement for the focused day.\n      var dayAnnouncement = getDateLabel(locale, date, 'short');\n      if (isDateOnSameDay) {\n        dayAnnouncement += '. ' + todayAriaLabel;\n      }\n      return React.createElement(\"td\", __assign({\n        key: \"\".concat(weekIndex, \":\").concat(dateIndex),\n        ref: tabIndex === 0 ? focusedDateRef : undefined,\n        tabIndex: tabIndex,\n        \"aria-current\": isDateOnSameDay ? 'date' : undefined,\n        \"aria-selected\": isEnabled ? isSelected : undefined,\n        \"aria-disabled\": !isEnabled,\n        // Do not attach click event when the date is disabled, otherwise VO+safari announces clickable\n        onClick: isEnabled ? function () {\n          return onSelectDate(date);\n        } : undefined,\n        className: clsx(styles['calendar-grid-cell'], styles['calendar-day'], (_a = {}, _a[styles['calendar-day-current-month']] = isSameMonth(date, baseDate), _a[styles['calendar-day-enabled']] = isEnabled, _a[styles['calendar-day-selected']] = isSelected, _a[styles['calendar-day-today']] = isDateOnSameDay, _a))\n      }, focusVisible), React.createElement(\"span\", {\n        className: styles['day-inner'],\n        \"aria-hidden\": \"true\"\n      }, date.getDate()), React.createElement(ScreenreaderOnly, null, dayAnnouncement));\n    }));\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","useMemo","useRef","styles","KeyCode","isSameDay","isSameMonth","getCalendarMonth","getDateLabel","renderDayName","useFocusVisible","clsx","useEffectOnUpdate","ScreenreaderOnly","moveNextDay","movePrevDay","moveNextWeek","movePrevWeek","Grid","_a","locale","baseDate","isDateEnabled","focusedDate","focusableDate","onSelectDate","onFocusDate","onChangeMonth","startOfWeek","todayAriaLabel","selectedDate","focusedDateRef","onGridKeyDownHandler","event","updatedFocusDate","keyCode","space","enter","preventDefault","right","left","up","down","current","focus","weeks","firstDayOfWeek","weekdays","map","getDay","focusVisible","role","className","key","dayIndex","scope","onKeyDown","week","weekIndex","date","dateIndex","isFocusable","isSelected","isEnabled","isDateOnSameDay","Date","tabIndex","undefined","dayAnnouncement","ref","onClick","getDate"],"sources":["/Users/dcastro/node_modules/src/calendar/grid/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useRef } from 'react';\nimport styles from '../styles.css.js';\nimport { KeyCode } from '../../internal/keycode';\nimport { isSameDay, isSameMonth } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport { DayIndex } from '../internal';\nimport { DatePickerProps } from '../../date-picker/interfaces';\nimport { getDateLabel, renderDayName } from '../utils/intl';\nimport useFocusVisible from '../../internal/hooks/focus-visible/index.js';\nimport clsx from 'clsx';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update.js';\nimport ScreenreaderOnly from '../../internal/components/screenreader-only/index.js';\nimport { moveNextDay, movePrevDay, moveNextWeek, movePrevWeek } from '../utils/navigation';\n\n/**\n * Calendar grid supports two mechanisms of keyboard navigation:\n * - Native screen-reader table navigation (semantic table markup);\n * - Keyboard arrow-keys navigation (a custom key-down handler).\n *\n * The implementation largely follows the w3 example (https://www.w3.org/WAI/ARIA/apg/example-index/dialog-modal/datepicker-dialog) and shares the following issues:\n * - (table navigation) Chrome+VO - weekday is announced twice when navigating to the calendar's header;\n * - (table navigation) Safari+VO - \"dimmed\" state is announced twice;\n * - (table navigation) Firefox/Chrome+NVDA - cannot use table navigation if any cell has a focus;\n * - (keyboard navigation) Firefox+NVDA - every day is announced as \"not selected\";\n * - (keyboard navigation) Safari/Chrome+VO - weekdays are not announced;\n * - (keyboard navigation) Safari/Chrome+VO - days are not announced as interactive (clickable or selectable);\n * - (keyboard navigation) Safari/Chrome+VO - day announcements are not interruptive and can be missed if navigating fast.\n */\n\nexport interface GridProps {\n  locale: string;\n  baseDate: Date;\n  isDateEnabled: DatePickerProps.IsDateEnabledFunction;\n  focusedDate: Date | null;\n  focusableDate: Date | null;\n  onSelectDate: (date: Date) => void;\n  onFocusDate: (date: null | Date) => void;\n  onChangeMonth: (date: Date) => void;\n  startOfWeek: DayIndex;\n  todayAriaLabel: string;\n  selectedDate: Date | null;\n}\n\nexport default function Grid({\n  locale,\n  baseDate,\n  isDateEnabled,\n  focusedDate,\n  focusableDate,\n  onSelectDate,\n  onFocusDate,\n  onChangeMonth,\n  startOfWeek,\n  todayAriaLabel,\n  selectedDate,\n}: GridProps) {\n  const focusedDateRef = useRef<HTMLTableCellElement>(null);\n\n  const onGridKeyDownHandler = (event: React.KeyboardEvent) => {\n    let updatedFocusDate;\n\n    if (focusableDate === null) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case KeyCode.space:\n      case KeyCode.enter:\n        event.preventDefault();\n        if (focusableDate) {\n          onFocusDate(null);\n          onSelectDate(focusableDate);\n        }\n        return;\n      case KeyCode.right:\n        event.preventDefault();\n        updatedFocusDate = moveNextDay(focusableDate, isDateEnabled);\n        break;\n      case KeyCode.left:\n        event.preventDefault();\n        updatedFocusDate = movePrevDay(focusableDate, isDateEnabled);\n        break;\n      case KeyCode.up:\n        event.preventDefault();\n        updatedFocusDate = movePrevWeek(focusableDate, isDateEnabled);\n        break;\n      case KeyCode.down:\n        event.preventDefault();\n        updatedFocusDate = moveNextWeek(focusableDate, isDateEnabled);\n        break;\n      default:\n        return;\n    }\n\n    if (!isSameMonth(updatedFocusDate, baseDate)) {\n      onChangeMonth(updatedFocusDate);\n    }\n    onFocusDate(updatedFocusDate);\n  };\n\n  // The focused date changes as a feedback to keyboard navigation in the grid.\n  // Once changed, the corresponding day button needs to receive the actual focus.\n  useEffectOnUpdate(() => {\n    if (focusedDate && focusedDateRef.current) {\n      (focusedDateRef.current as HTMLDivElement).focus();\n    }\n  }, [focusedDate]);\n\n  const weeks = useMemo<Date[][]>(\n    () => getCalendarMonth(baseDate, { firstDayOfWeek: startOfWeek }),\n    [baseDate, startOfWeek]\n  );\n  const weekdays = weeks[0].map(date => date.getDay());\n\n  const focusVisible = useFocusVisible();\n\n  return (\n    <table role=\"grid\" className={styles['calendar-grid']}>\n      <thead>\n        <tr>\n          {weekdays.map(dayIndex => (\n            <th\n              key={dayIndex}\n              scope=\"col\"\n              className={clsx(styles['calendar-grid-cell'], styles['calendar-day-header'])}\n            >\n              <span aria-hidden=\"true\">{renderDayName(locale, dayIndex, 'short')}</span>\n              <ScreenreaderOnly>{renderDayName(locale, dayIndex, 'long')}</ScreenreaderOnly>\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody onKeyDown={onGridKeyDownHandler}>\n        {weeks.map((week, weekIndex) => (\n          <tr key={weekIndex} className={styles['calendar-week']}>\n            {week.map((date, dateIndex) => {\n              const isFocusable = !!focusableDate && isSameDay(date, focusableDate);\n              const isSelected = !!selectedDate && isSameDay(date, selectedDate);\n              const isEnabled = !isDateEnabled || isDateEnabled(date);\n              const isDateOnSameDay = isSameDay(date, new Date());\n\n              // Can't be focused.\n              let tabIndex = undefined;\n              if (isFocusable && isEnabled) {\n                // Next focus target.\n                tabIndex = 0;\n              } else if (isEnabled) {\n                // Can be focused programmatically.\n                tabIndex = -1;\n              }\n\n              // Screen-reader announcement for the focused day.\n              let dayAnnouncement = getDateLabel(locale, date, 'short');\n              if (isDateOnSameDay) {\n                dayAnnouncement += '. ' + todayAriaLabel;\n              }\n\n              return (\n                <td\n                  key={`${weekIndex}:${dateIndex}`}\n                  ref={tabIndex === 0 ? focusedDateRef : undefined}\n                  tabIndex={tabIndex}\n                  aria-current={isDateOnSameDay ? 'date' : undefined}\n                  aria-selected={isEnabled ? isSelected : undefined}\n                  aria-disabled={!isEnabled}\n                  // Do not attach click event when the date is disabled, otherwise VO+safari announces clickable\n                  onClick={isEnabled ? () => onSelectDate(date) : undefined}\n                  className={clsx(styles['calendar-grid-cell'], styles['calendar-day'], {\n                    [styles['calendar-day-current-month']]: isSameMonth(date, baseDate),\n                    [styles['calendar-day-enabled']]: isEnabled,\n                    [styles['calendar-day-selected']]: isSelected,\n                    [styles['calendar-day-today']]: isDateOnSameDay,\n                  })}\n                  {...focusVisible}\n                >\n                  <span className={styles['day-inner']} aria-hidden=\"true\">\n                    {date.getDate()}\n                  </span>\n                  <ScreenreaderOnly>{dayAnnouncement}</ScreenreaderOnly>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}