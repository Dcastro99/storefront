{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport FocusLock from 'react-focus-lock';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { KeyCode } from '../internal/keycode';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { InternalButton } from '../button/internal';\nimport InternalHeader from '../header/internal';\nimport Portal from '../internal/components/portal';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { disableBodyScrolling, enableBodyScrolling } from './body-scroll';\nimport styles from './styles.css.js';\nimport { getFirstFocusable } from '../internal/components/focus-lock/utils';\nexport default function InternalModal(_a) {\n  var _b, _c;\n  var size = _a.size,\n    visible = _a.visible,\n    closeAriaLabel = _a.closeAriaLabel,\n    header = _a.header,\n    children = _a.children,\n    footer = _a.footer,\n    disableContentPaddings = _a.disableContentPaddings,\n    onDismiss = _a.onDismiss,\n    modalRoot = _a.modalRoot,\n    _d = _a.__internalRootRef,\n    __internalRootRef = _d === void 0 ? null : _d,\n    rest = __rest(_a, [\"size\", \"visible\", \"closeAriaLabel\", \"header\", \"children\", \"footer\", \"disableContentPaddings\", \"onDismiss\", \"modalRoot\", \"__internalRootRef\"]);\n  var instanceUniqueId = useUniqueId();\n  var headerId = \"\".concat(rest.id || instanceUniqueId, \"-header\");\n  var focusLockRef = useRef(null);\n  var lastMouseDownElementRef = useRef(null);\n  var _e = useContainerBreakpoints(['xs']),\n    breakpoint = _e[0],\n    breakpointsRef = _e[1];\n  var refObject = useRef(null);\n  var mergedRef = useMergeRefs(breakpointsRef, refObject, __internalRootRef);\n  var isRefresh = useVisualRefresh();\n  var baseProps = getBaseProps(rest);\n  // enable body scroll and restore focus if unmounting while visible\n  useEffect(function () {\n    return function () {\n      enableBodyScrolling();\n    };\n  }, []);\n  // enable / disable body scroll\n  useEffect(function () {\n    if (visible) {\n      disableBodyScrolling();\n    } else {\n      enableBodyScrolling();\n    }\n  }, [visible]);\n  // Because we hide the element with styles (and not actually detach it from DOM), we need to scroll to top\n  useEffect(function () {\n    if (visible && refObject.current) {\n      refObject.current.scrollTop = 0;\n    }\n  }, [visible]);\n  // Imitate autoFocus=true when the modal opens but not when a focused element inside modal gets removed.\n  var onFocusActivation = function () {\n    var _a;\n    focusLockRef.current && ((_a = getFirstFocusable(focusLockRef.current)) === null || _a === void 0 ? void 0 : _a.focus());\n  };\n  var dismiss = function (reason) {\n    return fireNonCancelableEvent(onDismiss, {\n      reason: reason\n    });\n  };\n  var onOverlayMouseDown = function (event) {\n    lastMouseDownElementRef.current = event.target;\n  };\n  var onOverlayClick = function (event) {\n    var overlay = refObject.current;\n    var lastClicked = lastMouseDownElementRef.current;\n    if (event.target === overlay && lastClicked === overlay) {\n      dismiss('overlay');\n    }\n  };\n  var onCloseButtonClick = function () {\n    return dismiss('closeButton');\n  };\n  var escKeyHandler = function (event) {\n    if (event.keyCode === KeyCode.escape) {\n      dismiss('keyboard');\n    }\n  };\n  return React.createElement(Portal, {\n    container: modalRoot\n  }, React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(styles.root, (_b = {}, _b[styles.hidden] = !visible, _b), baseProps.className, isRefresh && styles.refresh),\n    role: \"dialog\",\n    \"aria-modal\": true,\n    \"aria-labelledby\": headerId,\n    onMouseDown: onOverlayMouseDown,\n    onClick: onOverlayClick,\n    ref: mergedRef\n  }), React.createElement(FocusLock, {\n    disabled: !visible,\n    autoFocus: false,\n    returnFocus: true,\n    className: styles['focus-lock'],\n    ref: focusLockRef,\n    onActivation: onFocusActivation\n  }, React.createElement(\"div\", {\n    className: clsx(styles.dialog, styles[size], styles[\"breakpoint-\".concat(breakpoint)], isRefresh && styles.refresh),\n    onKeyDown: escKeyHandler,\n    tabIndex: -1\n  }, React.createElement(\"div\", {\n    className: styles.container\n  }, React.createElement(\"div\", {\n    className: styles.header\n  }, React.createElement(InternalHeader, {\n    variant: \"h2\",\n    __disableActionsWrapping: true,\n    actions: React.createElement(InternalButton, {\n      ariaLabel: closeAriaLabel,\n      className: styles['dismiss-control'],\n      variant: \"modal-dismiss\",\n      iconName: \"close\",\n      formAction: \"none\",\n      onClick: onCloseButtonClick\n    })\n  }, React.createElement(\"span\", {\n    id: headerId,\n    className: styles['header--text']\n  }, header))), React.createElement(\"div\", {\n    className: clsx(styles.content, (_c = {}, _c[styles['no-paddings']] = disableContentPaddings, _c))\n  }, children), footer && React.createElement(\"div\", {\n    className: styles.footer\n  }, footer))))));\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","FocusLock","useMergeRefs","clsx","getBaseProps","fireNonCancelableEvent","KeyCode","useUniqueId","InternalButton","InternalHeader","Portal","useContainerBreakpoints","useVisualRefresh","disableBodyScrolling","enableBodyScrolling","styles","getFirstFocusable","InternalModal","_a","visible","closeAriaLabel","header","children","footer","disableContentPaddings","onDismiss","modalRoot","_d","__internalRootRef","rest","instanceUniqueId","headerId","id","focusLockRef","lastMouseDownElementRef","breakpoint","breakpointsRef","refObject","mergedRef","isRefresh","baseProps","current","scrollTop","onFocusActivation","focus","dismiss","reason","onOverlayMouseDown","event","target","onOverlayClick","overlay","lastClicked","onCloseButtonClick","escKeyHandler","keyCode","escape","container","className","root","_b","hidden","refresh","role","onMouseDown","onClick","ref","disabled","autoFocus","returnFocus","onActivation","dialog","size","onKeyDown","tabIndex","variant","__disableActionsWrapping","actions","ariaLabel","iconName","formAction","content","_c"],"sources":["/Users/dcastro/node_modules/src/modal/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport FocusLock from 'react-focus-lock';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport clsx from 'clsx';\n\nimport { getBaseProps } from '../internal/base-component';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { KeyCode } from '../internal/keycode';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { InternalButton } from '../button/internal';\nimport InternalHeader from '../header/internal';\nimport Portal from '../internal/components/portal';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\n\nimport { disableBodyScrolling, enableBodyScrolling } from './body-scroll';\nimport { ModalProps } from './interfaces';\nimport styles from './styles.css.js';\nimport { SomeRequired } from '../internal/types';\nimport { getFirstFocusable } from '../internal/components/focus-lock/utils';\n\ntype InternalModalProps = SomeRequired<ModalProps, 'size' | 'closeAriaLabel'> & InternalBaseComponentProps;\n\nexport default function InternalModal({\n  size,\n  visible,\n  closeAriaLabel,\n  header,\n  children,\n  footer,\n  disableContentPaddings,\n  onDismiss,\n  modalRoot,\n  __internalRootRef = null,\n  ...rest\n}: InternalModalProps) {\n  const instanceUniqueId = useUniqueId();\n  const headerId = `${rest.id || instanceUniqueId}-header`;\n  const focusLockRef = useRef<HTMLDivElement>(null);\n  const lastMouseDownElementRef = useRef<HTMLElement | null>(null);\n  const [breakpoint, breakpointsRef] = useContainerBreakpoints(['xs']);\n\n  const refObject = useRef<HTMLDivElement>(null);\n  const mergedRef = useMergeRefs(breakpointsRef, refObject, __internalRootRef);\n\n  const isRefresh = useVisualRefresh();\n\n  const baseProps = getBaseProps(rest);\n\n  // enable body scroll and restore focus if unmounting while visible\n  useEffect(() => {\n    return () => {\n      enableBodyScrolling();\n    };\n  }, []);\n\n  // enable / disable body scroll\n  useEffect(() => {\n    if (visible) {\n      disableBodyScrolling();\n    } else {\n      enableBodyScrolling();\n    }\n  }, [visible]);\n\n  // Because we hide the element with styles (and not actually detach it from DOM), we need to scroll to top\n  useEffect(() => {\n    if (visible && refObject.current) {\n      refObject.current.scrollTop = 0;\n    }\n  }, [visible]);\n\n  // Imitate autoFocus=true when the modal opens but not when a focused element inside modal gets removed.\n  const onFocusActivation = () => {\n    focusLockRef.current && getFirstFocusable(focusLockRef.current)?.focus();\n  };\n\n  const dismiss = (reason: string) => fireNonCancelableEvent(onDismiss, { reason });\n\n  const onOverlayMouseDown = (event: React.MouseEvent) => {\n    lastMouseDownElementRef.current = event.target as HTMLElement;\n  };\n  const onOverlayClick = (event: React.MouseEvent) => {\n    const overlay = refObject.current;\n    const lastClicked = lastMouseDownElementRef.current;\n\n    if (event.target === overlay && lastClicked === overlay) {\n      dismiss('overlay');\n    }\n  };\n  const onCloseButtonClick = () => dismiss('closeButton');\n  const escKeyHandler = (event: React.KeyboardEvent) => {\n    if (event.keyCode === KeyCode.escape) {\n      dismiss('keyboard');\n    }\n  };\n\n  return (\n    <Portal container={modalRoot}>\n      <div\n        {...baseProps}\n        className={clsx(styles.root, { [styles.hidden]: !visible }, baseProps.className, isRefresh && styles.refresh)}\n        role=\"dialog\"\n        aria-modal={true}\n        aria-labelledby={headerId}\n        onMouseDown={onOverlayMouseDown}\n        onClick={onOverlayClick}\n        ref={mergedRef}\n      >\n        <FocusLock\n          disabled={!visible}\n          autoFocus={false}\n          returnFocus={true}\n          className={styles['focus-lock']}\n          ref={focusLockRef}\n          onActivation={onFocusActivation}\n        >\n          <div\n            className={clsx(\n              styles.dialog,\n              styles[size],\n              styles[`breakpoint-${breakpoint}`],\n              isRefresh && styles.refresh\n            )}\n            onKeyDown={escKeyHandler}\n            tabIndex={-1}\n          >\n            <div className={styles.container}>\n              <div className={styles.header}>\n                <InternalHeader\n                  variant=\"h2\"\n                  __disableActionsWrapping={true}\n                  actions={\n                    <InternalButton\n                      ariaLabel={closeAriaLabel}\n                      className={styles['dismiss-control']}\n                      variant=\"modal-dismiss\"\n                      iconName=\"close\"\n                      formAction=\"none\"\n                      onClick={onCloseButtonClick}\n                    />\n                  }\n                >\n                  <span id={headerId} className={styles['header--text']}>\n                    {header}\n                  </span>\n                </InternalHeader>\n              </div>\n              <div className={clsx(styles.content, { [styles['no-paddings']]: disableContentPaddings })}>\n                {children}\n              </div>\n              {footer && <div className={styles.footer}>{footer}</div>}\n            </div>\n          </div>\n        </FocusLock>\n      </div>\n    </Portal>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}