{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React from 'react';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport InternalIcon from '../icon/internal';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nexport var ExpandableSectionHeader = function (_a) {\n  var id = _a.id,\n    className = _a.className,\n    variant = _a.variant,\n    children = _a.children,\n    expanded = _a.expanded,\n    ariaControls = _a.ariaControls,\n    ariaLabel = _a.ariaLabel,\n    ariaLabelledBy = _a.ariaLabelledBy,\n    onKeyUp = _a.onKeyUp,\n    onKeyDown = _a.onKeyDown,\n    onClick = _a.onClick;\n  var focusVisible = useFocusVisible();\n  var icon = React.createElement(InternalIcon, {\n    size: variant === 'container' ? 'medium' : 'normal',\n    className: clsx(styles.icon, expanded && styles.expanded),\n    name: \"caret-down-filled\"\n  });\n  var ariaAttributes = {\n    'aria-controls': ariaControls,\n    'aria-expanded': expanded\n  };\n  var triggerClassName = clsx(styles.trigger, styles[\"trigger-\".concat(variant)], expanded && styles['trigger-expanded']);\n  if (variant === 'navigation') {\n    return React.createElement(\"div\", {\n      id: id,\n      className: clsx(className, triggerClassName),\n      onClick: onClick\n    }, React.createElement(\"button\", __assign({\n      className: styles['icon-container'],\n      type: \"button\",\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel\n    }, focusVisible, ariaAttributes), icon), children);\n  }\n  return React.createElement(\"div\", __assign({\n    id: id,\n    role: \"button\",\n    className: clsx(className, triggerClassName, styles.focusable, expanded && styles.expanded),\n    tabIndex: 0,\n    onKeyUp: onKeyUp,\n    onKeyDown: onKeyDown,\n    onClick: onClick,\n    \"aria-label\": ariaLabel\n  }, focusVisible, ariaAttributes), React.createElement(\"div\", {\n    className: styles['icon-container']\n  }, icon), children);\n};","map":{"version":3,"mappings":";AAGA,OAAOA,KAA6D,MAAM,OAAO;AACjF,OAAOC,eAAe,MAAM,iCAAiC;AAC7D,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,iBAAiB;AAgBpC,OAAO,IAAMC,uBAAuB,GAAG,UAACC,EAYT;MAX7BC,EAAE;IACFC,SAAS;IACTC,OAAO;IACPC,QAAQ;IACRC,QAAQ;IACRC,YAAY;IACZC,SAAS;IACTC,cAAc;IACdC,OAAO;IACPC,SAAS;IACTC,OAAO;EAEP,IAAMC,YAAY,GAAGjB,eAAe,EAAE;EAEtC,IAAMkB,IAAI,GACRnB,oBAACE,YAAY;IACXkB,IAAI,EAAEX,OAAO,KAAK,WAAW,GAAG,QAAQ,GAAG,QAAQ;IACnDD,SAAS,EAAEL,IAAI,CAACC,MAAM,CAACe,IAAI,EAAER,QAAQ,IAAIP,MAAM,CAACO,QAAQ,CAAC;IACzDU,IAAI,EAAC;EAAmB,EAE3B;EACD,IAAMC,cAAc,GAAG;IACrB,eAAe,EAAEV,YAAY;IAC7B,eAAe,EAAED;GAClB;EAED,IAAMY,gBAAgB,GAAGpB,IAAI,CAACC,MAAM,CAACoB,OAAO,EAAEpB,MAAM,CAAC,kBAAWK,OAAO,CAAE,CAAC,EAAEE,QAAQ,IAAIP,MAAM,CAAC,kBAAkB,CAAC,CAAC;EACnH,IAAIK,OAAO,KAAK,YAAY,EAAE;IAC5B,OACET;MAAKO,EAAE,EAAEA,EAAE;MAAEC,SAAS,EAAEL,IAAI,CAACK,SAAS,EAAEe,gBAAgB,CAAC;MAAEN,OAAO,EAAEA;IAAO,GACzEjB;MACEQ,SAAS,EAAEJ,MAAM,CAAC,gBAAgB,CAAC;MACnCqB,IAAI,EAAC,QAAQ;MAAA,mBACIX,cAAc;MAAA,cACnBD;IAAS,GACjBK,YAAY,EACZI,cAAc,GAEjBH,IAAI,CACE,EACRT,QAAQ,CACL;;EAIV,OACEV;IACEO,EAAE,EAAEA,EAAE;IACNmB,IAAI,EAAC,QAAQ;IACblB,SAAS,EAAEL,IAAI,CAACK,SAAS,EAAEe,gBAAgB,EAAEnB,MAAM,CAACuB,SAAS,EAAEhB,QAAQ,IAAIP,MAAM,CAACO,QAAQ,CAAC;IAC3FiB,QAAQ,EAAE,CAAC;IACXb,OAAO,EAAEA,OAAO;IAChBC,SAAS,EAAEA,SAAS;IACpBC,OAAO,EAAEA,OAAO;IAAA,cACJJ;EAAS,GACjBK,YAAY,EACZI,cAAc,GAElBtB;IAAKQ,SAAS,EAAEJ,MAAM,CAAC,gBAAgB;EAAC,GAAGe,IAAI,CAAO,EACrDT,QAAQ,CACL;AAEV,CAAC","names":["React","useFocusVisible","InternalIcon","clsx","styles","ExpandableSectionHeader","_a","id","className","variant","children","expanded","ariaControls","ariaLabel","ariaLabelledBy","onKeyUp","onKeyDown","onClick","focusVisible","icon","size","name","ariaAttributes","triggerClassName","trigger","type","role","focusable","tabIndex"],"sources":["/Users/dcastro/node_modules/src/expandable-section/expandable-section-header.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ExpandableSectionProps } from './interfaces';\nimport React, { KeyboardEventHandler, MouseEventHandler, ReactNode } from 'react';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport InternalIcon from '../icon/internal';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\n\ninterface ExpandableSectionHeaderProps {\n  id: string;\n  className?: string;\n  variant: ExpandableSectionProps.Variant;\n  children?: ReactNode;\n  expanded: boolean;\n  ariaControls: string;\n  ariaLabelledBy?: string;\n  ariaLabel?: string;\n  onKeyUp: KeyboardEventHandler;\n  onKeyDown: KeyboardEventHandler;\n  onClick: MouseEventHandler;\n}\n\nexport const ExpandableSectionHeader = ({\n  id,\n  className,\n  variant,\n  children,\n  expanded,\n  ariaControls,\n  ariaLabel,\n  ariaLabelledBy,\n  onKeyUp,\n  onKeyDown,\n  onClick,\n}: ExpandableSectionHeaderProps) => {\n  const focusVisible = useFocusVisible();\n\n  const icon = (\n    <InternalIcon\n      size={variant === 'container' ? 'medium' : 'normal'}\n      className={clsx(styles.icon, expanded && styles.expanded)}\n      name=\"caret-down-filled\"\n    />\n  );\n  const ariaAttributes = {\n    'aria-controls': ariaControls,\n    'aria-expanded': expanded,\n  };\n\n  const triggerClassName = clsx(styles.trigger, styles[`trigger-${variant}`], expanded && styles['trigger-expanded']);\n  if (variant === 'navigation') {\n    return (\n      <div id={id} className={clsx(className, triggerClassName)} onClick={onClick}>\n        <button\n          className={styles['icon-container']}\n          type=\"button\"\n          aria-labelledby={ariaLabelledBy}\n          aria-label={ariaLabel}\n          {...focusVisible}\n          {...ariaAttributes}\n        >\n          {icon}\n        </button>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id={id}\n      role=\"button\"\n      className={clsx(className, triggerClassName, styles.focusable, expanded && styles.expanded)}\n      tabIndex={0}\n      onKeyUp={onKeyUp}\n      onKeyDown={onKeyDown}\n      onClick={onClick}\n      aria-label={ariaLabel}\n      {...focusVisible}\n      {...ariaAttributes}\n    >\n      <div className={styles['icon-container']}>{icon}</div>\n      {children}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}