{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useLayoutEffect, useState } from 'react';\nimport { unstable_batchedUpdates } from 'react-dom';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nvar AsyncStore = /** @class */function () {\n  function AsyncStore(state) {\n    this._listeners = [];\n    this._state = state;\n  }\n  AsyncStore.prototype.get = function () {\n    return this._state;\n  };\n  AsyncStore.prototype.set = function (cb) {\n    var _this = this;\n    var prevState = this._state;\n    var newState = cb(prevState);\n    this._state = newState;\n    unstable_batchedUpdates(function () {\n      for (var _i = 0, _a = _this._listeners; _i < _a.length; _i++) {\n        var _b = _a[_i],\n          selector = _b[0],\n          listener = _b[1];\n        if (selector(prevState) !== selector(newState)) {\n          listener(newState, prevState);\n        }\n      }\n    });\n  };\n  AsyncStore.prototype.subscribe = function (selector, listener) {\n    var _this = this;\n    this._listeners.push([selector, listener]);\n    return function () {\n      return _this.unsubscribe(listener);\n    };\n  };\n  AsyncStore.prototype.unsubscribe = function (listener) {\n    for (var index = 0; index < this._listeners.length; index++) {\n      var _a = this._listeners[index],\n        storedListener = _a[1];\n      if (storedListener === listener) {\n        this._listeners.splice(index, 1);\n        break;\n      }\n    }\n  };\n  return AsyncStore;\n}();\nexport default AsyncStore;\nexport function useReaction(store, selector, effect) {\n  useLayoutEffect(function () {\n    var unsubscribe = store.subscribe(selector, function (newState, prevState) {\n      return effect(selector(newState), selector(prevState));\n    });\n    return unsubscribe;\n  },\n  // ignoring selector and effect as they are expected to stay constant\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [store]);\n}\nexport function useSelector(store, selector) {\n  var _a = useState(selector(store.get())),\n    state = _a[0],\n    setState = _a[1];\n  useReaction(store, selector, function (newState) {\n    setState(newState);\n  });\n  // When store changes we need the state to be updated synchronously to avoid inconsistencies.\n  var prevStore = usePrevious(store);\n  if (prevStore !== null && prevStore !== store) {\n    return selector(store.get());\n  }\n  return state;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,eAAe,EAAEC,QAAQ,QAAQ,OAAO;AACjD,SAASC,uBAAuB,QAAQ,WAAW;AACnD,SAASC,WAAW,QAAQ,mCAAmC;AAW/D;EAIE,oBAAYC,KAAQ;IAFpB,eAAU,GAAwC,EAAE;IAGlD,IAAI,CAACC,MAAM,GAAGD,KAAK;EACrB;EAEAE,wBAAG,GAAH;IACE,OAAO,IAAI,CAACD,MAAM;EACpB,CAAC;EAEDC,wBAAG,GAAH,UAAIC,EAAmB;IAAvB;IACE,IAAMC,SAAS,GAAG,IAAI,CAACH,MAAM;IAC7B,IAAMI,QAAQ,GAAGF,EAAE,CAACC,SAAS,CAAC;IAE9B,IAAI,CAACH,MAAM,GAAGI,QAAQ;IAEtBP,uBAAuB,CAAC;MACtB,KAAmC,UAAe,EAAfQ,UAAI,CAACC,UAAU,EAAfC,cAAe,EAAfA,IAAe,EAAE;QAAzC,eAAoB;UAAnBC,QAAQ;UAAEC,QAAQ;QAC5B,IAAID,QAAQ,CAACL,SAAS,CAAC,KAAKK,QAAQ,CAACJ,QAAQ,CAAC,EAAE;UAC9CK,QAAQ,CAACL,QAAQ,EAAED,SAAS,CAAC;;;IAGnC,CAAC,CAAC;EACJ,CAAC;EAEDF,8BAAS,GAAT,UAAaO,QAAwB,EAAEC,QAAqB;IAA5D;IACE,IAAI,CAACH,UAAU,CAACI,IAAI,CAAC,CAACF,QAAQ,EAAEC,QAAQ,CAAC,CAAC;IAE1C,OAAO;MAAM,YAAI,CAACE,WAAW,CAACF,QAAQ,CAAC;IAA1B,CAA0B;EACzC,CAAC;EAEDR,gCAAW,GAAX,UAAYQ,QAAuB;IACjC,KAAK,IAAIG,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACN,UAAU,CAACO,MAAM,EAAED,KAAK,EAAE,EAAE;MACrD,SAAqB,IAAI,CAACN,UAAU,CAACM,KAAK,CAAC;QAAxCE,cAAc,QAA0B;MAEjD,IAAIA,cAAc,KAAKL,QAAQ,EAAE;QAC/B,IAAI,CAACH,UAAU,CAACS,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;QAChC;;;EAGN,CAAC;EACH,iBAAC;AAAD,CAAC,EA3CD;;AA6CA,OAAM,SAAUI,WAAW,CAAOC,KAA4B,EAAET,QAAwB,EAAEU,MAAmB;EAC3GvB,eAAe,CACb;IACE,IAAMgB,WAAW,GAAGM,KAAK,CAACE,SAAS,CAACX,QAAQ,EAAE,UAACJ,QAAQ,EAAED,SAAS;MAChE,aAAM,CAACK,QAAQ,CAACJ,QAAQ,CAAC,EAAEI,QAAQ,CAACL,SAAS,CAAC,CAAC;IAA/C,CAA+C,CAChD;IACD,OAAOQ,WAAW;EACpB,CAAC;EACD;EACA;EACA,CAACM,KAAK,CAAC,CACR;AACH;AAEA,OAAM,SAAUG,WAAW,CAAOH,KAA4B,EAAET,QAAwB;EAChF,SAAoBZ,QAAQ,CAAIY,QAAQ,CAACS,KAAK,CAACI,GAAG,EAAE,CAAC,CAAC;IAArDtB,KAAK;IAAEuB,QAAQ,QAAsC;EAE5DN,WAAW,CAACC,KAAK,EAAET,QAAQ,EAAE,kBAAQ;IACnCc,QAAQ,CAAClB,QAAQ,CAAC;EACpB,CAAC,CAAC;EAEF;EACA,IAAMmB,SAAS,GAAGzB,WAAW,CAACmB,KAAK,CAAC;EACpC,IAAIM,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAKN,KAAK,EAAE;IAC7C,OAAOT,QAAQ,CAACS,KAAK,CAACI,GAAG,EAAE,CAAC;;EAG9B,OAAOtB,KAAK;AACd","names":["useLayoutEffect","useState","unstable_batchedUpdates","usePrevious","state","_state","AsyncStore","cb","prevState","newState","_a","_listeners","_i","selector","listener","push","unsubscribe","index","length","storedListener","splice","useReaction","store","effect","subscribe","useSelector","get","setState","prevStore"],"sources":["/Users/dcastro/node_modules/src/area-chart/model/async-store.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useLayoutEffect, useState } from 'react';\nimport { unstable_batchedUpdates } from 'react-dom';\nimport { usePrevious } from '../../internal/hooks/use-previous';\n\ntype Selector<S, R> = (state: S) => R;\ntype Listener<S> = (state: S, prevState: S) => any;\n\nexport interface ReadonlyAsyncStore<S> {\n  get(): S;\n  subscribe<R>(selector: Selector<S, R>, listener: Listener<S>): () => void;\n  unsubscribe(listener: Listener<any>): void;\n}\n\nexport default class AsyncStore<S> implements ReadonlyAsyncStore<S> {\n  _state: S;\n  _listeners: [Selector<S, any>, Listener<any>][] = [];\n\n  constructor(state: S) {\n    this._state = state;\n  }\n\n  get(): S {\n    return this._state;\n  }\n\n  set(cb: (state: S) => S): void {\n    const prevState = this._state;\n    const newState = cb(prevState);\n\n    this._state = newState;\n\n    unstable_batchedUpdates(() => {\n      for (const [selector, listener] of this._listeners) {\n        if (selector(prevState) !== selector(newState)) {\n          listener(newState, prevState);\n        }\n      }\n    });\n  }\n\n  subscribe<R>(selector: Selector<S, R>, listener: Listener<S>): () => void {\n    this._listeners.push([selector, listener]);\n\n    return () => this.unsubscribe(listener);\n  }\n\n  unsubscribe(listener: Listener<any>): void {\n    for (let index = 0; index < this._listeners.length; index++) {\n      const [, storedListener] = this._listeners[index];\n\n      if (storedListener === listener) {\n        this._listeners.splice(index, 1);\n        break;\n      }\n    }\n  }\n}\n\nexport function useReaction<S, R>(store: ReadonlyAsyncStore<S>, selector: Selector<S, R>, effect: Listener<R>): void {\n  useLayoutEffect(\n    () => {\n      const unsubscribe = store.subscribe(selector, (newState, prevState) =>\n        effect(selector(newState), selector(prevState))\n      );\n      return unsubscribe;\n    },\n    // ignoring selector and effect as they are expected to stay constant\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [store]\n  );\n}\n\nexport function useSelector<S, R>(store: ReadonlyAsyncStore<S>, selector: Selector<S, R>): R {\n  const [state, setState] = useState<R>(selector(store.get()));\n\n  useReaction(store, selector, newState => {\n    setState(newState);\n  });\n\n  // When store changes we need the state to be updated synchronously to avoid inconsistencies.\n  const prevStore = usePrevious(store);\n  if (prevStore !== null && prevStore !== store) {\n    return selector(store.get());\n  }\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}