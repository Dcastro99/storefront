{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nexport var useOpenState = function (_a) {\n  var onOpen = _a.onOpen,\n    onClose = _a.onClose;\n  var _b = useState(false),\n    isOpen = _b[0],\n    setIsOpen = _b[1];\n  var openDropdown = function () {\n    if (!isOpen) {\n      setIsOpen(true);\n      onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n    }\n  };\n  var closeDropdown = function () {\n    if (isOpen) {\n      setIsOpen(false);\n      onClose === null || onClose === void 0 ? void 0 : onClose();\n    }\n  };\n  var toggleDropdown = function () {\n    if (isOpen) {\n      closeDropdown();\n    } else {\n      openDropdown();\n    }\n  };\n  return {\n    isOpen: isOpen,\n    openDropdown: openDropdown,\n    closeDropdown: closeDropdown,\n    toggleDropdown: toggleDropdown\n  };\n};","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAOhC,OAAO,IAAMC,YAAY,GAAG,UAACC,EAAmC;MAAjCC,MAAM;IAAEC,OAAO;EACtC,SAAsBJ,QAAQ,CAAC,KAAK,CAAC;IAApCK,MAAM;IAAEC,SAAS,QAAmB;EAE3C,IAAMC,YAAY,GAAG;IACnB,IAAI,CAACF,MAAM,EAAE;MACXC,SAAS,CAAC,IAAI,CAAC;MACfH,MAAM,aAANA,MAAM,uBAANA,MAAM,EAAI;;EAEd,CAAC;EAED,IAAMK,aAAa,GAAG;IACpB,IAAIH,MAAM,EAAE;MACVC,SAAS,CAAC,KAAK,CAAC;MAChBF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,EAAI;;EAEf,CAAC;EAED,IAAMK,cAAc,GAAG;IACrB,IAAIJ,MAAM,EAAE;MACVG,aAAa,EAAE;KAChB,MAAM;MACLD,YAAY,EAAE;;EAElB,CAAC;EAED,OAAO;IAAEF,MAAM;IAAEE,YAAY;IAAEC,aAAa;IAAEC,cAAc;EAAA,CAAE;AAChE,CAAC","names":["useState","useOpenState","_a","onOpen","onClose","isOpen","setIsOpen","openDropdown","closeDropdown","toggleDropdown"],"sources":["/Users/dcastro/node_modules/src/internal/components/options-list/utils/use-open-state.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\n\ninterface OpenStateProps {\n  onOpen?: () => void;\n  onClose?: () => void;\n}\n\nexport const useOpenState = ({ onOpen, onClose }: OpenStateProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const openDropdown = () => {\n    if (!isOpen) {\n      setIsOpen(true);\n      onOpen?.();\n    }\n  };\n\n  const closeDropdown = () => {\n    if (isOpen) {\n      setIsOpen(false);\n      onClose?.();\n    }\n  };\n\n  const toggleDropdown = () => {\n    if (isOpen) {\n      closeDropdown();\n    } else {\n      openDropdown();\n    }\n  };\n\n  return { isOpen, openDropdown, closeDropdown, toggleDropdown };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}