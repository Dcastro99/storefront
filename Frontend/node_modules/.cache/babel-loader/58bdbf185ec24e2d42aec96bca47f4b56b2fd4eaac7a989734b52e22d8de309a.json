{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport ResizeHandler from './icons/resize-handler';\nimport PreferencesModal from './preferences-modal';\nimport { usePointerEvents } from './utils/use-pointer-events';\nimport { useKeyboardEvents } from './utils/use-keyboard-events';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { getLimitedValue } from './utils/size-utils';\nimport { Transition } from '../internal/components/transition';\nimport { useEffectOnUpdate } from '../internal/hooks/use-effect-on-update';\nvar MIN_HEIGHT = 160;\nvar MIN_WIDTH = 280;\nvar TransitionContentSide = function (_a) {\n  var _b, _c;\n  var baseProps = _a.baseProps,\n    isOpen = _a.isOpen,\n    splitPanelRef = _a.splitPanelRef,\n    handleRef = _a.handleRef,\n    topOffset = _a.topOffset,\n    bottomOffset = _a.bottomOffset,\n    cappedSize = _a.cappedSize,\n    isRefresh = _a.isRefresh,\n    onToggle = _a.onToggle,\n    i18nStrings = _a.i18nStrings,\n    relativeSize = _a.relativeSize,\n    onKeyDown = _a.onKeyDown,\n    onSliderPointerDown = _a.onSliderPointerDown,\n    focusVisible = _a.focusVisible,\n    toggleRef = _a.toggleRef,\n    paneHeader = _a.paneHeader,\n    wrappedChildren = _a.wrappedChildren;\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.drawer, styles.root, styles['position-side'], (_b = {}, _b[styles['drawer-closed']] = !isOpen, _b)),\n    style: {\n      width: isOpen ? cappedSize : undefined,\n      maxWidth: isRefresh ? '100%' : undefined\n    },\n    ref: splitPanelRef\n  }), React.createElement(\"aside\", {\n    className: clsx(styles['drawer-content-side'], (_c = {}, _c[styles.refresh] = isRefresh, _c)),\n    style: {\n      top: topOffset,\n      bottom: bottomOffset\n    },\n    onClick: function () {\n      return !isOpen && onToggle();\n    }\n  }, isOpen ? React.createElement(\"div\", {\n    className: styles['slider-wrapper-side']\n  }, React.createElement(\"div\", __assign({\n    role: \"slider\",\n    tabIndex: 0,\n    \"aria-label\": i18nStrings.resizeHandleAriaLabel,\n    \"aria-valuemax\": 100,\n    \"aria-valuemin\": 0,\n    \"aria-valuenow\": relativeSize,\n    className: clsx(styles.slider, styles['slider-side']),\n    onKeyDown: onKeyDown,\n    onPointerDown: onSliderPointerDown,\n    ref: handleRef\n  }, focusVisible), React.createElement(ResizeHandler, {\n    className: clsx(styles['slider-icon'], styles['slider-icon-side'])\n  }))) : React.createElement(InternalButton, {\n    className: clsx(styles['open-button'], styles['open-button-side']),\n    iconName: \"angle-left\",\n    variant: \"icon\",\n    formAction: \"none\",\n    ariaLabel: i18nStrings.openButtonAriaLabel,\n    ariaExpanded: isOpen,\n    ref: isRefresh ? null : toggleRef\n  }), React.createElement(\"div\", {\n    className: styles['content-side'],\n    \"aria-hidden\": !isOpen\n  }, React.createElement(\"div\", {\n    className: clsx(styles['pane-header-wrapper-side'])\n  }, paneHeader), React.createElement(\"hr\", {\n    className: styles['header-divider']\n  }), React.createElement(\"div\", {\n    className: clsx(styles['pane-content-wrapper-side'])\n  }, wrappedChildren))));\n};\nvar TransitionContentBottom = function (_a) {\n  var _b, _c;\n  var baseProps = _a.baseProps,\n    isOpen = _a.isOpen,\n    splitPanelRef = _a.splitPanelRef,\n    handleRef = _a.handleRef,\n    bottomOffset = _a.bottomOffset,\n    cappedSize = _a.cappedSize,\n    isRefresh = _a.isRefresh,\n    onToggle = _a.onToggle,\n    i18nStrings = _a.i18nStrings,\n    relativeSize = _a.relativeSize,\n    onKeyDown = _a.onKeyDown,\n    onSliderPointerDown = _a.onSliderPointerDown,\n    focusVisible = _a.focusVisible,\n    paneHeader = _a.paneHeader,\n    wrappedChildren = _a.wrappedChildren,\n    isMobile = _a.isMobile,\n    disableContentPaddings = _a.disableContentPaddings,\n    state = _a.state,\n    leftOffset = _a.leftOffset,\n    rightOffset = _a.rightOffset,\n    transitioningElementRef = _a.transitioningElementRef,\n    centeredMaxWidthClasses = _a.centeredMaxWidthClasses,\n    splitPanelHeaderRef = _a.splitPanelHeaderRef,\n    appLayoutMaxWidth = _a.appLayoutMaxWidth;\n  var transitionContentBottomRef = useMergeRefs(splitPanelRef || null, transitioningElementRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root, styles.drawer, styles['position-bottom'], (_b = {}, _b[styles['drawer-closed']] = !isOpen, _b[styles['drawer-mobile']] = isMobile, _b[styles['drawer-disable-content-paddings']] = disableContentPaddings, _b[styles.animating] = isRefresh && (state === 'entering' || state === 'exiting'), _b[styles.refresh] = isRefresh, _b)),\n    onClick: function () {\n      return !isOpen && onToggle();\n    },\n    style: {\n      bottom: bottomOffset,\n      left: leftOffset,\n      right: rightOffset,\n      height: isOpen ? cappedSize : undefined\n    },\n    ref: transitionContentBottomRef\n  }), isOpen && React.createElement(\"div\", {\n    className: styles['slider-wrapper-bottom']\n  }, React.createElement(\"div\", __assign({\n    role: \"slider\",\n    tabIndex: 0,\n    \"aria-label\": i18nStrings.resizeHandleAriaLabel,\n    \"aria-valuemax\": 100,\n    \"aria-valuemin\": 0,\n    \"aria-valuenow\": relativeSize,\n    className: clsx(styles.slider, styles['slider-bottom']),\n    onKeyDown: onKeyDown,\n    onPointerDown: onSliderPointerDown,\n    ref: handleRef\n  }, focusVisible), React.createElement(ResizeHandler, {\n    className: clsx(styles['slider-icon'], styles['slider-icon-bottom'])\n  }))), React.createElement(\"div\", {\n    className: styles['drawer-content-bottom']\n  }, React.createElement(\"div\", {\n    className: clsx(styles['pane-header-wrapper-bottom'], centeredMaxWidthClasses),\n    ref: splitPanelHeaderRef\n  }, paneHeader), React.createElement(\"div\", {\n    className: clsx(styles['content-bottom'], centeredMaxWidthClasses),\n    \"aria-hidden\": !isOpen\n  }, React.createElement(\"div\", {\n    className: clsx((_c = {}, _c[styles['content-bottom-max-width']] = isRefresh, _c)),\n    style: appLayoutMaxWidth\n  }, wrappedChildren))));\n};\nexport default function SplitPanel(_a) {\n  var _b;\n  var header = _a.header,\n    children = _a.children,\n    _c = _a.hidePreferencesButton,\n    hidePreferencesButton = _c === void 0 ? false : _c,\n    i18nStrings = _a.i18nStrings,\n    restProps = __rest(_a, [\"header\", \"children\", \"hidePreferencesButton\", \"i18nStrings\"]);\n  var __internalRootRef = useBaseComponent('SplitPanel').__internalRootRef;\n  var _d = useSplitPanelContext(),\n    size = _d.size,\n    getMaxWidth = _d.getMaxWidth,\n    getMaxHeight = _d.getMaxHeight,\n    position = _d.position,\n    topOffset = _d.topOffset,\n    bottomOffset = _d.bottomOffset,\n    leftOffset = _d.leftOffset,\n    rightOffset = _d.rightOffset,\n    disableContentPaddings = _d.disableContentPaddings,\n    contentWidthStyles = _d.contentWidthStyles,\n    contentWrapperPaddings = _d.contentWrapperPaddings,\n    isCopy = _d.isCopy,\n    isOpen = _d.isOpen,\n    isMobile = _d.isMobile,\n    isRefresh = _d.isRefresh,\n    isForcedPosition = _d.isForcedPosition,\n    splitPanelRef = _d.splitPanelRef,\n    splitPanelHeaderRef = _d.splitPanelHeaderRef,\n    lastInteraction = _d.lastInteraction,\n    onPreferencesChange = _d.onPreferencesChange,\n    onResize = _d.onResize,\n    onToggle = _d.onToggle,\n    reportSize = _d.reportSize,\n    setOpenButtonAriaLabel = _d.setOpenButtonAriaLabel;\n  var baseProps = getBaseProps(restProps);\n  var focusVisible = useFocusVisible();\n  var _e = useState(false),\n    isPreferencesOpen = _e[0],\n    setPreferencesOpen = _e[1];\n  var _f = useState(0),\n    relativeSize = _f[0],\n    setRelativeSize = _f[1];\n  var _g = useState(size),\n    maxSize = _g[0],\n    setMaxSize = _g[1];\n  var minSize = position === 'bottom' ? MIN_HEIGHT : MIN_WIDTH;\n  var cappedSize = getLimitedValue(minSize, size, maxSize);\n  var appLayoutMaxWidth = isRefresh && position === 'bottom' ? contentWidthStyles : undefined;\n  useEffect(function () {\n    setOpenButtonAriaLabel === null || setOpenButtonAriaLabel === void 0 ? void 0 : setOpenButtonAriaLabel(i18nStrings.openButtonAriaLabel);\n  }, [setOpenButtonAriaLabel, i18nStrings.openButtonAriaLabel]);\n  useEffect(function () {\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    var handle = requestAnimationFrame(function () {\n      var maxSize = position === 'bottom' ? getMaxHeight() : getMaxWidth();\n      setRelativeSize(size / maxSize * 100);\n      setMaxSize(maxSize);\n    });\n    return function () {\n      return cancelAnimationFrame(handle);\n    };\n  }, [size, position, getMaxHeight, getMaxWidth]);\n  useEffect(function () {\n    reportSize(cappedSize);\n  }, [reportSize, cappedSize]);\n  useEffect(function () {\n    var handler = function () {\n      return setMaxSize(position === 'bottom' ? getMaxHeight() : getMaxWidth());\n    };\n    window.addEventListener('resize', handler);\n    return function () {\n      return window.removeEventListener('resize', handler);\n    };\n  }, [position, getMaxWidth, getMaxHeight]);\n  var setSidePanelWidth = function (width) {\n    var maxWidth = getMaxWidth();\n    var size = getLimitedValue(MIN_WIDTH, width, maxWidth);\n    if (isOpen && maxWidth >= MIN_WIDTH) {\n      onResize({\n        size: size\n      });\n    }\n  };\n  var setBottomPanelHeight = function (height) {\n    var maxHeight = getMaxHeight();\n    var size = getLimitedValue(MIN_HEIGHT, height, maxHeight);\n    if (isOpen && maxHeight >= MIN_HEIGHT) {\n      onResize({\n        size: size\n      });\n    }\n  };\n  var splitPanelRefObject = useRef(null);\n  var handleRef = useRef(null);\n  var sizeControlProps = {\n    position: position,\n    splitPanelRef: splitPanelRefObject,\n    handleRef: handleRef,\n    setSidePanelWidth: setSidePanelWidth,\n    setBottomPanelHeight: setBottomPanelHeight\n  };\n  var onSliderPointerDown = usePointerEvents(sizeControlProps);\n  var onKeyDown = useKeyboardEvents(sizeControlProps);\n  var toggleRef = useRef(null);\n  var closeRef = useRef(null);\n  var preferencesRef = useRef(null);\n  useEffectOnUpdate(function () {\n    var _a, _b, _c;\n    switch (lastInteraction === null || lastInteraction === void 0 ? void 0 : lastInteraction.type) {\n      case 'open':\n        return (_a = closeRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      case 'close':\n        return (_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.focus();\n      case 'position':\n        return (_c = preferencesRef.current) === null || _c === void 0 ? void 0 : _c.focus();\n      default:\n        return;\n    }\n  }, [lastInteraction]);\n  var wrappedChildren = React.createElement(AppLayoutContext.Provider, {\n    value: {\n      stickyOffsetTop: topOffset,\n      stickyOffsetBottom: bottomOffset\n    }\n  }, children);\n  var paneHeader = React.createElement(\"div\", {\n    className: styles.header,\n    style: appLayoutMaxWidth\n  }, React.createElement(\"h2\", {\n    className: styles['header-text']\n  }, header), React.createElement(\"div\", {\n    className: styles['header-actions']\n  }, !hidePreferencesButton && isOpen && React.createElement(React.Fragment, null, React.createElement(InternalButton, {\n    className: styles['preferences-button'],\n    iconName: \"settings\",\n    variant: \"icon\",\n    onClick: function () {\n      return setPreferencesOpen(true);\n    },\n    formAction: \"none\",\n    ariaLabel: i18nStrings.preferencesTitle,\n    ref: preferencesRef\n  }), React.createElement(\"span\", {\n    className: styles.divider\n  })), isOpen ? React.createElement(InternalButton, {\n    className: styles['close-button'],\n    iconName: isRefresh && position === 'side' ? 'angle-right' : isRefresh ? 'angle-down' : 'close',\n    variant: \"icon\",\n    onClick: onToggle,\n    formAction: \"none\",\n    ariaLabel: i18nStrings.closeButtonAriaLabel,\n    ref: closeRef,\n    ariaExpanded: isOpen\n  }) : position === 'side' ? null : React.createElement(InternalButton, {\n    className: styles['open-button'],\n    iconName: \"angle-up\",\n    variant: \"icon\",\n    formAction: \"none\",\n    ariaLabel: i18nStrings.openButtonAriaLabel,\n    ref: toggleRef,\n    ariaExpanded: isOpen\n  })));\n  /*\n    This effect forces the browser to recalculate the layout\n    whenever the split panel might have moved.\n       This is needed as a workaround for a bug in Safari, which does\n    not automatically calculate the new position of the split panel\n    _content_ when the split panel moves.\n  */\n  useLayoutEffect(function () {\n    var root = __internalRootRef.current;\n    if (root) {\n      var property = 'transform';\n      var temporaryValue = 'translateZ(0)';\n      var valueBefore = root.style[property];\n      root.style[property] = temporaryValue;\n      // This line forces the browser to recalculate the layout\n      void root.offsetHeight;\n      root.style[property] = valueBefore;\n    }\n  }, [rightOffset, __internalRootRef]);\n  var mergedRef = useMergeRefs(splitPanelRef, splitPanelRefObject, __internalRootRef);\n  /**\n   * The AppLayout factor moved the circular buttons out of the\n   * SplitPanel and into the Tools component. This conditional\n   * is still needed for the early return to prevent execution\n   * of the following code.\n   */\n  if (isRefresh && (!isOpen || isCopy) && position === 'side') {\n    return React.createElement(React.Fragment, null);\n  }\n  var centeredMaxWidthClasses = clsx((_b = {}, _b[styles['pane-bottom-center-align']] = isRefresh, _b[styles['pane-bottom-content-nav-padding']] = contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedNav, _b[styles['pane-bottom-content-tools-padding']] = contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedTools, _b));\n  return React.createElement(Transition, {\n    \"in\": isOpen !== null && isOpen !== void 0 ? isOpen : false\n  }, function (state, transitioningElementRef) {\n    return React.createElement(React.Fragment, null, position === 'side' && React.createElement(TransitionContentSide, {\n      baseProps: baseProps,\n      isOpen: isOpen,\n      splitPanelRef: mergedRef,\n      handleRef: handleRef,\n      topOffset: topOffset,\n      bottomOffset: bottomOffset,\n      cappedSize: cappedSize,\n      isRefresh: isRefresh,\n      onToggle: onToggle,\n      i18nStrings: i18nStrings,\n      relativeSize: relativeSize,\n      onKeyDown: onKeyDown,\n      onSliderPointerDown: onSliderPointerDown,\n      focusVisible: focusVisible,\n      toggleRef: toggleRef,\n      paneHeader: paneHeader,\n      wrappedChildren: wrappedChildren\n    }), position === 'bottom' && React.createElement(TransitionContentBottom, {\n      baseProps: baseProps,\n      isOpen: isOpen,\n      splitPanelRef: mergedRef,\n      handleRef: handleRef,\n      bottomOffset: bottomOffset,\n      cappedSize: cappedSize,\n      isRefresh: isRefresh,\n      onToggle: onToggle,\n      i18nStrings: i18nStrings,\n      relativeSize: relativeSize,\n      onKeyDown: onKeyDown,\n      onSliderPointerDown: onSliderPointerDown,\n      focusVisible: focusVisible,\n      paneHeader: paneHeader,\n      wrappedChildren: wrappedChildren,\n      isMobile: isMobile,\n      disableContentPaddings: disableContentPaddings,\n      state: state,\n      leftOffset: leftOffset,\n      rightOffset: rightOffset,\n      transitioningElementRef: transitioningElementRef,\n      centeredMaxWidthClasses: centeredMaxWidthClasses,\n      splitPanelHeaderRef: splitPanelHeaderRef,\n      appLayoutMaxWidth: appLayoutMaxWidth\n    }), isPreferencesOpen && React.createElement(PreferencesModal, {\n      visible: true,\n      preferences: {\n        position: position\n      },\n      disabledSidePosition: position === 'bottom' && isForcedPosition,\n      isRefresh: isRefresh,\n      i18nStrings: {\n        header: i18nStrings.preferencesTitle,\n        confirm: i18nStrings.preferencesConfirm,\n        cancel: i18nStrings.preferencesCancel,\n        positionLabel: i18nStrings.preferencesPositionLabel,\n        positionDescription: i18nStrings.preferencesPositionDescription,\n        positionBottom: i18nStrings.preferencesPositionBottom,\n        positionSide: i18nStrings.preferencesPositionSide\n      },\n      onConfirm: function (preferences) {\n        onPreferencesChange(__assign({}, preferences));\n        setPreferencesOpen(false);\n      },\n      onDismiss: function () {\n        setPreferencesOpen(false);\n      }\n    }));\n  });\n}\napplyDisplayName(SplitPanel, 'SplitPanel');","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","useLayoutEffect","useRef","clsx","InternalButton","getBaseProps","useSplitPanelContext","useFocusVisible","applyDisplayName","ResizeHandler","PreferencesModal","usePointerEvents","useKeyboardEvents","styles","useBaseComponent","useMergeRefs","AppLayoutContext","getLimitedValue","Transition","useEffectOnUpdate","MIN_HEIGHT","MIN_WIDTH","TransitionContentSide","_a","baseProps","isOpen","splitPanelRef","handleRef","topOffset","bottomOffset","cappedSize","isRefresh","onToggle","i18nStrings","relativeSize","onKeyDown","onSliderPointerDown","focusVisible","toggleRef","paneHeader","wrappedChildren","className","drawer","root","_b","style","width","undefined","maxWidth","ref","_c","refresh","top","bottom","onClick","role","tabIndex","resizeHandleAriaLabel","slider","onPointerDown","iconName","variant","formAction","ariaLabel","openButtonAriaLabel","ariaExpanded","TransitionContentBottom","isMobile","disableContentPaddings","state","leftOffset","rightOffset","transitioningElementRef","centeredMaxWidthClasses","splitPanelHeaderRef","appLayoutMaxWidth","transitionContentBottomRef","animating","left","right","height","SplitPanel","children","hidePreferencesButton","restProps","size","getMaxWidth","getMaxHeight","position","contentWidthStyles","contentWrapperPaddings","isCopy","isForcedPosition","lastInteraction","onPreferencesChange","onResize","reportSize","setOpenButtonAriaLabel","isPreferencesOpen","setPreferencesOpen","setRelativeSize","maxSize","setMaxSize","minSize","handle","requestAnimationFrame","handler","window","addEventListener","removeEventListener","setSidePanelWidth","setBottomPanelHeight","maxHeight","splitPanelRefObject","sizeControlProps","closeRef","preferencesRef","type","current","focus","Provider","value","stickyOffsetTop","stickyOffsetBottom","header","preferencesTitle","divider","closeButtonAriaLabel","__internalRootRef","property","temporaryValue","valueBefore","offsetHeight","mergedRef","closedNav","closedTools","visible","preferences","disabledSidePosition","confirm","preferencesConfirm","cancel","preferencesCancel","positionLabel","preferencesPositionLabel","positionDescription","preferencesPositionDescription","positionBottom","preferencesPositionBottom","positionSide","preferencesPositionSide","onConfirm","onDismiss"],"sources":["/Users/dcastro/node_modules/src/split-panel/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps, BaseComponentProps } from '../internal/base-component';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\n\nimport { SplitPanelProps, SizeControlProps } from './interfaces';\nimport ResizeHandler from './icons/resize-handler';\nimport PreferencesModal from './preferences-modal';\nimport { usePointerEvents } from './utils/use-pointer-events';\nimport { useKeyboardEvents } from './utils/use-keyboard-events';\n\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { getLimitedValue } from './utils/size-utils';\nimport { Transition, TransitionStatus } from '../internal/components/transition';\nimport { ButtonProps } from '../button/interfaces';\nimport { useEffectOnUpdate } from '../internal/hooks/use-effect-on-update';\n\nexport { SplitPanelProps };\n\nconst MIN_HEIGHT = 160;\nconst MIN_WIDTH = 280;\ninterface TransitionContentProps {\n  baseProps: BaseComponentProps;\n  isOpen?: boolean;\n  splitPanelRef?: React.Ref<any>;\n  handleRef: React.RefObject<HTMLDivElement>;\n  bottomOffset: number;\n  cappedSize: number;\n  isRefresh: boolean;\n  onToggle: () => void;\n  i18nStrings: SplitPanelProps.I18nStrings;\n  relativeSize: number;\n  onKeyDown: (event: React.KeyboardEvent<Element>) => void;\n  onSliderPointerDown: () => void;\n  focusVisible: { 'data-awsui-focus-visible': true } | { 'data-awsui-focus-visible'?: undefined };\n  paneHeader: JSX.Element;\n  wrappedChildren: JSX.Element;\n}\n\ninterface TransitionContentSideProps extends TransitionContentProps {\n  topOffset: number;\n  toggleRef: React.RefObject<ButtonProps.Ref>;\n}\n\nconst TransitionContentSide = ({\n  baseProps,\n  isOpen,\n  splitPanelRef,\n  handleRef,\n  topOffset,\n  bottomOffset,\n  cappedSize,\n  isRefresh,\n  onToggle,\n  i18nStrings,\n  relativeSize,\n  onKeyDown,\n  onSliderPointerDown,\n  focusVisible,\n  toggleRef,\n  paneHeader,\n  wrappedChildren,\n}: TransitionContentSideProps) => {\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.drawer, styles.root, styles['position-side'], {\n        [styles['drawer-closed']]: !isOpen,\n      })}\n      style={{\n        width: isOpen ? cappedSize : undefined,\n        maxWidth: isRefresh ? '100%' : undefined,\n      }}\n      ref={splitPanelRef}\n    >\n      <aside\n        className={clsx(styles['drawer-content-side'], {\n          [styles.refresh]: isRefresh,\n        })}\n        style={{\n          top: topOffset,\n          bottom: bottomOffset,\n        }}\n        onClick={() => !isOpen && onToggle()}\n      >\n        {isOpen ? (\n          <div className={styles['slider-wrapper-side']}>\n            <div\n              role=\"slider\"\n              tabIndex={0}\n              aria-label={i18nStrings.resizeHandleAriaLabel}\n              aria-valuemax={100}\n              aria-valuemin={0}\n              aria-valuenow={relativeSize}\n              className={clsx(styles.slider, styles['slider-side'])}\n              onKeyDown={onKeyDown}\n              onPointerDown={onSliderPointerDown}\n              ref={handleRef}\n              {...focusVisible}\n            >\n              <ResizeHandler className={clsx(styles['slider-icon'], styles['slider-icon-side'])} />\n            </div>\n          </div>\n        ) : (\n          <InternalButton\n            className={clsx(styles['open-button'], styles['open-button-side'])}\n            iconName=\"angle-left\"\n            variant=\"icon\"\n            formAction=\"none\"\n            ariaLabel={i18nStrings.openButtonAriaLabel}\n            ariaExpanded={isOpen}\n            ref={isRefresh ? null : toggleRef}\n          />\n        )}\n        <div className={styles['content-side']} aria-hidden={!isOpen}>\n          <div className={clsx(styles['pane-header-wrapper-side'])}>{paneHeader}</div>\n          <hr className={styles['header-divider']} />\n          <div className={clsx(styles['pane-content-wrapper-side'])}>{wrappedChildren}</div>\n        </div>\n      </aside>\n    </div>\n  );\n};\n\ninterface TransitionContentBottomProps extends TransitionContentProps {\n  isMobile: boolean;\n  disableContentPaddings?: boolean;\n  state: TransitionStatus;\n  leftOffset: number;\n  rightOffset: number;\n  transitioningElementRef: React.Ref<any>;\n  centeredMaxWidthClasses: string;\n  splitPanelHeaderRef?: React.Ref<any>;\n  appLayoutMaxWidth: React.CSSProperties | undefined;\n}\n\nconst TransitionContentBottom = ({\n  baseProps,\n  isOpen,\n  splitPanelRef,\n  handleRef,\n  bottomOffset,\n  cappedSize,\n  isRefresh,\n  onToggle,\n  i18nStrings,\n  relativeSize,\n  onKeyDown,\n  onSliderPointerDown,\n  focusVisible,\n  paneHeader,\n  wrappedChildren,\n  isMobile,\n  disableContentPaddings,\n  state,\n  leftOffset,\n  rightOffset,\n  transitioningElementRef,\n  centeredMaxWidthClasses,\n  splitPanelHeaderRef,\n  appLayoutMaxWidth,\n}: TransitionContentBottomProps) => {\n  const transitionContentBottomRef = useMergeRefs(splitPanelRef || null, transitioningElementRef);\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.root, styles.drawer, styles['position-bottom'], {\n        [styles['drawer-closed']]: !isOpen,\n        [styles['drawer-mobile']]: isMobile,\n        [styles['drawer-disable-content-paddings']]: disableContentPaddings,\n        [styles.animating]: isRefresh && (state === 'entering' || state === 'exiting'),\n        [styles.refresh]: isRefresh,\n      })}\n      onClick={() => !isOpen && onToggle()}\n      style={{\n        bottom: bottomOffset,\n        left: leftOffset,\n        right: rightOffset,\n        height: isOpen ? cappedSize : undefined,\n      }}\n      ref={transitionContentBottomRef}\n    >\n      {isOpen && (\n        <div className={styles['slider-wrapper-bottom']}>\n          <div\n            role=\"slider\"\n            tabIndex={0}\n            aria-label={i18nStrings.resizeHandleAriaLabel}\n            aria-valuemax={100}\n            aria-valuemin={0}\n            aria-valuenow={relativeSize}\n            className={clsx(styles.slider, styles['slider-bottom'])}\n            onKeyDown={onKeyDown}\n            onPointerDown={onSliderPointerDown}\n            ref={handleRef}\n            {...focusVisible}\n          >\n            <ResizeHandler className={clsx(styles['slider-icon'], styles['slider-icon-bottom'])} />\n          </div>\n        </div>\n      )}\n      <div className={styles['drawer-content-bottom']}>\n        <div className={clsx(styles['pane-header-wrapper-bottom'], centeredMaxWidthClasses)} ref={splitPanelHeaderRef}>\n          {paneHeader}\n        </div>\n        <div className={clsx(styles['content-bottom'], centeredMaxWidthClasses)} aria-hidden={!isOpen}>\n          <div className={clsx({ [styles['content-bottom-max-width']]: isRefresh })} style={appLayoutMaxWidth}>\n            {wrappedChildren}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function SplitPanel({\n  header,\n  children,\n  hidePreferencesButton = false,\n  i18nStrings,\n  ...restProps\n}: SplitPanelProps) {\n  const { __internalRootRef } = useBaseComponent('SplitPanel');\n  const {\n    size,\n    getMaxWidth,\n    getMaxHeight,\n    position,\n    topOffset,\n    bottomOffset,\n    leftOffset,\n    rightOffset,\n    disableContentPaddings,\n    contentWidthStyles,\n    contentWrapperPaddings,\n    isCopy,\n    isOpen,\n    isMobile,\n    isRefresh,\n    isForcedPosition,\n    splitPanelRef,\n    splitPanelHeaderRef,\n    lastInteraction,\n    onPreferencesChange,\n    onResize,\n    onToggle,\n    reportSize,\n    setOpenButtonAriaLabel,\n  } = useSplitPanelContext();\n  const baseProps = getBaseProps(restProps);\n  const focusVisible = useFocusVisible();\n  const [isPreferencesOpen, setPreferencesOpen] = useState<boolean>(false);\n  const [relativeSize, setRelativeSize] = useState(0);\n  const [maxSize, setMaxSize] = useState(size);\n  const minSize = position === 'bottom' ? MIN_HEIGHT : MIN_WIDTH;\n  const cappedSize = getLimitedValue(minSize, size, maxSize);\n  const appLayoutMaxWidth = isRefresh && position === 'bottom' ? contentWidthStyles : undefined;\n\n  useEffect(() => {\n    setOpenButtonAriaLabel?.(i18nStrings.openButtonAriaLabel);\n  }, [setOpenButtonAriaLabel, i18nStrings.openButtonAriaLabel]);\n\n  useEffect(() => {\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    const handle = requestAnimationFrame(() => {\n      const maxSize = position === 'bottom' ? getMaxHeight() : getMaxWidth();\n      setRelativeSize((size / maxSize) * 100);\n      setMaxSize(maxSize);\n    });\n    return () => cancelAnimationFrame(handle);\n  }, [size, position, getMaxHeight, getMaxWidth]);\n\n  useEffect(() => {\n    reportSize(cappedSize);\n  }, [reportSize, cappedSize]);\n\n  useEffect(() => {\n    const handler = () => setMaxSize(position === 'bottom' ? getMaxHeight() : getMaxWidth());\n    window.addEventListener('resize', handler);\n    return () => window.removeEventListener('resize', handler);\n  }, [position, getMaxWidth, getMaxHeight]);\n\n  const setSidePanelWidth = (width: number) => {\n    const maxWidth = getMaxWidth();\n    const size = getLimitedValue(MIN_WIDTH, width, maxWidth);\n\n    if (isOpen && maxWidth >= MIN_WIDTH) {\n      onResize({ size });\n    }\n  };\n\n  const setBottomPanelHeight = (height: number) => {\n    const maxHeight = getMaxHeight();\n    const size = getLimitedValue(MIN_HEIGHT, height, maxHeight);\n\n    if (isOpen && maxHeight >= MIN_HEIGHT) {\n      onResize({ size });\n    }\n  };\n\n  const splitPanelRefObject = useRef<HTMLDivElement>(null);\n  const handleRef = useRef<HTMLDivElement>(null);\n\n  const sizeControlProps: SizeControlProps = {\n    position,\n    splitPanelRef: splitPanelRefObject,\n    handleRef,\n    setSidePanelWidth,\n    setBottomPanelHeight,\n  };\n  const onSliderPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n\n  const toggleRef = useRef<ButtonProps.Ref>(null);\n  const closeRef = useRef<ButtonProps.Ref>(null);\n  const preferencesRef = useRef<ButtonProps.Ref>(null);\n\n  useEffectOnUpdate(() => {\n    switch (lastInteraction?.type) {\n      case 'open':\n        return closeRef.current?.focus();\n      case 'close':\n        return toggleRef.current?.focus();\n      case 'position':\n        return preferencesRef.current?.focus();\n      default:\n        return;\n    }\n  }, [lastInteraction]);\n\n  const wrappedChildren = (\n    <AppLayoutContext.Provider\n      value={{\n        stickyOffsetTop: topOffset,\n        stickyOffsetBottom: bottomOffset,\n      }}\n    >\n      {children}\n    </AppLayoutContext.Provider>\n  );\n\n  const paneHeader = (\n    <div className={styles.header} style={appLayoutMaxWidth}>\n      <h2 className={styles['header-text']}>{header}</h2>\n      <div className={styles['header-actions']}>\n        {!hidePreferencesButton && isOpen && (\n          <>\n            <InternalButton\n              className={styles['preferences-button']}\n              iconName=\"settings\"\n              variant=\"icon\"\n              onClick={() => setPreferencesOpen(true)}\n              formAction=\"none\"\n              ariaLabel={i18nStrings.preferencesTitle}\n              ref={preferencesRef}\n            />\n            <span className={styles.divider} />\n          </>\n        )}\n\n        {isOpen ? (\n          <InternalButton\n            className={styles['close-button']}\n            iconName={isRefresh && position === 'side' ? 'angle-right' : isRefresh ? 'angle-down' : 'close'}\n            variant=\"icon\"\n            onClick={onToggle}\n            formAction=\"none\"\n            ariaLabel={i18nStrings.closeButtonAriaLabel}\n            ref={closeRef}\n            ariaExpanded={isOpen}\n          />\n        ) : position === 'side' ? null : (\n          <InternalButton\n            className={styles['open-button']}\n            iconName=\"angle-up\"\n            variant=\"icon\"\n            formAction=\"none\"\n            ariaLabel={i18nStrings.openButtonAriaLabel}\n            ref={toggleRef}\n            ariaExpanded={isOpen}\n          />\n        )}\n      </div>\n    </div>\n  );\n\n  /*\n    This effect forces the browser to recalculate the layout\n    whenever the split panel might have moved.\n\n    This is needed as a workaround for a bug in Safari, which does\n    not automatically calculate the new position of the split panel\n    _content_ when the split panel moves.\n  */\n  useLayoutEffect(() => {\n    const root = __internalRootRef.current;\n\n    if (root) {\n      const property = 'transform';\n      const temporaryValue = 'translateZ(0)';\n\n      const valueBefore = root.style[property];\n      root.style[property] = temporaryValue;\n\n      // This line forces the browser to recalculate the layout\n      void root.offsetHeight;\n\n      root.style[property] = valueBefore;\n    }\n  }, [rightOffset, __internalRootRef]);\n\n  const mergedRef = useMergeRefs(splitPanelRef, splitPanelRefObject, __internalRootRef);\n\n  /**\n   * The AppLayout factor moved the circular buttons out of the\n   * SplitPanel and into the Tools component. This conditional\n   * is still needed for the early return to prevent execution\n   * of the following code.\n   */\n  if (isRefresh && (!isOpen || isCopy) && position === 'side') {\n    return <></>;\n  }\n\n  const centeredMaxWidthClasses = clsx({\n    [styles['pane-bottom-center-align']]: isRefresh,\n    [styles['pane-bottom-content-nav-padding']]: contentWrapperPaddings?.closedNav,\n    [styles['pane-bottom-content-tools-padding']]: contentWrapperPaddings?.closedTools,\n  });\n\n  return (\n    <Transition in={isOpen ?? false}>\n      {(state, transitioningElementRef) => (\n        <>\n          {position === 'side' && (\n            <TransitionContentSide\n              baseProps={baseProps}\n              isOpen={isOpen}\n              splitPanelRef={mergedRef}\n              handleRef={handleRef}\n              topOffset={topOffset}\n              bottomOffset={bottomOffset}\n              cappedSize={cappedSize}\n              isRefresh={isRefresh}\n              onToggle={onToggle}\n              i18nStrings={i18nStrings}\n              relativeSize={relativeSize}\n              onKeyDown={onKeyDown}\n              onSliderPointerDown={onSliderPointerDown}\n              focusVisible={focusVisible}\n              toggleRef={toggleRef}\n              paneHeader={paneHeader}\n              wrappedChildren={wrappedChildren}\n            ></TransitionContentSide>\n          )}\n\n          {position === 'bottom' && (\n            <TransitionContentBottom\n              baseProps={baseProps}\n              isOpen={isOpen}\n              splitPanelRef={mergedRef}\n              handleRef={handleRef}\n              bottomOffset={bottomOffset}\n              cappedSize={cappedSize}\n              isRefresh={isRefresh}\n              onToggle={onToggle}\n              i18nStrings={i18nStrings}\n              relativeSize={relativeSize}\n              onKeyDown={onKeyDown}\n              onSliderPointerDown={onSliderPointerDown}\n              focusVisible={focusVisible}\n              paneHeader={paneHeader}\n              wrappedChildren={wrappedChildren}\n              isMobile={isMobile}\n              disableContentPaddings={disableContentPaddings}\n              state={state}\n              leftOffset={leftOffset}\n              rightOffset={rightOffset}\n              transitioningElementRef={transitioningElementRef}\n              centeredMaxWidthClasses={centeredMaxWidthClasses}\n              splitPanelHeaderRef={splitPanelHeaderRef}\n              appLayoutMaxWidth={appLayoutMaxWidth}\n            ></TransitionContentBottom>\n          )}\n          {isPreferencesOpen && (\n            <PreferencesModal\n              visible={true}\n              preferences={{ position }}\n              disabledSidePosition={position === 'bottom' && isForcedPosition}\n              isRefresh={isRefresh}\n              i18nStrings={{\n                header: i18nStrings.preferencesTitle,\n                confirm: i18nStrings.preferencesConfirm,\n                cancel: i18nStrings.preferencesCancel,\n                positionLabel: i18nStrings.preferencesPositionLabel,\n                positionDescription: i18nStrings.preferencesPositionDescription,\n                positionBottom: i18nStrings.preferencesPositionBottom,\n                positionSide: i18nStrings.preferencesPositionSide,\n              }}\n              onConfirm={preferences => {\n                onPreferencesChange({ ...preferences });\n                setPreferencesOpen(false);\n              }}\n              onDismiss={() => {\n                setPreferencesOpen(false);\n              }}\n            />\n          )}\n        </>\n      )}\n    </Transition>\n  );\n}\n\napplyDisplayName(SplitPanel, 'SplitPanel');\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}