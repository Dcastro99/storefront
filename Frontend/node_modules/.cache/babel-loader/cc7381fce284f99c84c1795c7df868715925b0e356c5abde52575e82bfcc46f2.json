{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport SelectionControl from './selection-control';\nimport { focusMarkers } from './use-selection';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getColumnKey } from './utils';\nimport { TableHeaderCell } from './header-cell';\nimport { Resizer } from './resizer';\nimport { useColumnWidths } from './use-column-widths';\nimport styles from './styles.css.js';\nimport headerCellStyles from './header-cell/styles.css.js';\nvar Thead = React.forwardRef(function (_a, outerRef) {\n  var containerWidth = _a.containerWidth,\n    selectionType = _a.selectionType,\n    selectAllProps = _a.selectAllProps,\n    columnDefinitions = _a.columnDefinitions,\n    sortingColumn = _a.sortingColumn,\n    sortingDisabled = _a.sortingDisabled,\n    sortingDescending = _a.sortingDescending,\n    resizableColumns = _a.resizableColumns,\n    variant = _a.variant,\n    wrapLines = _a.wrapLines,\n    onFocusMove = _a.onFocusMove,\n    onCellFocus = _a.onCellFocus,\n    onCellBlur = _a.onCellBlur,\n    onSortingChange = _a.onSortingChange,\n    onResizeFinish = _a.onResizeFinish,\n    _b = _a.showFocusRing,\n    showFocusRing = _b === void 0 ? null : _b,\n    _c = _a.sticky,\n    sticky = _c === void 0 ? false : _c,\n    _d = _a.hidden,\n    hidden = _d === void 0 ? false : _d,\n    _e = _a.stuck,\n    stuck = _e === void 0 ? false : _e;\n  var headerCellClass = clsx(headerCellStyles['header-cell'], headerCellStyles[\"header-cell-variant-\".concat(variant)], sticky && headerCellStyles['header-cell-sticky'], stuck && headerCellStyles['header-cell-stuck']);\n  var selectionCellClass = clsx(styles['selection-control'], styles['selection-control-header']);\n  var _f = useColumnWidths(),\n    columnWidths = _f.columnWidths,\n    totalWidth = _f.totalWidth,\n    updateColumn = _f.updateColumn;\n  return React.createElement(\"thead\", {\n    className: clsx(!hidden && styles['thead-active'])\n  }, React.createElement(\"tr\", __assign({}, focusMarkers.all, {\n    ref: outerRef\n  }), selectionType === 'multi' && React.createElement(\"th\", {\n    className: clsx(headerCellClass, selectionCellClass),\n    scope: \"col\"\n  }, React.createElement(SelectionControl, __assign({\n    onFocusDown: function (event) {\n      return onFocusMove(event.target, -1, +1);\n    }\n  }, selectAllProps, hidden ? {\n    tabIndex: -1\n  } : {}))), selectionType === 'single' && React.createElement(\"th\", {\n    className: clsx(headerCellClass, selectionCellClass),\n    scope: \"col\"\n  }, React.createElement(\"span\", {\n    \"aria-hidden\": true\n  }, \"\\u00A0\")), columnDefinitions.map(function (column, colIndex) {\n    var widthOverride;\n    if (resizableColumns) {\n      if (columnWidths) {\n        // use stateful value if available\n        widthOverride = columnWidths[getColumnKey(column, colIndex)];\n      }\n      if (colIndex === columnDefinitions.length - 1 && containerWidth && containerWidth > totalWidth) {\n        // let the last column grow and fill the container width\n        widthOverride = 'auto';\n      }\n    }\n    return React.createElement(TableHeaderCell, {\n      key: getColumnKey(column, colIndex),\n      className: headerCellClass,\n      style: {\n        width: widthOverride || column.width,\n        minWidth: sticky ? undefined : column.minWidth,\n        maxWidth: resizableColumns || sticky ? undefined : column.maxWidth\n      },\n      tabIndex: sticky ? -1 : 0,\n      showFocusRing: colIndex === showFocusRing,\n      column: column,\n      activeSortingColumn: sortingColumn,\n      sortingDescending: sortingDescending,\n      sortingDisabled: sortingDisabled,\n      wrapLines: wrapLines,\n      resizer: resizableColumns && React.createElement(Resizer, {\n        onDragMove: function (newWidth) {\n          return updateColumn(colIndex, newWidth);\n        },\n        onFinish: function () {\n          return onResizeFinish(columnWidths);\n        }\n      }),\n      onClick: function (detail) {\n        return fireNonCancelableEvent(onSortingChange, detail);\n      },\n      onFocus: function () {\n        return onCellFocus === null || onCellFocus === void 0 ? void 0 : onCellFocus(colIndex);\n      },\n      onBlur: onCellBlur\n    });\n  })));\n});\nexport default Thead;","map":{"version":3,"mappings":"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","names":["clsx","React","SelectionControl","focusMarkers","fireNonCancelableEvent","getColumnKey","TableHeaderCell","Resizer","useColumnWidths","styles","headerCellStyles","Thead","forwardRef","_a","outerRef","containerWidth","selectionType","selectAllProps","columnDefinitions","sortingColumn","sortingDisabled","sortingDescending","resizableColumns","variant","wrapLines","onFocusMove","onCellFocus","onCellBlur","onSortingChange","onResizeFinish","_b","showFocusRing","_c","sticky","_d","hidden","_e","stuck","headerCellClass","selectionCellClass","columnWidths","totalWidth","updateColumn","className","all","ref","scope","onFocusDown","event","target","tabIndex","map","column","colIndex","widthOverride","length","key","style","width","minWidth","undefined","maxWidth","activeSortingColumn","resizer","onDragMove","newWidth","onFinish","onClick","detail","onFocus","onBlur"],"sources":["/Users/dcastro/node_modules/src/table/thead.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { TableProps } from './interfaces';\nimport SelectionControl, { SelectionControlProps } from './selection-control';\nimport { focusMarkers } from './use-selection';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../internal/events';\nimport { getColumnKey } from './utils';\nimport { TableHeaderCell } from './header-cell';\nimport { Resizer } from './resizer';\nimport { useColumnWidths } from './use-column-widths';\nimport styles from './styles.css.js';\nimport headerCellStyles from './header-cell/styles.css.js';\n\nexport interface TheadProps {\n  containerWidth: number | null;\n  selectionType: TableProps.SelectionType | undefined;\n  columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<any>>;\n  sortingColumn: TableProps.SortingColumn<any> | undefined;\n  sortingDescending: boolean | undefined;\n  sortingDisabled: boolean | undefined;\n  variant: TableProps.Variant;\n  wrapLines: boolean | undefined;\n  resizableColumns: boolean | undefined;\n  selectAllProps: SelectionControlProps;\n  onFocusMove: ((sourceElement: HTMLElement, fromIndex: number, direction: -1 | 1) => void) | undefined;\n  onCellFocus?: (colIndex: number) => void;\n  onCellBlur?: () => void;\n  onResizeFinish: (newWidths: Record<string, number>) => void;\n  showFocusRing?: number | null;\n  onSortingChange: NonCancelableEventHandler<TableProps.SortingState<any>> | undefined;\n  sticky?: boolean;\n  hidden?: boolean;\n  stuck?: boolean;\n}\n\nconst Thead = React.forwardRef(\n  (\n    {\n      containerWidth,\n      selectionType,\n      selectAllProps,\n      columnDefinitions,\n      sortingColumn,\n      sortingDisabled,\n      sortingDescending,\n      resizableColumns,\n      variant,\n      wrapLines,\n      onFocusMove,\n      onCellFocus,\n      onCellBlur,\n      onSortingChange,\n      onResizeFinish,\n      showFocusRing = null,\n      sticky = false,\n      hidden = false,\n      stuck = false,\n    }: TheadProps,\n    outerRef: React.Ref<HTMLTableRowElement>\n  ) => {\n    const headerCellClass = clsx(\n      headerCellStyles['header-cell'],\n      headerCellStyles[`header-cell-variant-${variant}`],\n      sticky && headerCellStyles['header-cell-sticky'],\n      stuck && headerCellStyles['header-cell-stuck']\n    );\n    const selectionCellClass = clsx(styles['selection-control'], styles['selection-control-header']);\n    const { columnWidths, totalWidth, updateColumn } = useColumnWidths();\n\n    return (\n      <thead className={clsx(!hidden && styles['thead-active'])}>\n        <tr {...focusMarkers.all} ref={outerRef}>\n          {selectionType === 'multi' && (\n            <th className={clsx(headerCellClass, selectionCellClass)} scope=\"col\">\n              <SelectionControl\n                onFocusDown={event => onFocusMove!(event.target as HTMLElement, -1, +1)}\n                {...selectAllProps}\n                {...(hidden ? { tabIndex: -1 } : {})}\n              />\n            </th>\n          )}\n          {selectionType === 'single' && (\n            <th className={clsx(headerCellClass, selectionCellClass)} scope=\"col\">\n              <span aria-hidden={true}>\n                {/*non-empty element to prevent table cell from collapsing in IE */}\n                &nbsp;\n              </span>\n            </th>\n          )}\n          {columnDefinitions.map((column, colIndex) => {\n            let widthOverride;\n            if (resizableColumns) {\n              if (columnWidths) {\n                // use stateful value if available\n                widthOverride = columnWidths[getColumnKey(column, colIndex)];\n              }\n              if (colIndex === columnDefinitions.length - 1 && containerWidth && containerWidth > totalWidth) {\n                // let the last column grow and fill the container width\n                widthOverride = 'auto';\n              }\n            }\n            return (\n              <TableHeaderCell\n                key={getColumnKey(column, colIndex)}\n                className={headerCellClass}\n                style={{\n                  width: widthOverride || column.width,\n                  minWidth: sticky ? undefined : column.minWidth,\n                  maxWidth: resizableColumns || sticky ? undefined : column.maxWidth,\n                }}\n                tabIndex={sticky ? -1 : 0}\n                showFocusRing={colIndex === showFocusRing}\n                column={column}\n                activeSortingColumn={sortingColumn}\n                sortingDescending={sortingDescending}\n                sortingDisabled={sortingDisabled}\n                wrapLines={wrapLines}\n                resizer={\n                  resizableColumns && (\n                    <Resizer\n                      onDragMove={newWidth => updateColumn(colIndex, newWidth)}\n                      onFinish={() => onResizeFinish(columnWidths)}\n                    />\n                  )\n                }\n                onClick={detail => fireNonCancelableEvent(onSortingChange, detail)}\n                onFocus={() => onCellFocus?.(colIndex)}\n                onBlur={onCellBlur}\n              />\n            );\n          })}\n        </tr>\n      </thead>\n    );\n  }\n);\n\nexport default Thead;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}