{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update';\nimport { Transition } from '../../internal/components/transition';\nimport { useObservedElement } from '../utils/use-observed-element';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * If there is no Split Panel in the AppLayout context then the SplitPanel\n * will pass through the AppLayout children without the context.\n */\nfunction SplitPanel(_a) {\n  var children = _a.children;\n  var _b = useContext(AppLayoutContext),\n    handleSplitPanelClick = _b.handleSplitPanelClick,\n    handleSplitPanelPreferencesChange = _b.handleSplitPanelPreferencesChange,\n    handleSplitPanelResize = _b.handleSplitPanelResize,\n    isMobile = _b.isMobile,\n    isSplitPanelForcedPosition = _b.isSplitPanelForcedPosition,\n    isSplitPanelOpen = _b.isSplitPanelOpen,\n    setSplitPanelReportedSize = _b.setSplitPanelReportedSize,\n    splitPanelPosition = _b.splitPanelPosition,\n    splitPanelSize = _b.splitPanelSize,\n    headerHeight = _b.headerHeight,\n    footerHeight = _b.footerHeight;\n  var _c = useState(undefined),\n    openButtonAriaLabel = _c[0],\n    setOpenButtonAriaLabel = _c[1];\n  var _d = useState(),\n    splitPanelLastInteraction = _d[0],\n    setSplitPanelLastInteraction = _d[1];\n  useEffectOnUpdate(function () {\n    return setSplitPanelLastInteraction(isSplitPanelOpen ? {\n      type: 'open'\n    } : {\n      type: 'close'\n    });\n  }, [isSplitPanelOpen]);\n  useEffectOnUpdate(function () {\n    return setSplitPanelLastInteraction({\n      type: 'position'\n    });\n  }, [splitPanelPosition]);\n  var splitPanelRef = useRef(null);\n  var splitPanelHeaderRef = useRef(null);\n  var context = {\n    bottomOffset: 0,\n    getMaxHeight: function () {\n      var availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n      // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    getMaxWidth: function () {\n      return document.documentElement.clientWidth;\n    },\n    getHeader: function () {\n      return splitPanelHeaderRef.current;\n    },\n    isForcedPosition: isSplitPanelForcedPosition,\n    isMobile: isMobile,\n    isOpen: isSplitPanelOpen,\n    isRefresh: true,\n    leftOffset: 0,\n    onPreferencesChange: handleSplitPanelPreferencesChange,\n    onResize: handleSplitPanelResize,\n    onToggle: handleSplitPanelClick,\n    position: splitPanelPosition,\n    reportSize: setSplitPanelReportedSize,\n    rightOffset: 0,\n    size: splitPanelSize || 0,\n    splitPanelRef: splitPanelRef,\n    splitPanelHeaderRef: splitPanelHeaderRef,\n    topOffset: 0,\n    openButtonAriaLabel: openButtonAriaLabel,\n    setOpenButtonAriaLabel: setOpenButtonAriaLabel,\n    lastInteraction: splitPanelLastInteraction\n  };\n  return React.createElement(SplitPanelContext.Provider, {\n    value: __assign({}, context)\n  }, children);\n}\n/**\n * This is the render function for the SplitPanel when it is in bottom position.\n * The Split Panel container will be another row entry in the grid definition in\n * the Layout component. The start and finish columns will be variable based\n * on the the presence and state of the Navigation and Tools components.\n */\nfunction SplitPanelBottom() {\n  var _a = useContext(AppLayoutContext),\n    disableBodyScroll = _a.disableBodyScroll,\n    isNavigationOpen = _a.isNavigationOpen,\n    isSplitPanelOpen = _a.isSplitPanelOpen,\n    isToolsOpen = _a.isToolsOpen,\n    splitPanel = _a.splitPanel,\n    splitPanelReportedSize = _a.splitPanelReportedSize;\n  var _b = useContext(SplitPanelContext),\n    splitPanelPosition = _b.position,\n    getHeader = _b.getHeader;\n  var headerHeight = useObservedElement(getHeader);\n  if (!splitPanel) {\n    return null;\n  }\n  return React.createElement(Transition, {\n    \"in\": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false,\n    exit: false\n  }, function (state, transitionEventsRef) {\n    var _a, _b;\n    return React.createElement(\"section\", {\n      className: clsx(styles['split-panel-bottom'], styles[\"position-\".concat(splitPanelPosition)], (_a = {}, _a[styles.animating] = state === 'entering', _a[styles['disable-body-scroll']] = disableBodyScroll, _a[styles['is-navigation-open']] = isNavigationOpen, _a[styles['is-split-panel-open']] = isSplitPanelOpen, _a[styles['is-tools-open']] = isToolsOpen, _a)),\n      ref: transitionEventsRef,\n      style: (_b = {}, _b[customCssProps.splitPanelReportedSize] = \"\".concat(splitPanelReportedSize, \"px\"), _b[customCssProps.splitPanelReportedHeaderSize] = \"\".concat(headerHeight, \"px\"), _b)\n    }, React.createElement(SplitPanel, null), splitPanelPosition === 'bottom' && splitPanel);\n  });\n}\n/**\n * This is the render function for the SplitPanel when it is side position.\n * The Split Panel will not be within the grid defined in the Layout component\n * but instead a direct child of the Tools component. The width constraints\n * for this position are computed in the Tools component.\n */\nfunction SplitPanelSide() {\n  var _a = useContext(AppLayoutContext),\n    isSplitPanelOpen = _a.isSplitPanelOpen,\n    splitPanel = _a.splitPanel,\n    splitPanelMaxWidth = _a.splitPanelMaxWidth,\n    splitPanelMinWidth = _a.splitPanelMinWidth,\n    splitPanelReportedSize = _a.splitPanelReportedSize;\n  var splitPanelPosition = useContext(SplitPanelContext).position;\n  if (!splitPanel) {\n    return null;\n  }\n  return React.createElement(Transition, {\n    \"in\": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false,\n    exit: false\n  }, function (state, transitionEventsRef) {\n    var _a, _b;\n    return React.createElement(\"section\", {\n      \"aria-hidden\": !isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false,\n      className: clsx(styles['split-panel-side'], styles[\"position-\".concat(splitPanelPosition)], (_a = {}, _a[styles.animating] = state === 'entering', _a[styles['is-split-panel-open']] = isSplitPanelOpen, _a)),\n      ref: transitionEventsRef,\n      style: (_b = {}, _b[customCssProps.splitPanelMaxWidth] = \"\".concat(splitPanelMaxWidth, \"px\"), _b[customCssProps.splitPanelMinWidth] = \"\".concat(splitPanelMinWidth, \"px\"), _b[customCssProps.splitPanelReportedHeaderSize] = \"\".concat(splitPanelReportedSize, \"px\"), _b)\n    }, React.createElement(\"div\", {\n      className: clsx(styles['animated-content'])\n    }, splitPanelPosition === 'side' && splitPanel));\n  });\n}\n/**\n * This logic will determine what the Split Panel position should be. It reconciles the possibility\n * of being in forced position with the current selected position in the settings.\n */\nexport function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {\n  var splitPanelPosition = 'bottom';\n  if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === 'side') {\n    splitPanelPosition = 'side';\n  }\n  return splitPanelPosition;\n}\nSplitPanel.Bottom = SplitPanelBottom;\nSplitPanel.Side = SplitPanelSide;\nexport default SplitPanel;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,gBAAgB,QAAQ,WAAW;AAC5C,SACEC,iBAAiB,QAGZ,4CAA4C;AACnD,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,SAASC,iBAAiB,QAAQ,2CAA2C;AAC7E,SAASC,UAAU,QAAQ,sCAAsC;AACjE,SAASC,kBAAkB,QAAQ,+BAA+B;AAClE,OAAOC,cAAc,MAAM,gDAAgD;AAE3E;;;;AAIA,SAASC,UAAU,CAACC,EAA8C;MAA5CC,QAAQ;EACtB,SAYFb,UAAU,CAACI,gBAAgB,CAAC;IAX9BU,qBAAqB;IACrBC,iCAAiC;IACjCC,sBAAsB;IACtBC,QAAQ;IACRC,0BAA0B;IAC1BC,gBAAgB;IAChBC,yBAAyB;IACzBC,kBAAkB;IAClBC,cAAc;IACdC,YAAY;IACZC,YAAY,kBACkB;EAE1B,SAAgDtB,QAAQ,CAAqBuB,SAAS,CAAC;IAAtFC,mBAAmB;IAAEC,sBAAsB,QAA2C;EAEvF,SAA4DzB,QAAQ,EAAyC;IAA5G0B,yBAAyB;IAAEC,4BAA4B,QAAqD;EACnHtB,iBAAiB,CACf;IAAM,mCAA4B,CAACY,gBAAgB,GAAG;MAAEW,IAAI,EAAE;IAAM,CAAE,GAAG;MAAEA,IAAI,EAAE;IAAO,CAAE,CAAC;EAArF,CAAqF,EAC3F,CAACX,gBAAgB,CAAC,CACnB;EACDZ,iBAAiB,CAAC;IAAM,mCAA4B,CAAC;MAAEuB,IAAI,EAAE;IAAU,CAAE,CAAC;EAAlD,CAAkD,EAAE,CAACT,kBAAkB,CAAC,CAAC;EAEjG,IAAMU,aAAa,GAAG9B,MAAM,CAAiB,IAAI,CAAC;EAClD,IAAM+B,mBAAmB,GAAG/B,MAAM,CAAiB,IAAI,CAAC;EAExD,IAAMgC,OAAO,GAA2B;IACtCC,YAAY,EAAE,CAAC;IACfC,YAAY,EAAE;MACZ,IAAMC,eAAe,GAAGC,QAAQ,CAACC,eAAe,CAACC,YAAY,GAAGhB,YAAY,GAAGC,YAAY;MAC3F;MACA,OAAOY,eAAe,GAAG,GAAG,GAAGA,eAAe,GAAG,EAAE,GAAGA,eAAe,GAAG,GAAG;IAC7E,CAAC;IACDI,WAAW,EAAE;MAAM,eAAQ,CAACF,eAAe,CAACG,WAAW;IAApC,CAAoC;IACvDC,SAAS,EAAE;MAAM,0BAAmB,CAACC,OAAO;IAA3B,CAA2B;IAC5CC,gBAAgB,EAAE1B,0BAA0B;IAC5CD,QAAQ;IACR4B,MAAM,EAAE1B,gBAAgB;IACxB2B,SAAS,EAAE,IAAI;IACfC,UAAU,EAAE,CAAC;IACbC,mBAAmB,EAAEjC,iCAAiC;IACtDkC,QAAQ,EAAEjC,sBAAsB;IAChCkC,QAAQ,EAAEpC,qBAAqB;IAC/BqC,QAAQ,EAAE9B,kBAAkB;IAC5B+B,UAAU,EAAEhC,yBAAyB;IACrCiC,WAAW,EAAE,CAAC;IACdC,IAAI,EAAEhC,cAAc,IAAI,CAAC;IACzBS,aAAa;IACbC,mBAAmB;IACnBuB,SAAS,EAAE,CAAC;IACZ7B,mBAAmB;IACnBC,sBAAsB;IACtB6B,eAAe,EAAE5B;GAClB;EAED,OAAO7B,oBAACM,iBAAiB,CAACoD,QAAQ;IAACC,KAAK,eAAOzB,OAAO;EAAA,GAAKpB,QAAQ,CAA8B;AACnG;AAEA;;;;;;AAMA,SAAS8C,gBAAgB;EACjB,SACJ3D,UAAU,CAACI,gBAAgB,CAAC;IADtBwD,iBAAiB;IAAEC,gBAAgB;IAAE1C,gBAAgB;IAAE2C,WAAW;IAAEC,UAAU;IAAEC,sBAAsB,4BAChF;EAExB,SAA8ChE,UAAU,CAACK,iBAAiB,CAAC;IAA/DgB,kBAAkB;IAAEqB,SAAS,eAAkC;EAEjF,IAAMnB,YAAY,GAAGd,kBAAkB,CAACiC,SAAS,CAAC;EAElD,IAAI,CAACqB,UAAU,EAAE;IACf,OAAO,IAAI;;EAGb,OACEhE,oBAACS,UAAU;IAAC,IAAE,EAAEW,gBAAgB,aAAhBA,gBAAgB,cAAhBA,gBAAgB,GAAI,KAAK;IAAE8C,IAAI,EAAE;EAAK,GACnD,UAACC,KAAK,EAAEC,mBAAmB;;IAAK,OAC/BpE;MACEqE,SAAS,EAAEjE,IAAI,CAACG,MAAM,CAAC,oBAAoB,CAAC,EAAEA,MAAM,CAAC,mBAAYe,kBAAkB,CAAE,CAAC,YACpFT,GAACN,MAAM,CAAC+D,SAAS,IAAGH,KAAK,KAAK,UAAU,EACxCtD,GAACN,MAAM,CAAC,qBAAqB,CAAC,IAAGsD,iBAAiB,EAClDhD,GAACN,MAAM,CAAC,oBAAoB,CAAC,IAAGuD,gBAAgB,EAChDjD,GAACN,MAAM,CAAC,qBAAqB,CAAC,IAAGa,gBAAgB,EACjDP,GAACN,MAAM,CAAC,eAAe,CAAC,IAAGwD,WAAW,MACtC;MACFQ,GAAG,EAAEH,mBAAmB;MACxBI,KAAK,YACHC,GAAC9D,cAAc,CAACsD,sBAAsB,IAAG,UAAGA,sBAAsB,OAAI,EACtEQ,GAAC9D,cAAc,CAAC+D,4BAA4B,IAAG,UAAGlD,YAAY,OAAI;OAGpExB,oBAACY,UAAU,OAAc,EACxBU,kBAAkB,KAAK,QAAQ,IAAI0C,UAAU,CACtC;EAjBqB,CAkBhC,CACU;AAEjB;AAEA;;;;;;AAMA,SAASW,cAAc;EACf,SACJ1E,UAAU,CAACI,gBAAgB,CAAC;IADtBe,gBAAgB;IAAE4C,UAAU;IAAEY,kBAAkB;IAAEC,kBAAkB;IAAEZ,sBAAsB,4BACtE;EAEtB,IAAU3C,kBAAkB,GAAKrB,UAAU,CAACK,iBAAiB,CAAC,SAAlC;EAEpC,IAAI,CAAC0D,UAAU,EAAE;IACf,OAAO,IAAI;;EAGb,OACEhE,oBAACS,UAAU;IAAC,IAAE,EAAEW,gBAAgB,aAAhBA,gBAAgB,cAAhBA,gBAAgB,GAAI,KAAK;IAAE8C,IAAI,EAAE;EAAK,GACnD,UAACC,KAAK,EAAEC,mBAAmB;;IAAK,OAC/BpE;MAAA,eACe,CAACoB,gBAAgB,IAAIE,kBAAkB,KAAK,QAAQ,GAAG,IAAI,GAAG,KAAK;MAChF+C,SAAS,EAAEjE,IAAI,CAACG,MAAM,CAAC,kBAAkB,CAAC,EAAEA,MAAM,CAAC,mBAAYe,kBAAkB,CAAE,CAAC,YAClFT,GAACN,MAAM,CAAC+D,SAAS,IAAGH,KAAK,KAAK,UAAU,EACxCtD,GAACN,MAAM,CAAC,qBAAqB,CAAC,IAAGa,gBAAgB,MACjD;MACFmD,GAAG,EAAEH,mBAAmB;MACxBI,KAAK,YACHC,GAAC9D,cAAc,CAACiE,kBAAkB,IAAG,UAAGA,kBAAkB,OAAI,EAC9DH,GAAC9D,cAAc,CAACkE,kBAAkB,IAAG,UAAGA,kBAAkB,OAAI,EAC9DJ,GAAC9D,cAAc,CAAC+D,4BAA4B,IAAG,UAAGT,sBAAsB,OAAI;OAG9EjE;MAAKqE,SAAS,EAAEjE,IAAI,CAACG,MAAM,CAAC,kBAAkB,CAAC;IAAC,GAAGe,kBAAkB,KAAK,MAAM,IAAI0C,UAAU,CAAO,CAC7F;EAfqB,CAgBhC,CACU;AAEjB;AAEA;;;;AAIA,OAAM,SAAUc,qBAAqB,CACnC3D,0BAAmC,EACnC4D,qBAAuE;EAEvE,IAAIzD,kBAAkB,GAAsC,QAAQ;EAEpE,IAAI,CAACH,0BAA0B,IAAI,sBAAqB,aAArB4D,qBAAqB,uBAArBA,qBAAqB,CAAE3B,QAAQ,MAAK,MAAM,EAAE;IAC7E9B,kBAAkB,GAAG,MAAM;;EAG7B,OAAOA,kBAAkB;AAC3B;AACAV,UAAU,CAACoE,MAAM,GAAGpB,gBAAgB;AACpChD,UAAU,CAACqE,IAAI,GAAGN,cAAc;AAEhC,eAAe/D,UAAU","names":["React","useContext","useRef","useState","clsx","AppLayoutContext","SplitPanelContext","styles","useEffectOnUpdate","Transition","useObservedElement","customCssProps","SplitPanel","_a","children","handleSplitPanelClick","handleSplitPanelPreferencesChange","handleSplitPanelResize","isMobile","isSplitPanelForcedPosition","isSplitPanelOpen","setSplitPanelReportedSize","splitPanelPosition","splitPanelSize","headerHeight","footerHeight","undefined","openButtonAriaLabel","setOpenButtonAriaLabel","splitPanelLastInteraction","setSplitPanelLastInteraction","type","splitPanelRef","splitPanelHeaderRef","context","bottomOffset","getMaxHeight","availableHeight","document","documentElement","clientHeight","getMaxWidth","clientWidth","getHeader","current","isForcedPosition","isOpen","isRefresh","leftOffset","onPreferencesChange","onResize","onToggle","position","reportSize","rightOffset","size","topOffset","lastInteraction","Provider","value","SplitPanelBottom","disableBodyScroll","isNavigationOpen","isToolsOpen","splitPanel","splitPanelReportedSize","exit","state","transitionEventsRef","className","animating","ref","style","_b","splitPanelReportedHeaderSize","SplitPanelSide","splitPanelMaxWidth","splitPanelMinWidth","getSplitPanelPosition","splitPanelPreferences","Bottom","Side"],"sources":["/Users/dcastro/node_modules/src/app-layout/visual-refresh/split-panel.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport {\n  SplitPanelContext,\n  SplitPanelContextProps,\n  SplitPanelLastInteraction,\n} from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport { AppLayoutProps } from '../interfaces';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update';\nimport { Transition } from '../../internal/components/transition';\nimport { useObservedElement } from '../utils/use-observed-element';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\n/**\n * If there is no Split Panel in the AppLayout context then the SplitPanel\n * will pass through the AppLayout children without the context.\n */\nfunction SplitPanel({ children }: React.PropsWithChildren<unknown>) {\n  const {\n    handleSplitPanelClick,\n    handleSplitPanelPreferencesChange,\n    handleSplitPanelResize,\n    isMobile,\n    isSplitPanelForcedPosition,\n    isSplitPanelOpen,\n    setSplitPanelReportedSize,\n    splitPanelPosition,\n    splitPanelSize,\n    headerHeight,\n    footerHeight,\n  } = useContext(AppLayoutContext);\n\n  const [openButtonAriaLabel, setOpenButtonAriaLabel] = useState<undefined | string>(undefined);\n\n  const [splitPanelLastInteraction, setSplitPanelLastInteraction] = useState<undefined | SplitPanelLastInteraction>();\n  useEffectOnUpdate(\n    () => setSplitPanelLastInteraction(isSplitPanelOpen ? { type: 'open' } : { type: 'close' }),\n    [isSplitPanelOpen]\n  );\n  useEffectOnUpdate(() => setSplitPanelLastInteraction({ type: 'position' }), [splitPanelPosition]);\n\n  const splitPanelRef = useRef<HTMLDivElement>(null);\n  const splitPanelHeaderRef = useRef<HTMLDivElement>(null);\n\n  const context: SplitPanelContextProps = {\n    bottomOffset: 0,\n    getMaxHeight: () => {\n      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n      // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    getMaxWidth: () => document.documentElement.clientWidth,\n    getHeader: () => splitPanelHeaderRef.current,\n    isForcedPosition: isSplitPanelForcedPosition,\n    isMobile,\n    isOpen: isSplitPanelOpen,\n    isRefresh: true,\n    leftOffset: 0,\n    onPreferencesChange: handleSplitPanelPreferencesChange,\n    onResize: handleSplitPanelResize,\n    onToggle: handleSplitPanelClick,\n    position: splitPanelPosition,\n    reportSize: setSplitPanelReportedSize,\n    rightOffset: 0,\n    size: splitPanelSize || 0,\n    splitPanelRef,\n    splitPanelHeaderRef,\n    topOffset: 0,\n    openButtonAriaLabel,\n    setOpenButtonAriaLabel,\n    lastInteraction: splitPanelLastInteraction,\n  };\n\n  return <SplitPanelContext.Provider value={{ ...context }}>{children}</SplitPanelContext.Provider>;\n}\n\n/**\n * This is the render function for the SplitPanel when it is in bottom position.\n * The Split Panel container will be another row entry in the grid definition in\n * the Layout component. The start and finish columns will be variable based\n * on the the presence and state of the Navigation and Tools components.\n */\nfunction SplitPanelBottom() {\n  const { disableBodyScroll, isNavigationOpen, isSplitPanelOpen, isToolsOpen, splitPanel, splitPanelReportedSize } =\n    useContext(AppLayoutContext);\n\n  const { position: splitPanelPosition, getHeader } = useContext(SplitPanelContext);\n\n  const headerHeight = useObservedElement(getHeader);\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return (\n    <Transition in={isSplitPanelOpen ?? false} exit={false}>\n      {(state, transitionEventsRef) => (\n        <section\n          className={clsx(styles['split-panel-bottom'], styles[`position-${splitPanelPosition}`], {\n            [styles.animating]: state === 'entering',\n            [styles['disable-body-scroll']]: disableBodyScroll,\n            [styles['is-navigation-open']]: isNavigationOpen,\n            [styles['is-split-panel-open']]: isSplitPanelOpen,\n            [styles['is-tools-open']]: isToolsOpen,\n          })}\n          ref={transitionEventsRef}\n          style={{\n            [customCssProps.splitPanelReportedSize]: `${splitPanelReportedSize}px`,\n            [customCssProps.splitPanelReportedHeaderSize]: `${headerHeight}px`,\n          }}\n        >\n          <SplitPanel></SplitPanel>\n          {splitPanelPosition === 'bottom' && splitPanel}\n        </section>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * This is the render function for the SplitPanel when it is side position.\n * The Split Panel will not be within the grid defined in the Layout component\n * but instead a direct child of the Tools component. The width constraints\n * for this position are computed in the Tools component.\n */\nfunction SplitPanelSide() {\n  const { isSplitPanelOpen, splitPanel, splitPanelMaxWidth, splitPanelMinWidth, splitPanelReportedSize } =\n    useContext(AppLayoutContext);\n\n  const { position: splitPanelPosition } = useContext(SplitPanelContext);\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return (\n    <Transition in={isSplitPanelOpen ?? false} exit={false}>\n      {(state, transitionEventsRef) => (\n        <section\n          aria-hidden={!isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false}\n          className={clsx(styles['split-panel-side'], styles[`position-${splitPanelPosition}`], {\n            [styles.animating]: state === 'entering',\n            [styles['is-split-panel-open']]: isSplitPanelOpen,\n          })}\n          ref={transitionEventsRef}\n          style={{\n            [customCssProps.splitPanelMaxWidth]: `${splitPanelMaxWidth}px`,\n            [customCssProps.splitPanelMinWidth]: `${splitPanelMinWidth}px`,\n            [customCssProps.splitPanelReportedHeaderSize]: `${splitPanelReportedSize}px`,\n          }}\n        >\n          <div className={clsx(styles['animated-content'])}>{splitPanelPosition === 'side' && splitPanel}</div>\n        </section>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * This logic will determine what the Split Panel position should be. It reconciles the possibility\n * of being in forced position with the current selected position in the settings.\n */\nexport function getSplitPanelPosition(\n  isSplitPanelForcedPosition: boolean,\n  splitPanelPreferences: AppLayoutProps.SplitPanelPreferences | undefined\n) {\n  let splitPanelPosition: AppLayoutProps.SplitPanelPosition = 'bottom';\n\n  if (!isSplitPanelForcedPosition && splitPanelPreferences?.position === 'side') {\n    splitPanelPosition = 'side';\n  }\n\n  return splitPanelPosition;\n}\nSplitPanel.Bottom = SplitPanelBottom;\nSplitPanel.Side = SplitPanelSide;\n\nexport default SplitPanel;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}