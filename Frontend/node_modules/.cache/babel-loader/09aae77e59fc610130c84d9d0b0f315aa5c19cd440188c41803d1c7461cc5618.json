{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport Option from '../../internal/components/option';\nimport SelectableItem from '../../internal/components/selectable-item';\nimport { getBaseProps } from '../../internal/base-component';\nimport CheckboxIcon from '../../internal/components/checkbox-icon';\nimport InternalIcon from '../../icon/internal.js';\nvar Item = function (_a, ref) {\n  var option = _a.option,\n    highlighted = _a.highlighted,\n    selected = _a.selected,\n    filteringValue = _a.filteringValue,\n    hasCheckbox = _a.hasCheckbox,\n    virtualPosition = _a.virtualPosition,\n    padBottom = _a.padBottom,\n    isNextSelected = _a.isNextSelected,\n    screenReaderContent = _a.screenReaderContent,\n    ariaPosinset = _a.ariaPosinset,\n    ariaSetsize = _a.ariaSetsize,\n    highlightType = _a.highlightType,\n    restProps = __rest(_a, [\"option\", \"highlighted\", \"selected\", \"filteringValue\", \"hasCheckbox\", \"virtualPosition\", \"padBottom\", \"isNextSelected\", \"screenReaderContent\", \"ariaPosinset\", \"ariaSetsize\", \"highlightType\"]);\n  var baseProps = getBaseProps(restProps);\n  var isParent = option.type === 'parent';\n  var isChild = option.type === 'child';\n  var wrappedOption = option.option;\n  var disabled = option.disabled || wrappedOption.disabled;\n  return React.createElement(SelectableItem, __assign({\n    ariaSelected: Boolean(selected),\n    selected: selected,\n    isNextSelected: isNextSelected,\n    highlighted: highlighted,\n    disabled: option.disabled,\n    isParent: isParent,\n    isChild: isChild,\n    ref: ref,\n    virtualPosition: virtualPosition,\n    padBottom: padBottom,\n    screenReaderContent: screenReaderContent,\n    ariaPosinset: ariaPosinset,\n    ariaSetsize: ariaSetsize,\n    highlightType: highlightType\n  }, baseProps), React.createElement(\"div\", {\n    className: clsx(styles.item, !isParent && wrappedOption.labelTag && styles['show-label-tag'])\n  }, hasCheckbox && !isParent && React.createElement(\"div\", {\n    className: styles.checkbox\n  }, React.createElement(CheckboxIcon, {\n    checked: selected || false,\n    disabled: option.disabled\n  })), isParent ? wrappedOption.label || wrappedOption.value : React.createElement(Option, {\n    option: __assign(__assign({}, wrappedOption), {\n      disabled: disabled\n    }),\n    highlightText: filteringValue\n  }), !hasCheckbox && !isParent && selected && React.createElement(\"div\", {\n    className: styles['selected-icon']\n  }, React.createElement(InternalIcon, {\n    name: \"check\"\n  }))));\n};\nexport default React.memo(React.forwardRef(Item));","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,MAAM,MAAM,kCAAkC;AACrD,OAAOC,cAAc,MAAM,2CAA2C;AACtE,SAASC,YAAY,QAAQ,+BAA+B;AAE5D,OAAOC,YAAY,MAAM,yCAAyC;AAClE,OAAOC,YAAY,MAAM,wBAAwB;AAkBjD,IAAMC,IAAI,GAAG,UACXC,EAcY,EACZC,GAA8B;EAd5B,UAAM;IACNC,WAAW;IACXC,QAAQ;IACRC,cAAc;IACdC,WAAW;IACXC,eAAe;IACfC,SAAS;IACTC,cAAc;IACdC,mBAAmB;IACnBC,YAAY;IACZC,WAAW;IACXC,aAAa;IACVC,SAAS,cAbd,+LAcC,CADa;EAId,IAAMC,SAAS,GAAGlB,YAAY,CAACiB,SAAS,CAAC;EAEzC,IAAME,QAAQ,GAAGC,MAAM,CAACC,IAAI,KAAK,QAAQ;EACzC,IAAMC,OAAO,GAAGF,MAAM,CAACC,IAAI,KAAK,OAAO;EACvC,IAAME,aAAa,GAAqBH,MAAM,CAACA,MAAM;EACrD,IAAMI,QAAQ,GAAGJ,MAAM,CAACI,QAAQ,IAAID,aAAa,CAACC,QAAQ;EAE1D,OACE7B,oBAACI,cAAc;IACb0B,YAAY,EAAEC,OAAO,CAACnB,QAAQ,CAAC;IAC/BA,QAAQ,EAAEA,QAAQ;IAClBK,cAAc,EAAEA,cAAc;IAC9BN,WAAW,EAAEA,WAAW;IACxBkB,QAAQ,EAAEJ,MAAM,CAACI,QAAQ;IACzBL,QAAQ,EAAEA,QAAQ;IAClBG,OAAO,EAAEA,OAAO;IAChBjB,GAAG,EAAEA,GAAG;IACRK,eAAe,EAAEA,eAAe;IAChCC,SAAS,EAAEA,SAAS;IACpBE,mBAAmB,EAAEA,mBAAmB;IACxCC,YAAY,EAAEA,YAAY;IAC1BC,WAAW,EAAEA,WAAW;IACxBC,aAAa,EAAEA;EAAa,GACxBE,SAAS,GAEbvB;IAAKgC,SAAS,EAAE/B,IAAI,CAACC,MAAM,CAAC+B,IAAI,EAAE,CAACT,QAAQ,IAAII,aAAa,CAACM,QAAQ,IAAIhC,MAAM,CAAC,gBAAgB,CAAC;EAAC,GAC/FY,WAAW,IAAI,CAACU,QAAQ,IACvBxB;IAAKgC,SAAS,EAAE9B,MAAM,CAACiC;EAAQ,GAC7BnC,oBAACM,YAAY;IAAC8B,OAAO,EAAExB,QAAQ,IAAI,KAAK;IAAEiB,QAAQ,EAAEJ,MAAM,CAACI;EAAQ,EAAI,CAE1E,EACAL,QAAQ,GACPI,aAAa,CAACS,KAAK,IAAIT,aAAa,CAACU,KAAK,GAE1CtC,oBAACG,MAAM;IAACsB,MAAM,wBAAOG,aAAa;MAAEC,QAAQ;IAAA;IAAIU,aAAa,EAAE1B;EAAc,EAC9E,EACA,CAACC,WAAW,IAAI,CAACU,QAAQ,IAAIZ,QAAQ,IACpCZ;IAAKgC,SAAS,EAAE9B,MAAM,CAAC,eAAe;EAAC,GACrCF,oBAACO,YAAY;IAACiC,IAAI,EAAC;EAAO,EAAG,CAEhC,CACG,CACS;AAErB,CAAC;AAED,eAAexC,KAAK,CAACyC,IAAI,CAACzC,KAAK,CAAC0C,UAAU,CAAClC,IAAI,CAAC,CAAC","names":["React","clsx","styles","Option","SelectableItem","getBaseProps","CheckboxIcon","InternalIcon","Item","_a","ref","highlighted","selected","filteringValue","hasCheckbox","virtualPosition","padBottom","isNextSelected","screenReaderContent","ariaPosinset","ariaSetsize","highlightType","restProps","baseProps","isParent","option","type","isChild","wrappedOption","disabled","ariaSelected","Boolean","className","item","labelTag","checkbox","checked","label","value","highlightText","name","memo","forwardRef"],"sources":["/Users/dcastro/node_modules/src/select/parts/item.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport Option from '../../internal/components/option';\nimport SelectableItem from '../../internal/components/selectable-item';\nimport { getBaseProps } from '../../internal/base-component';\nimport { DropdownOption, OptionDefinition } from '../../internal/components/option/interfaces';\nimport CheckboxIcon from '../../internal/components/checkbox-icon';\nimport InternalIcon from '../../icon/internal.js';\nimport { HighlightType } from '../../internal/components/options-list/utils/use-highlight-option.js';\n\nexport interface ItemProps {\n  option: DropdownOption;\n  highlighted?: boolean;\n  selected?: boolean;\n  filteringValue?: string;\n  hasCheckbox?: boolean;\n  virtualPosition?: number;\n  padBottom?: boolean;\n  isNextSelected?: boolean;\n  screenReaderContent?: string;\n  ariaPosinset?: number;\n  ariaSetsize?: number;\n  highlightType?: HighlightType;\n}\n\nconst Item = (\n  {\n    option,\n    highlighted,\n    selected,\n    filteringValue,\n    hasCheckbox,\n    virtualPosition,\n    padBottom,\n    isNextSelected,\n    screenReaderContent,\n    ariaPosinset,\n    ariaSetsize,\n    highlightType,\n    ...restProps\n  }: ItemProps,\n  ref: React.Ref<HTMLDivElement>\n) => {\n  const baseProps = getBaseProps(restProps);\n\n  const isParent = option.type === 'parent';\n  const isChild = option.type === 'child';\n  const wrappedOption: OptionDefinition = option.option;\n  const disabled = option.disabled || wrappedOption.disabled;\n\n  return (\n    <SelectableItem\n      ariaSelected={Boolean(selected)}\n      selected={selected}\n      isNextSelected={isNextSelected}\n      highlighted={highlighted}\n      disabled={option.disabled}\n      isParent={isParent}\n      isChild={isChild}\n      ref={ref}\n      virtualPosition={virtualPosition}\n      padBottom={padBottom}\n      screenReaderContent={screenReaderContent}\n      ariaPosinset={ariaPosinset}\n      ariaSetsize={ariaSetsize}\n      highlightType={highlightType}\n      {...baseProps}\n    >\n      <div className={clsx(styles.item, !isParent && wrappedOption.labelTag && styles['show-label-tag'])}>\n        {hasCheckbox && !isParent && (\n          <div className={styles.checkbox}>\n            <CheckboxIcon checked={selected || false} disabled={option.disabled} />\n          </div>\n        )}\n        {isParent ? (\n          wrappedOption.label || wrappedOption.value\n        ) : (\n          <Option option={{ ...wrappedOption, disabled }} highlightText={filteringValue} />\n        )}\n        {!hasCheckbox && !isParent && selected && (\n          <div className={styles['selected-icon']}>\n            <InternalIcon name=\"check\" />\n          </div>\n        )}\n      </div>\n    </SelectableItem>\n  );\n};\n\nexport default React.memo(React.forwardRef(Item));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}