{"ast":null,"code":"import { __spreadArray } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState } from 'react';\nimport InternalBox from '../box/internal';\nimport { InternalButton } from '../button/internal';\nimport InternalCheckbox from '../checkbox/internal';\nimport InternalColumnLayout from '../column-layout/internal';\nimport InternalFormField from '../form-field/internal';\nimport InternalModal from '../modal/internal';\nimport InternalSelect from '../select/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport { FormFieldContext } from '../internal/context/form-field-context';\nimport { LightThemes, DarkThemes } from './ace-themes';\nexport default (function (props) {\n  var _a, _b, _c, _d;\n  var _e = useState((_b = (_a = props.preferences) === null || _a === void 0 ? void 0 : _a.wrapLines) !== null && _b !== void 0 ? _b : true),\n    wrapLines = _e[0],\n    setWrapLines = _e[1];\n  var _f = useState((_d = (_c = props.preferences) === null || _c === void 0 ? void 0 : _c.theme) !== null && _d !== void 0 ? _d : props.defaultTheme),\n    theme = _f[0],\n    setTheme = _f[1];\n  var _g = useState(function () {\n      return __spreadArray(__spreadArray([], LightThemes, true), DarkThemes, true).filter(function (t) {\n        return t.value === theme;\n      })[0];\n    }),\n    selectedThemeOption = _g[0],\n    setSelectedThemeOption = _g[1];\n  var onThemeSelected = function (e) {\n    setTheme(e.detail.selectedOption.value);\n    setSelectedThemeOption(e.detail.selectedOption);\n  };\n  return React.createElement(FormFieldContext.Provider, {\n    value: {}\n  }, React.createElement(InternalModal, {\n    size: \"medium\",\n    visible: true,\n    onDismiss: props.onDismiss,\n    header: props.i18nStrings.header,\n    closeAriaLabel: props.i18nStrings.cancel,\n    footer: React.createElement(InternalBox, {\n      float: \"right\"\n    }, React.createElement(InternalSpaceBetween, {\n      direction: \"horizontal\",\n      size: \"xs\"\n    }, React.createElement(InternalButton, {\n      onClick: props.onDismiss\n    }, props.i18nStrings.cancel), React.createElement(InternalButton, {\n      onClick: function () {\n        return props.onConfirm({\n          wrapLines: wrapLines,\n          theme: theme\n        });\n      },\n      variant: \"primary\"\n    }, props.i18nStrings.confirm)))\n  }, React.createElement(InternalColumnLayout, {\n    columns: 2,\n    variant: \"text-grid\"\n  }, React.createElement(\"div\", null, React.createElement(InternalCheckbox, {\n    checked: wrapLines,\n    onChange: function (e) {\n      return setWrapLines(e.detail.checked);\n    }\n  }, props.i18nStrings.wrapLines)), React.createElement(\"div\", null, React.createElement(InternalFormField, {\n    label: props.i18nStrings.theme\n  }, React.createElement(InternalSelect, {\n    selectedOption: selectedThemeOption,\n    onChange: onThemeSelected,\n    options: [{\n      label: props.i18nStrings.lightThemes,\n      options: LightThemes\n    }, {\n      label: props.i18nStrings.darkThemes,\n      options: DarkThemes\n    }],\n    filteringType: \"auto\"\n  }))))));\n});","map":{"version":3,"mappings":"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","names":["React","useState","InternalBox","InternalButton","InternalCheckbox","InternalColumnLayout","InternalFormField","InternalModal","InternalSelect","InternalSpaceBetween","FormFieldContext","LightThemes","DarkThemes","props","preferences","wrapLines","setWrapLines","theme","defaultTheme","setTheme","filter","value","selectedThemeOption","setSelectedThemeOption","onThemeSelected","e","detail","selectedOption","Provider","size","visible","onDismiss","header","i18nStrings","closeAriaLabel","cancel","footer","float","direction","onClick","onConfirm","variant","confirm","columns","checked","onChange","label","options","lightThemes","darkThemes","filteringType"],"sources":["/Users/dcastro/node_modules/src/code-editor/preferences-modal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState } from 'react';\n\nimport InternalBox from '../box/internal';\nimport { InternalButton } from '../button/internal';\nimport InternalCheckbox from '../checkbox/internal';\nimport InternalColumnLayout from '../column-layout/internal';\nimport InternalFormField from '../form-field/internal';\nimport InternalModal from '../modal/internal';\nimport { SelectProps } from '../select/interfaces';\nimport InternalSelect from '../select/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport { FormFieldContext } from '../internal/context/form-field-context';\nimport { NonCancelableCustomEvent } from '../internal/events';\nimport { LightThemes, DarkThemes } from './ace-themes';\nimport { CodeEditorProps } from './interfaces';\n\ninterface PreferencesModali18nStrings {\n  header: string;\n  cancel: string;\n  confirm: string;\n  wrapLines: string;\n  theme: string;\n  lightThemes: string;\n  darkThemes: string;\n}\n\ninterface PreferencesModalProps {\n  preferences?: Partial<CodeEditorProps.Preferences>;\n\n  i18nStrings: PreferencesModali18nStrings;\n\n  defaultTheme: CodeEditorProps.Theme;\n\n  onConfirm: (preferences: CodeEditorProps.Preferences) => void;\n  onDismiss: () => void;\n}\n\nexport default (props: PreferencesModalProps) => {\n  const [wrapLines, setWrapLines] = useState<boolean>(props.preferences?.wrapLines ?? true);\n  const [theme, setTheme] = useState<CodeEditorProps.Theme>(props.preferences?.theme ?? props.defaultTheme);\n  const [selectedThemeOption, setSelectedThemeOption] = useState<SelectProps.Option>(\n    () => [...LightThemes, ...DarkThemes].filter(t => t.value === theme)[0]\n  );\n\n  const onThemeSelected = (e: NonCancelableCustomEvent<SelectProps.ChangeDetail>) => {\n    setTheme(e.detail.selectedOption.value as CodeEditorProps.Theme);\n    setSelectedThemeOption(e.detail.selectedOption);\n  };\n\n  return (\n    <FormFieldContext.Provider value={{}}>\n      <InternalModal\n        size=\"medium\"\n        visible={true}\n        onDismiss={props.onDismiss}\n        header={props.i18nStrings.header}\n        closeAriaLabel={props.i18nStrings.cancel}\n        footer={\n          <InternalBox float=\"right\">\n            <InternalSpaceBetween direction=\"horizontal\" size=\"xs\">\n              <InternalButton onClick={props.onDismiss}>{props.i18nStrings.cancel}</InternalButton>\n              <InternalButton onClick={() => props.onConfirm({ wrapLines, theme })} variant=\"primary\">\n                {props.i18nStrings.confirm}\n              </InternalButton>\n            </InternalSpaceBetween>\n          </InternalBox>\n        }\n      >\n        <InternalColumnLayout columns={2} variant=\"text-grid\">\n          <div>\n            <InternalCheckbox checked={wrapLines} onChange={e => setWrapLines(e.detail.checked)}>\n              {props.i18nStrings.wrapLines}\n            </InternalCheckbox>\n          </div>\n          <div>\n            <InternalFormField label={props.i18nStrings.theme}>\n              <InternalSelect\n                selectedOption={selectedThemeOption}\n                onChange={onThemeSelected}\n                options={[\n                  { label: props.i18nStrings.lightThemes, options: LightThemes },\n                  { label: props.i18nStrings.darkThemes, options: DarkThemes },\n                ]}\n                filteringType=\"auto\"\n              />\n            </InternalFormField>\n          </div>\n        </InternalColumnLayout>\n      </InternalModal>\n    </FormFieldContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}