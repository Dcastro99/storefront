{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useRef, useState, useImperativeHandle } from 'react';\nimport clsx from 'clsx';\nimport { KeyCode } from '../internal/keycode';\nimport { getBaseProps } from '../internal/base-component';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport Arrow from './arrow';\nimport Portal from '../internal/components/portal';\nimport PopoverContainer from './container';\nimport PopoverBody from './body';\nimport styles from './styles.css.js';\nimport { fireNonCancelableEvent } from '../internal/events/index';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { usePortalModeClasses } from '../internal/hooks/use-portal-mode-classes';\nexport default React.forwardRef(InternalPopover);\nfunction InternalPopover(_a, ref) {\n  var _b = _a.position,\n    position = _b === void 0 ? 'right' : _b,\n    _c = _a.size,\n    size = _c === void 0 ? 'medium' : _c,\n    _d = _a.fixedWidth,\n    fixedWidth = _d === void 0 ? false : _d,\n    _e = _a.triggerType,\n    triggerType = _e === void 0 ? 'text' : _e,\n    _f = _a.dismissButton,\n    dismissButton = _f === void 0 ? true : _f,\n    dismissAriaLabel = _a.dismissAriaLabel,\n    children = _a.children,\n    header = _a.header,\n    content = _a.content,\n    _g = _a.renderWithPortal,\n    renderWithPortal = _g === void 0 ? false : _g,\n    __onOpen = _a.__onOpen,\n    _h = _a.__internalRootRef,\n    __internalRootRef = _h === void 0 ? null : _h,\n    restProps = __rest(_a, [\"position\", \"size\", \"fixedWidth\", \"triggerType\", \"dismissButton\", \"dismissAriaLabel\", \"children\", \"header\", \"content\", \"renderWithPortal\", \"__onOpen\", \"__internalRootRef\"]);\n  var baseProps = getBaseProps(restProps);\n  var focusVisible = useFocusVisible();\n  var triggerRef = useRef(null);\n  var popoverRef = useRef(null);\n  var clickFrameId = useRef(null);\n  var _j = useState(false),\n    visible = _j[0],\n    setVisible = _j[1];\n  var onTriggerClick = useCallback(function () {\n    fireNonCancelableEvent(__onOpen);\n    setVisible(true);\n  }, [__onOpen]);\n  var onDismiss = useCallback(function () {\n    setVisible(false);\n  }, []);\n  var onTriggerKeyDown = useCallback(function (event) {\n    if (event.keyCode === KeyCode.tab || event.keyCode === KeyCode.escape) {\n      setVisible(false);\n    }\n  }, []);\n  useImperativeHandle(ref, function () {\n    return {\n      dismissPopover: onDismiss\n    };\n  });\n  useEffect(function () {\n    if (!triggerRef.current) {\n      return;\n    }\n    var document = triggerRef.current.ownerDocument;\n    var onDocumentClick = function () {\n      // Dismiss popover unless there was a click inside within the last animation frame.\n      if (clickFrameId.current === null) {\n        setVisible(false);\n      }\n    };\n    // useCapture=false makes sure this listener is called after the one attached to the element.\n    // the options.capture notation is unsupported by IE.\n    document.addEventListener('mousedown', onDocumentClick, false);\n    return function () {\n      document.removeEventListener('mousedown', onDocumentClick, false);\n    };\n  }, []);\n  var popoverClasses = usePortalModeClasses(triggerRef);\n  var triggerProps = {\n    // https://github.com/microsoft/TypeScript/issues/36659\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ref: triggerRef,\n    onClick: onTriggerClick,\n    onKeyDown: onTriggerKeyDown,\n    className: clsx(styles.trigger, styles[\"trigger-type-\".concat(triggerType)])\n  };\n  var popoverContent = React.createElement(\"div\", {\n    \"aria-live\": dismissButton ? undefined : 'polite',\n    \"aria-atomic\": dismissButton ? undefined : true,\n    className: clsx(popoverClasses, styles['popover-content'])\n  }, visible && React.createElement(PopoverContainer, {\n    size: size,\n    fixedWidth: fixedWidth,\n    position: position,\n    trackRef: triggerRef,\n    arrow: function (position) {\n      return React.createElement(Arrow, {\n        position: position\n      });\n    },\n    renderWithPortal: renderWithPortal,\n    zIndex: renderWithPortal ? 7000 : undefined\n  }, React.createElement(PopoverBody, {\n    dismissButton: dismissButton,\n    dismissAriaLabel: dismissAriaLabel,\n    header: header,\n    onDismiss: onDismiss,\n    overflowVisible: \"both\"\n  }, content)));\n  var mergedRef = useMergeRefs(popoverRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: mergedRef,\n    onMouseDown: function () {\n      // Indicate there was a click inside popover recently, including nested portals.\n      clickFrameId.current = requestAnimationFrame(function () {\n        clickFrameId.current = null;\n      });\n    }\n  }), triggerType === 'text' ? React.createElement(\"button\", __assign({}, triggerProps, {\n    type: \"button\",\n    \"aria-haspopup\": \"dialog\"\n  }, focusVisible), React.createElement(\"span\", {\n    className: styles['trigger-inner-text']\n  }, children)) : React.createElement(\"span\", __assign({}, triggerProps), children), renderWithPortal ? React.createElement(Portal, null, popoverContent) : popoverContent);\n}","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useRef","useState","useImperativeHandle","clsx","KeyCode","getBaseProps","useFocusVisible","Arrow","Portal","PopoverContainer","PopoverBody","styles","fireNonCancelableEvent","useMergeRefs","usePortalModeClasses","forwardRef","InternalPopover","_a","ref","position","_c","size","_d","fixedWidth","_e","triggerType","_f","dismissButton","dismissAriaLabel","children","header","content","_g","renderWithPortal","__onOpen","_h","__internalRootRef","restProps","baseProps","focusVisible","triggerRef","popoverRef","clickFrameId","visible","setVisible","onTriggerClick","onDismiss","onTriggerKeyDown","event","keyCode","tab","escape","dismissPopover","current","document","ownerDocument","onDocumentClick","addEventListener","removeEventListener","popoverClasses","triggerProps","onClick","onKeyDown","className","trigger","popoverContent","undefined","trackRef","arrow","zIndex","overflowVisible","mergedRef","root","onMouseDown","requestAnimationFrame","type"],"sources":["/Users/dcastro/node_modules/src/popover/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useRef, useState, useImperativeHandle } from 'react';\nimport clsx from 'clsx';\n\nimport { KeyCode } from '../internal/keycode';\nimport { getBaseProps } from '../internal/base-component';\nimport useFocusVisible from '../internal/hooks/focus-visible';\n\nimport Arrow from './arrow';\nimport Portal from '../internal/components/portal';\nimport { PopoverProps } from './interfaces';\nimport PopoverContainer from './container';\nimport PopoverBody from './body';\n\nimport styles from './styles.css.js';\nimport { NonCancelableEventHandler, fireNonCancelableEvent } from '../internal/events/index';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { usePortalModeClasses } from '../internal/hooks/use-portal-mode-classes';\n\nexport interface InternalPopoverProps extends PopoverProps, InternalBaseComponentProps {\n  __onOpen?: NonCancelableEventHandler<null>;\n}\n\nexport interface InternalPopoverRef {\n  dismissPopover: () => void;\n}\n\nexport default React.forwardRef(InternalPopover);\n\nfunction InternalPopover(\n  {\n    position = 'right',\n    size = 'medium',\n    fixedWidth = false,\n    triggerType = 'text',\n    dismissButton = true,\n    dismissAriaLabel,\n\n    children,\n    header,\n    content,\n\n    renderWithPortal = false,\n\n    __onOpen,\n    __internalRootRef = null,\n    ...restProps\n  }: InternalPopoverProps,\n  ref: React.Ref<InternalPopoverRef>\n) {\n  const baseProps = getBaseProps(restProps);\n  const focusVisible = useFocusVisible();\n  const triggerRef = useRef<HTMLElement | null>(null);\n  const popoverRef = useRef<HTMLDivElement | null>(null);\n  const clickFrameId = useRef<number | null>(null);\n\n  const [visible, setVisible] = useState(false);\n\n  const onTriggerClick = useCallback(() => {\n    fireNonCancelableEvent(__onOpen);\n    setVisible(true);\n  }, [__onOpen]);\n\n  const onDismiss = useCallback(() => {\n    setVisible(false);\n  }, []);\n\n  const onTriggerKeyDown = useCallback((event: React.KeyboardEvent) => {\n    if (event.keyCode === KeyCode.tab || event.keyCode === KeyCode.escape) {\n      setVisible(false);\n    }\n  }, []);\n\n  useImperativeHandle(ref, () => ({\n    dismissPopover: onDismiss,\n  }));\n\n  useEffect(() => {\n    if (!triggerRef.current) {\n      return;\n    }\n    const document = triggerRef.current.ownerDocument;\n\n    const onDocumentClick = () => {\n      // Dismiss popover unless there was a click inside within the last animation frame.\n      if (clickFrameId.current === null) {\n        setVisible(false);\n      }\n    };\n\n    // useCapture=false makes sure this listener is called after the one attached to the element.\n    // the options.capture notation is unsupported by IE.\n    document.addEventListener('mousedown', onDocumentClick, false);\n\n    return () => {\n      document.removeEventListener('mousedown', onDocumentClick, false);\n    };\n  }, []);\n\n  const popoverClasses = usePortalModeClasses(triggerRef);\n\n  const triggerProps = {\n    // https://github.com/microsoft/TypeScript/issues/36659\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ref: triggerRef as any,\n    onClick: onTriggerClick,\n    onKeyDown: onTriggerKeyDown,\n    className: clsx(styles.trigger, styles[`trigger-type-${triggerType}`]),\n  };\n\n  const popoverContent = (\n    <div\n      aria-live={dismissButton ? undefined : 'polite'}\n      aria-atomic={dismissButton ? undefined : true}\n      className={clsx(popoverClasses, styles['popover-content'])}\n    >\n      {visible && (\n        <PopoverContainer\n          size={size}\n          fixedWidth={fixedWidth}\n          position={position}\n          trackRef={triggerRef}\n          arrow={position => <Arrow position={position} />}\n          renderWithPortal={renderWithPortal}\n          zIndex={renderWithPortal ? 7000 : undefined}\n        >\n          <PopoverBody\n            dismissButton={dismissButton}\n            dismissAriaLabel={dismissAriaLabel}\n            header={header}\n            onDismiss={onDismiss}\n            overflowVisible=\"both\"\n          >\n            {content}\n          </PopoverBody>\n        </PopoverContainer>\n      )}\n    </div>\n  );\n\n  const mergedRef = useMergeRefs(popoverRef, __internalRootRef);\n\n  return (\n    <div\n      {...baseProps}\n      className={clsx(styles.root, baseProps.className)}\n      ref={mergedRef}\n      onMouseDown={() => {\n        // Indicate there was a click inside popover recently, including nested portals.\n        clickFrameId.current = requestAnimationFrame(() => {\n          clickFrameId.current = null;\n        });\n      }}\n    >\n      {triggerType === 'text' ? (\n        <button {...triggerProps} type=\"button\" aria-haspopup=\"dialog\" {...focusVisible}>\n          <span className={styles['trigger-inner-text']}>{children}</span>\n        </button>\n      ) : (\n        <span {...triggerProps}>{children}</span>\n      )}\n      {renderWithPortal ? <Portal>{popoverContent}</Portal> : popoverContent}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}