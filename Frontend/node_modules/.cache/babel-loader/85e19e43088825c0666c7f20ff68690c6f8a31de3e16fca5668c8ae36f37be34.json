{"ast":null,"code":"import { isInteractive, isGroupInteractive, isGroup } from '../../internal/components/option/utils/filter-options';\nimport { useEffect, useRef } from 'react';\nimport { useHighlightedOption } from '../../internal/components/options-list/utils/use-highlight-option';\nimport { useOpenState } from '../../internal/components/options-list/utils/use-open-state';\nimport { useMenuKeyboard, useTriggerKeyboard } from '../../internal/components/options-list/utils/use-keyboard';\nimport { useIds, getOptionId } from '../../internal/components/options-list/utils/use-ids';\nimport { connectOptionsByValue } from './connect-options';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport { fireCancelableEvent } from '../../internal/events/index';\nimport { containsOrEqual } from '../../internal/utils/dom';\nexport function useSelect(_a) {\n  var selectedOptions = _a.selectedOptions,\n    updateSelectedOption = _a.updateSelectedOption,\n    options = _a.options,\n    filteringType = _a.filteringType,\n    onBlur = _a.onBlur,\n    onFocus = _a.onFocus,\n    externalRef = _a.externalRef,\n    keepOpen = _a.keepOpen,\n    fireLoadItems = _a.fireLoadItems,\n    setFilteringValue = _a.setFilteringValue,\n    _b = _a.useInteractiveGroups,\n    useInteractiveGroups = _b === void 0 ? false : _b;\n  var interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;\n  var isHighlightable = function (option) {\n    return !!option && (useInteractiveGroups || option.type !== 'parent');\n  };\n  var filterRef = useRef(null);\n  var triggerRef = useRef(null);\n  var menuRef = useRef(null);\n  var linkRef = useRef(null);\n  var hasFilter = filteringType !== 'none';\n  var activeRef = hasFilter ? filterRef : menuRef;\n  var isSelectingUsingSpace = useRef(false);\n  var __selectedOptions = connectOptionsByValue(options, selectedOptions);\n  var __selectedValuesSet = selectedOptions.reduce(function (selectedValuesSet, item) {\n    if (item.value) {\n      selectedValuesSet.add(item.value);\n    }\n    return selectedValuesSet;\n  }, new Set());\n  var _c = useHighlightedOption({\n      options: options,\n      isHighlightable: isHighlightable\n    }),\n    _d = _c[0],\n    highlightType = _d.highlightType,\n    highlightedOption = _d.highlightedOption,\n    highlightedIndex = _d.highlightedIndex,\n    _e = _c[1],\n    moveHighlightWithKeyboard = _e.moveHighlightWithKeyboard,\n    resetHighlightWithKeyboard = _e.resetHighlightWithKeyboard,\n    setHighlightedIndexWithMouse = _e.setHighlightedIndexWithMouse,\n    highlightOptionWithKeyboard = _e.highlightOptionWithKeyboard,\n    goHomeWithKeyboard = _e.goHomeWithKeyboard,\n    goEndWithKeyboard = _e.goEndWithKeyboard;\n  var _f = useOpenState({\n      onOpen: function () {\n        return fireLoadItems('');\n      },\n      onClose: function () {\n        resetHighlightWithKeyboard();\n        setFilteringValue('');\n      }\n    }),\n    isOpen = _f.isOpen,\n    openDropdown = _f.openDropdown,\n    closeDropdown = _f.closeDropdown,\n    toggleDropdown = _f.toggleDropdown;\n  var focused = useRef(false);\n  var handleFocus = function () {\n    if (!focused.current) {\n      fireCancelableEvent(onFocus, {});\n      focused.current = true;\n    }\n  };\n  var handleBlur = function (_a) {\n    var detail = _a.detail;\n    var relatedTarget = detail.relatedTarget;\n    var nextFocusedIsTrigger = relatedTarget ? containsOrEqual(triggerRef.current, relatedTarget) : false;\n    var nextFocusedInsideDropdown = relatedTarget ? containsOrEqual(menuRef.current, relatedTarget) || containsOrEqual(filterRef.current, relatedTarget) || containsOrEqual(linkRef.current, relatedTarget) : false;\n    var nextFocusedInsideComponent = nextFocusedIsTrigger || nextFocusedInsideDropdown;\n    var focusingOut = focused.current && !nextFocusedInsideComponent;\n    if (nextFocusedIsTrigger || focusingOut) {\n      closeDropdown();\n    }\n    if (focusingOut) {\n      fireCancelableEvent(onBlur, {});\n      focused.current = false;\n    }\n  };\n  var hasSelectedOption = __selectedOptions.length > 0;\n  var _g = useIds({\n      hasSelectedOption: hasSelectedOption\n    }),\n    selectedOptionId = _g.selectedOptionId,\n    menuId = _g.menuId;\n  var highlightedOptionId = getOptionId(menuId, highlightedIndex);\n  var selectOption = function (option) {\n    var _a;\n    isSelectingUsingSpace.current = false;\n    var optionToSelect = option || highlightedOption;\n    if (!optionToSelect || !interactivityCheck(optionToSelect)) {\n      return;\n    }\n    updateSelectedOption(optionToSelect.option);\n    if (!keepOpen) {\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      closeDropdown();\n    }\n  };\n  var activeKeyDownHandler = useMenuKeyboard({\n    moveHighlight: moveHighlightWithKeyboard,\n    selectOption: selectOption,\n    goHome: goHomeWithKeyboard,\n    goEnd: goEndWithKeyboard,\n    closeDropdown: function () {\n      var _a;\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      closeDropdown();\n    },\n    isSelectingUsingSpace: isSelectingUsingSpace,\n    preventNativeSpace: !hasFilter\n  });\n  var triggerKeyDownHandler = useTriggerKeyboard({\n    openDropdown: openDropdown,\n    goHome: goHomeWithKeyboard\n  });\n  var getTriggerProps = function (disabled) {\n    if (disabled === void 0) {\n      disabled = false;\n    }\n    var triggerProps = {\n      ref: triggerRef,\n      onFocus: handleFocus,\n      onBlur: handleBlur\n    };\n    if (!disabled) {\n      triggerProps.onMouseDown = function (event) {\n        var _a;\n        event.preventDefault(); // prevent current focus from blurring as it immediately closes the dropdown\n        if (isOpen) {\n          (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n        toggleDropdown();\n      };\n      triggerProps.onKeyDown = triggerKeyDownHandler;\n    }\n    if (hasSelectedOption) {\n      triggerProps.ariaLabelledby = selectedOptionId;\n    }\n    return triggerProps;\n  };\n  var getFilterProps = function () {\n    var _a;\n    if (!hasFilter) {\n      return {};\n    }\n    return {\n      ref: filterRef,\n      onKeyDown: activeKeyDownHandler,\n      __onBlurWithDetail: handleBlur,\n      onFocus: handleFocus,\n      onChange: function (event) {\n        setFilteringValue(event.detail.value);\n        resetHighlightWithKeyboard();\n      },\n      __onDelayedInput: function (event) {\n        fireLoadItems(event.detail.value);\n      },\n      __nativeAttributes: (_a = {\n        'aria-activedescendant': highlightedOptionId\n      }, _a['aria-owns'] = menuId, _a['aria-controls'] = menuId, _a)\n    };\n  };\n  var getRecoveryProps = function () {\n    return {\n      ref: linkRef,\n      onBlur: handleBlur\n    };\n  };\n  var getMenuProps = function () {\n    var menuProps = {\n      id: menuId,\n      ref: menuRef,\n      open: isOpen,\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      onMouseUp: function (itemIndex) {\n        if (itemIndex > -1) {\n          selectOption(options[itemIndex]);\n        }\n      },\n      onMouseMove: function (itemIndex) {\n        if (itemIndex > -1) {\n          setHighlightedIndexWithMouse(itemIndex);\n        }\n      }\n    };\n    if (!hasFilter) {\n      menuProps.onKeyDown = activeKeyDownHandler;\n      menuProps.onBlur = handleBlur;\n      menuProps.onFocus = handleFocus;\n      menuProps.nativeAttributes = {\n        'aria-activedescendant': highlightedOptionId\n      };\n    }\n    return menuProps;\n  };\n  var getGroupState = function (option) {\n    var totalSelected = option.options.filter(function (item) {\n      return !!item.value && __selectedValuesSet.has(item.value);\n    }).length;\n    var hasSelected = totalSelected > 0;\n    var allSelected = totalSelected === option.options.length;\n    return {\n      selected: hasSelected && allSelected,\n      indeterminate: hasSelected && !allSelected\n    };\n  };\n  var getOptionProps = function (option, index) {\n    var _a;\n    var _b;\n    var highlighted = option === highlightedOption;\n    var groupState = isGroup(option.option) ? getGroupState(option.option) : undefined;\n    var selected = __selectedOptions.indexOf(option) > -1 || !!(groupState === null || groupState === void 0 ? void 0 : groupState.selected);\n    var nextOption = (_b = options[index + 1]) === null || _b === void 0 ? void 0 : _b.option;\n    var isNextSelected = !!nextOption && isGroup(nextOption) ? getGroupState(nextOption).selected : __selectedOptions.indexOf(options[index + 1]) > -1;\n    var optionProps = (_a = {\n      key: index,\n      option: option,\n      highlighted: highlighted,\n      selected: selected,\n      isNextSelected: isNextSelected,\n      indeterminate: !!(groupState === null || groupState === void 0 ? void 0 : groupState.indeterminate)\n    }, _a['data-mouse-target'] = isHighlightable(option) ? index : -1, _a.id = getOptionId(menuId, index), _a);\n    return optionProps;\n  };\n  var prevOpen = usePrevious(isOpen);\n  useEffect(function () {\n    // highlight the first selected option, when opening the Select component\n    if (isOpen && !prevOpen && hasSelectedOption) {\n      setHighlightedIndexWithMouse(options.indexOf(__selectedOptions[0]));\n    }\n  }, [isOpen, __selectedOptions, hasSelectedOption, setHighlightedIndexWithMouse, options, prevOpen]);\n  useEffect(function () {\n    var _a;\n    if (isOpen) {\n      // dropdown-fit calculations ensure that the dropdown will fit inside the current\n      // viewport, so prevent the browser from trying to scroll it into view (e.g. if\n      // scroll-padding-top is set on a parent)\n      (_a = activeRef.current) === null || _a === void 0 ? void 0 : _a.focus({\n        preventScroll: true\n      });\n    }\n  }, [isOpen, activeRef]);\n  useForwardFocus(externalRef, triggerRef);\n  var highlightedGroupSelected = !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;\n  var announceSelected = !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);\n  return {\n    isOpen: isOpen,\n    highlightedOption: highlightedOption,\n    highlightedIndex: highlightedIndex,\n    highlightType: highlightType,\n    getTriggerProps: getTriggerProps,\n    getMenuProps: getMenuProps,\n    getFilterProps: getFilterProps,\n    getRecoveryProps: getRecoveryProps,\n    getOptionProps: getOptionProps,\n    highlightOption: highlightOptionWithKeyboard,\n    selectOption: selectOption,\n    announceSelected: announceSelected\n  };\n}","map":{"version":3,"mappings":"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","names":["isInteractive","isGroupInteractive","isGroup","useEffect","useRef","useHighlightedOption","useOpenState","useMenuKeyboard","useTriggerKeyboard","useIds","getOptionId","connectOptionsByValue","useForwardFocus","usePrevious","fireCancelableEvent","containsOrEqual","useSelect","_a","selectedOptions","updateSelectedOption","options","filteringType","onBlur","onFocus","externalRef","keepOpen","fireLoadItems","setFilteringValue","_b","useInteractiveGroups","interactivityCheck","isHighlightable","option","type","filterRef","triggerRef","menuRef","linkRef","hasFilter","activeRef","isSelectingUsingSpace","__selectedOptions","__selectedValuesSet","reduce","selectedValuesSet","item","value","add","Set","_d","highlightType","highlightedOption","highlightedIndex","_e","moveHighlightWithKeyboard","resetHighlightWithKeyboard","setHighlightedIndexWithMouse","highlightOptionWithKeyboard","goHomeWithKeyboard","goEndWithKeyboard","onOpen","onClose","isOpen","openDropdown","closeDropdown","toggleDropdown","focused","handleFocus","current","handleBlur","detail","nextFocusedIsTrigger","relatedTarget","nextFocusedInsideDropdown","nextFocusedInsideComponent","focusingOut","hasSelectedOption","length","selectedOptionId","menuId","highlightedOptionId","selectOption","optionToSelect","focus","activeKeyDownHandler","moveHighlight","goHome","goEnd","preventNativeSpace","triggerKeyDownHandler","getTriggerProps","disabled","triggerProps","ref","onMouseDown","event","preventDefault","onKeyDown","ariaLabelledby","getFilterProps","__onBlurWithDetail","onChange","__onDelayedInput","__nativeAttributes","getRecoveryProps","getMenuProps","menuProps","id","open","onMouseUp","itemIndex","onMouseMove","nativeAttributes","getGroupState","totalSelected","filter","has","hasSelected","allSelected","selected","indeterminate","getOptionProps","index","highlighted","groupState","undefined","indexOf","nextOption","isNextSelected","optionProps","key","prevOpen","preventScroll","highlightedGroupSelected","announceSelected","highlightOption"],"sources":["/Users/dcastro/node_modules/src/select/utils/use-select.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { RefObject } from 'react';\nimport { DropdownOption, OptionDefinition, OptionGroup } from '../../internal/components/option/interfaces';\nimport { isInteractive, isGroupInteractive, isGroup } from '../../internal/components/option/utils/filter-options';\nimport { useEffect, useRef, MutableRefObject } from 'react';\nimport { useHighlightedOption } from '../../internal/components/options-list/utils/use-highlight-option';\nimport { useOpenState } from '../../internal/components/options-list/utils/use-open-state';\nimport { useMenuKeyboard, useTriggerKeyboard } from '../../internal/components/options-list/utils/use-keyboard';\nimport { useIds, getOptionId } from '../../internal/components/options-list/utils/use-ids';\nimport { connectOptionsByValue } from './connect-options';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport { OptionsListProps } from '../../internal/components/options-list';\nimport { FilterProps } from '../parts/filter';\nimport { ItemProps } from '../parts/item';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport { BaseKeyDetail } from '../../internal/events';\nimport { CancelableEventHandler, fireCancelableEvent, NonCancelableEventHandler } from '../../internal/events/index';\nimport { containsOrEqual } from '../../internal/utils/dom';\n\nexport type MenuProps = Omit<OptionsListProps, 'children'> & { ref: React.RefObject<HTMLUListElement> };\nexport type GetOptionProps = (option: DropdownOption, index: number) => ItemProps;\n\ninterface UseSelectProps {\n  selectedOptions: ReadonlyArray<OptionDefinition>;\n  updateSelectedOption: (option: OptionDefinition) => void;\n  options: ReadonlyArray<DropdownOption>;\n  filteringType: string;\n  keepOpen?: boolean;\n  onBlur?: CancelableEventHandler;\n  onFocus?: CancelableEventHandler;\n  externalRef: React.Ref<any>;\n  fireLoadItems: (filteringText: string) => void;\n  setFilteringValue: (filteringText: string) => void;\n  useInteractiveGroups?: boolean;\n}\n\nexport interface SelectTriggerProps {\n  ref: RefObject<HTMLButtonElement>;\n  onMouseDown?: (event: CustomEvent) => void;\n  onKeyDown?: (event: CustomEvent<BaseKeyDetail>) => void;\n  ariaLabelledby?: string;\n  onFocus: NonCancelableEventHandler;\n  onBlur: CancelableEventHandler<{ relatedTarget: Node | null }>;\n}\n\nexport interface RecoveryLinkProp {\n  ref: RefObject<HTMLAnchorElement>;\n  onBlur: CancelableEventHandler<{ relatedTarget: Node | null }>;\n}\n\nexport function useSelect({\n  selectedOptions,\n  updateSelectedOption,\n  options,\n  filteringType,\n  onBlur,\n  onFocus,\n  externalRef,\n  keepOpen,\n  fireLoadItems,\n  setFilteringValue,\n  useInteractiveGroups = false,\n}: UseSelectProps) {\n  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;\n\n  const isHighlightable = (option?: DropdownOption) => !!option && (useInteractiveGroups || option.type !== 'parent');\n\n  const filterRef = useRef<HTMLInputElement>(null);\n  const triggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLUListElement>(null);\n  const linkRef = useRef<HTMLAnchorElement>(null);\n  const hasFilter = filteringType !== 'none';\n  const activeRef = hasFilter ? filterRef : menuRef;\n  const isSelectingUsingSpace = useRef<boolean>(false);\n  const __selectedOptions = connectOptionsByValue(options, selectedOptions);\n  const __selectedValuesSet = selectedOptions.reduce((selectedValuesSet: Set<string>, item: OptionDefinition) => {\n    if (item.value) {\n      selectedValuesSet.add(item.value);\n    }\n    return selectedValuesSet;\n  }, new Set<string>());\n  const [\n    { highlightType, highlightedOption, highlightedIndex },\n    {\n      moveHighlightWithKeyboard,\n      resetHighlightWithKeyboard,\n      setHighlightedIndexWithMouse,\n      highlightOptionWithKeyboard,\n      goHomeWithKeyboard,\n      goEndWithKeyboard,\n    },\n  ] = useHighlightedOption({ options, isHighlightable });\n\n  const { isOpen, openDropdown, closeDropdown, toggleDropdown } = useOpenState({\n    onOpen: () => fireLoadItems(''),\n    onClose: () => {\n      resetHighlightWithKeyboard();\n      setFilteringValue('');\n    },\n  });\n\n  const focused: MutableRefObject<boolean> = useRef<boolean>(false);\n  const handleFocus = () => {\n    if (!focused.current) {\n      fireCancelableEvent(onFocus, {});\n      focused.current = true;\n    }\n  };\n  const handleBlur = ({ detail }: { detail: { relatedTarget: Node | null } }) => {\n    const { relatedTarget } = detail;\n\n    const nextFocusedIsTrigger = relatedTarget ? containsOrEqual(triggerRef.current, relatedTarget) : false;\n    const nextFocusedInsideDropdown = relatedTarget\n      ? containsOrEqual(menuRef.current, relatedTarget) ||\n        containsOrEqual(filterRef.current, relatedTarget) ||\n        containsOrEqual(linkRef.current, relatedTarget)\n      : false;\n    const nextFocusedInsideComponent = nextFocusedIsTrigger || nextFocusedInsideDropdown;\n    const focusingOut = focused.current && !nextFocusedInsideComponent;\n\n    if (nextFocusedIsTrigger || focusingOut) {\n      closeDropdown();\n    }\n    if (focusingOut) {\n      fireCancelableEvent(onBlur, {});\n      focused.current = false;\n    }\n  };\n\n  const hasSelectedOption = __selectedOptions.length > 0;\n  const { selectedOptionId, menuId } = useIds({ hasSelectedOption });\n  const highlightedOptionId = getOptionId(menuId, highlightedIndex);\n\n  const selectOption = (option?: DropdownOption) => {\n    isSelectingUsingSpace.current = false;\n    const optionToSelect = option || highlightedOption;\n    if (!optionToSelect || !interactivityCheck(optionToSelect)) {\n      return;\n    }\n    updateSelectedOption(optionToSelect.option);\n    if (!keepOpen) {\n      triggerRef.current?.focus();\n      closeDropdown();\n    }\n  };\n\n  const activeKeyDownHandler = useMenuKeyboard({\n    moveHighlight: moveHighlightWithKeyboard,\n    selectOption,\n    goHome: goHomeWithKeyboard,\n    goEnd: goEndWithKeyboard,\n    closeDropdown: () => {\n      triggerRef.current?.focus();\n      closeDropdown();\n    },\n    isSelectingUsingSpace,\n    preventNativeSpace: !hasFilter,\n  });\n\n  const triggerKeyDownHandler = useTriggerKeyboard({ openDropdown, goHome: goHomeWithKeyboard });\n\n  const getTriggerProps = (disabled = false) => {\n    const triggerProps: SelectTriggerProps = {\n      ref: triggerRef,\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n    };\n    if (!disabled) {\n      triggerProps.onMouseDown = (event: CustomEvent) => {\n        event.preventDefault(); // prevent current focus from blurring as it immediately closes the dropdown\n        if (isOpen) {\n          triggerRef.current?.focus();\n        }\n        toggleDropdown();\n      };\n      triggerProps.onKeyDown = triggerKeyDownHandler;\n    }\n    if (hasSelectedOption) {\n      triggerProps.ariaLabelledby = selectedOptionId;\n    }\n    return triggerProps;\n  };\n\n  const getFilterProps = (): Partial<FilterProps> => {\n    if (!hasFilter) {\n      return {};\n    }\n\n    return {\n      ref: filterRef,\n      onKeyDown: activeKeyDownHandler,\n      __onBlurWithDetail: handleBlur,\n      onFocus: handleFocus,\n      onChange: event => {\n        setFilteringValue(event.detail.value);\n        resetHighlightWithKeyboard();\n      },\n      __onDelayedInput: event => {\n        fireLoadItems(event.detail.value);\n      },\n      __nativeAttributes: {\n        'aria-activedescendant': highlightedOptionId,\n        ['aria-owns']: menuId,\n        ['aria-controls']: menuId,\n      },\n    };\n  };\n\n  const getRecoveryProps = () => {\n    return {\n      ref: linkRef,\n      onBlur: handleBlur,\n    };\n  };\n\n  const getMenuProps = () => {\n    const menuProps: MenuProps = {\n      id: menuId,\n      ref: menuRef,\n      open: isOpen,\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      onMouseUp: itemIndex => {\n        if (itemIndex > -1) {\n          selectOption(options[itemIndex]);\n        }\n      },\n      onMouseMove: itemIndex => {\n        if (itemIndex > -1) {\n          setHighlightedIndexWithMouse(itemIndex);\n        }\n      },\n    };\n    if (!hasFilter) {\n      menuProps.onKeyDown = activeKeyDownHandler;\n      menuProps.onBlur = handleBlur;\n      menuProps.onFocus = handleFocus;\n      menuProps.nativeAttributes = {\n        'aria-activedescendant': highlightedOptionId,\n      };\n    }\n    return menuProps;\n  };\n  const getGroupState = (option: OptionGroup) => {\n    const totalSelected = option.options.filter(item => !!item.value && __selectedValuesSet.has(item.value)).length;\n    const hasSelected = totalSelected > 0;\n    const allSelected = totalSelected === option.options.length;\n    return {\n      selected: hasSelected && allSelected,\n      indeterminate: hasSelected && !allSelected,\n    };\n  };\n\n  const getOptionProps = (option: DropdownOption, index: number) => {\n    const highlighted = option === highlightedOption;\n    const groupState = isGroup(option.option) ? getGroupState(option.option) : undefined;\n    const selected = __selectedOptions.indexOf(option) > -1 || !!groupState?.selected;\n    const nextOption = options[index + 1]?.option;\n    const isNextSelected =\n      !!nextOption && isGroup(nextOption)\n        ? getGroupState(nextOption).selected\n        : __selectedOptions.indexOf(options[index + 1]) > -1;\n\n    const optionProps: any = {\n      key: index,\n      option,\n      highlighted,\n      selected,\n      isNextSelected,\n      indeterminate: !!groupState?.indeterminate,\n      ['data-mouse-target']: isHighlightable(option) ? index : -1,\n      id: getOptionId(menuId, index),\n    };\n\n    return optionProps;\n  };\n\n  const prevOpen = usePrevious<boolean>(isOpen);\n  useEffect(() => {\n    // highlight the first selected option, when opening the Select component\n    if (isOpen && !prevOpen && hasSelectedOption) {\n      setHighlightedIndexWithMouse(options.indexOf(__selectedOptions[0]));\n    }\n  }, [isOpen, __selectedOptions, hasSelectedOption, setHighlightedIndexWithMouse, options, prevOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // dropdown-fit calculations ensure that the dropdown will fit inside the current\n      // viewport, so prevent the browser from trying to scroll it into view (e.g. if\n      // scroll-padding-top is set on a parent)\n      activeRef.current?.focus({ preventScroll: true });\n    }\n  }, [isOpen, activeRef]);\n\n  useForwardFocus(externalRef, triggerRef as React.RefObject<HTMLElement>);\n  const highlightedGroupSelected =\n    !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;\n  const announceSelected =\n    !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);\n\n  return {\n    isOpen,\n    highlightedOption,\n    highlightedIndex,\n    highlightType,\n    getTriggerProps,\n    getMenuProps,\n    getFilterProps,\n    getRecoveryProps,\n    getOptionProps,\n    highlightOption: highlightOptionWithKeyboard,\n    selectOption,\n    announceSelected,\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}