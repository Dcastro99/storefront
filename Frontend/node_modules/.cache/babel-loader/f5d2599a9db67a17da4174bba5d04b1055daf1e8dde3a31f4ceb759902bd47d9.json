{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useContext } from 'react';\nimport { AppLayoutContext } from '../app-layout/visual-refresh/context';\nimport { useAppLayoutContext } from '../internal/context/app-layout-context';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useStickyScrollbar } from './use-sticky-scrollbar';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport styles from './styles.css.js';\nexport default forwardRef(StickyScrollbar);\nfunction StickyScrollbar(_a, ref) {\n  var wrapperRef = _a.wrapperRef,\n    tableRef = _a.tableRef,\n    onScroll = _a.onScroll;\n  var scrollbarRef = React.useRef(null);\n  var scrollbarContentRef = React.useRef(null);\n  var isRefresh = useVisualRefresh();\n  var mergedRef = useMergeRefs(ref, scrollbarRef);\n  /**\n   * Use the appropriate AppLayout context (Classic or Visual Refresh) to determine\n   * the offsetBottom value to be used in the useStickyScrollbar hook.\n   */\n  var offsetBottomClassic = useAppLayoutContext().stickyOffsetBottom;\n  var offsetBottomVisualRefresh = useContext(AppLayoutContext).offsetBottom;\n  var offsetBottom = isRefresh ? offsetBottomVisualRefresh : offsetBottomClassic;\n  useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, offsetBottom);\n  return React.createElement(\"div\", {\n    ref: mergedRef,\n    className: styles['sticky-scrollbar'],\n    onScroll: onScroll\n  }, React.createElement(\"div\", {\n    ref: scrollbarContentRef,\n    className: styles['sticky-scrollbar-content']\n  }));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,UAAU,QAAQ,OAAO;AACrD,SAASC,gBAAgB,QAAQ,sCAAsC;AACvE,SAASC,mBAAmB,QAAQ,wCAAwC;AAC5E,SAASC,YAAY,QAAQ,kCAAkC;AAC/D,SAASC,kBAAkB,QAAQ,wBAAwB;AAC3D,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,OAAOC,MAAM,MAAM,iBAAiB;AAQpC,eAAeP,UAAU,CAACQ,eAAe,CAAC;AAE1C,SAASA,eAAe,CAACC,EAAwD,EAAEC,GAA8B;MAAtFC,UAAU;IAAEC,QAAQ;IAAEC,QAAQ;EACvD,IAAMC,YAAY,GAAGf,KAAK,CAACgB,MAAM,CAAiB,IAAI,CAAC;EACvD,IAAMC,mBAAmB,GAAGjB,KAAK,CAACgB,MAAM,CAAiB,IAAI,CAAC;EAC9D,IAAME,SAAS,GAAGX,gBAAgB,EAAE;EACpC,IAAMY,SAAS,GAAGd,YAAY,CAACM,GAAG,EAAEI,YAAY,CAAC;EAEjD;;;;EAIQ,IAAoBK,mBAAmB,GAAKhB,mBAAmB,EAAE,mBAA1B;EACvC,IAAciB,yBAAyB,GAAKnB,UAAU,CAACC,gBAAgB,CAAC,aAAjC;EAC/C,IAAMmB,YAAY,GAAGJ,SAAS,GAAGG,yBAAyB,GAAGD,mBAAmB;EAEhFd,kBAAkB,CAACS,YAAY,EAAEE,mBAAmB,EAAEJ,QAAQ,EAAED,UAAU,EAAEU,YAAY,CAAC;EAEzF,OACEtB;IAAKW,GAAG,EAAEQ,SAAS;IAAEI,SAAS,EAAEf,MAAM,CAAC,kBAAkB,CAAC;IAAEM,QAAQ,EAAEA;EAAQ,GAC5Ed;IAAKW,GAAG,EAAEM,mBAAmB;IAAEM,SAAS,EAAEf,MAAM,CAAC,0BAA0B;EAAC,EAAI,CAC5E;AAEV","names":["React","forwardRef","useContext","AppLayoutContext","useAppLayoutContext","useMergeRefs","useStickyScrollbar","useVisualRefresh","styles","StickyScrollbar","_a","ref","wrapperRef","tableRef","onScroll","scrollbarRef","useRef","scrollbarContentRef","isRefresh","mergedRef","offsetBottomClassic","offsetBottomVisualRefresh","offsetBottom","className"],"sources":["/Users/dcastro/node_modules/src/table/sticky-scrollbar.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useContext } from 'react';\nimport { AppLayoutContext } from '../app-layout/visual-refresh/context';\nimport { useAppLayoutContext } from '../internal/context/app-layout-context';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useStickyScrollbar } from './use-sticky-scrollbar';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport styles from './styles.css.js';\n\ninterface StickyScrollbarProps {\n  wrapperRef: React.RefObject<HTMLDivElement>;\n  tableRef: React.RefObject<HTMLTableElement>;\n  onScroll?: React.UIEventHandler<HTMLDivElement>;\n}\n\nexport default forwardRef(StickyScrollbar);\n\nfunction StickyScrollbar({ wrapperRef, tableRef, onScroll }: StickyScrollbarProps, ref: React.Ref<HTMLDivElement>) {\n  const scrollbarRef = React.useRef<HTMLDivElement>(null);\n  const scrollbarContentRef = React.useRef<HTMLDivElement>(null);\n  const isRefresh = useVisualRefresh();\n  const mergedRef = useMergeRefs(ref, scrollbarRef);\n\n  /**\n   * Use the appropriate AppLayout context (Classic or Visual Refresh) to determine\n   * the offsetBottom value to be used in the useStickyScrollbar hook.\n   */\n  const { stickyOffsetBottom: offsetBottomClassic } = useAppLayoutContext();\n  const { offsetBottom: offsetBottomVisualRefresh } = useContext(AppLayoutContext);\n  const offsetBottom = isRefresh ? offsetBottomVisualRefresh : offsetBottomClassic;\n\n  useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, offsetBottom);\n\n  return (\n    <div ref={mergedRef} className={styles['sticky-scrollbar']} onScroll={onScroll}>\n      <div ref={scrollbarContentRef} className={styles['sticky-scrollbar-content']} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}