{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useLayoutEffect } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * The layoutElement ref will be used by the resize observers to calculate the offset from\n * the top and bottom of the viewport based on the header and footer elements. This is to\n * ensure the Layout component minimum height will fill 100% of the viewport less those\n * cumulative heights.\n */\nexport default function Layout(_a) {\n  var _b, _c, _d, _e, _f, _g;\n  var children = _a.children;\n  var _h = useContext(AppLayoutContext),\n    contentHeader = _h.contentHeader,\n    contentType = _h.contentType,\n    disableBodyScroll = _h.disableBodyScroll,\n    disableContentHeaderOverlap = _h.disableContentHeaderOverlap,\n    dynamicOverlapHeight = _h.dynamicOverlapHeight,\n    footerHeight = _h.footerHeight,\n    hasNotificationsContent = _h.hasNotificationsContent,\n    headerHeight = _h.headerHeight,\n    isNavigationOpen = _h.isNavigationOpen,\n    isSplitPanelOpen = _h.isSplitPanelOpen,\n    isToolsOpen = _h.isToolsOpen,\n    layoutElement = _h.layoutElement,\n    layoutWidth = _h.layoutWidth,\n    mainOffsetLeft = _h.mainOffsetLeft,\n    maxContentWidth = _h.maxContentWidth,\n    minContentWidth = _h.minContentWidth,\n    navigationHide = _h.navigationHide,\n    notificationsHeight = _h.notificationsHeight,\n    setOffsetBottom = _h.setOffsetBottom,\n    splitPanel = _h.splitPanel,\n    stickyNotifications = _h.stickyNotifications,\n    toolsHide = _h.toolsHide;\n  var _j = useContext(SplitPanelContext),\n    getSplitPanelHeader = _j.getHeader,\n    splitPanelPosition = _j.position,\n    splitPanelSize = _j.size;\n  var isOverlapDisabled = getOverlapDisabled(dynamicOverlapHeight, contentHeader, disableContentHeaderOverlap);\n  // Content gaps on the left and right are used with the minmax function in the CSS grid column definition\n  var hasContentGapLeft = getContentGapLeft(isNavigationOpen, navigationHide);\n  var hasContentGapRight = getContentGapRight(splitPanelPosition, isSplitPanelOpen, isToolsOpen, splitPanel, toolsHide);\n  /**\n   * Determine the offsetBottom value based on the presence of a footer element and\n   * the SplitPanel component. Ignore the SplitPanel if it is not in the bottom\n   * position. Use the size property if it is open and the header height if it is closed.\n   */\n  useLayoutEffect(function handleOffsetBottom() {\n    var offsetBottom = footerHeight;\n    if (splitPanel && splitPanelPosition === 'bottom') {\n      if (isSplitPanelOpen) {\n        offsetBottom += splitPanelSize;\n      } else {\n        var splitPanelHeader = getSplitPanelHeader();\n        offsetBottom += splitPanelHeader ? splitPanelHeader.clientHeight : 0;\n      }\n    }\n    setOffsetBottom(offsetBottom);\n  }, [footerHeight, getSplitPanelHeader, isSplitPanelOpen, setOffsetBottom, splitPanelPosition, splitPanel, splitPanelSize]);\n  return React.createElement(\"main\", {\n    className: clsx(styles.layout, styles[\"content-type-\".concat(contentType)], styles[\"split-panel-position-\".concat(splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : 'bottom')], (_b = {}, _b[styles['disable-body-scroll']] = disableBodyScroll, _b[testutilStyles['disable-body-scroll-root']] = disableBodyScroll, _b[styles['has-content-gap-left']] = hasContentGapLeft, _b[styles['has-content-gap-right']] = hasContentGapRight, _b[styles['has-max-content-width']] = maxContentWidth && maxContentWidth > 0, _b[styles['has-split-panel']] = splitPanel, _b[styles['has-sticky-notifications']] = stickyNotifications && hasNotificationsContent, _b[styles['is-overlap-disabled']] = isOverlapDisabled, _b), testutilStyles.root),\n    ref: layoutElement,\n    style: __assign(__assign(__assign(__assign((_c = {}, _c[customCssProps.headerHeight] = \"\".concat(headerHeight, \"px\"), _c[customCssProps.footerHeight] = \"\".concat(footerHeight, \"px\"), _c[customCssProps.layoutWidth] = \"\".concat(layoutWidth, \"px\"), _c[customCssProps.mainOffsetLeft] = \"\".concat(mainOffsetLeft, \"px\"), _c), maxContentWidth && (_d = {}, _d[customCssProps.maxContentWidth] = \"\".concat(maxContentWidth, \"px\"), _d)), minContentWidth && (_e = {}, _e[customCssProps.minContentWidth] = \"\".concat(minContentWidth, \"px\"), _e)), (_f = {}, _f[customCssProps.notificationsHeight] = \"\".concat(notificationsHeight, \"px\"), _f)), !isOverlapDisabled && dynamicOverlapHeight > 0 && (_g = {}, _g[customCssProps.overlapHeight] = \"\".concat(dynamicOverlapHeight, \"px\"), _g))\n  }, children);\n}\n/**\n * When the Navigation and Tools are present the grid definition has the center column\n * touch the first and last columns with no gap. The forms with the circular buttons\n * for Navigation and Tools have internal padding which creates the necessary\n * horizontal space when the drawers are closed. The remaining conditions below\n * determine the necessity of utilizing the content gap left property to create\n * horizontal space between the center column and its adjacent siblings.\n */\nfunction getContentGapRight(splitPanelPosition, isSplitPanelOpen, isToolsOpen, splitPanel, toolsHide) {\n  var hasContentGapRight = false;\n  // Main is touching the edge of the Layout and needs a content gap\n  if (!splitPanel && toolsHide) {\n    hasContentGapRight = true;\n  }\n  // Main is touching the Tools drawer and needs a content gap\n  if ((!splitPanel || !isSplitPanelOpen) && !toolsHide && isToolsOpen) {\n    hasContentGapRight = true;\n  }\n  // Main is touching the edge of the Layout and needs a content gap\n  if (splitPanel && splitPanelPosition === 'bottom' && (isToolsOpen || toolsHide)) {\n    hasContentGapRight = true;\n  }\n  // Main is touching the Split Panel drawer and needs a content gap\n  if (splitPanel && isSplitPanelOpen && splitPanelPosition === 'side') {\n    hasContentGapRight = true;\n  }\n  return hasContentGapRight;\n}\n/**\n * Additional function to determine whether or not a content gap is needed\n * on the left (see the getContentGapRight function). The same render logic applies\n * regarding the center column touching an adjacent sibling but the only\n * component state that needs to be tracked is the Navigation.\n */\nfunction getContentGapLeft(isNavigationOpen, navigationHide) {\n  return isNavigationOpen || navigationHide ? true : false;\n}\n/**\n * Determine whether the overlap between the contentHeader and content slots should be disabled.\n * The disableContentHeaderOverlap property is absolute and will always disable the overlap\n * if it is set to true. If there is no contentHeader then the overlap should be disabled\n * unless there is a dynamicOverlapHeight. The dynamicOverlapHeight property is set by a\n * component in the content slot that needs to manually control the overlap height. Components\n * such as the Table (full page variant), Wizard, ContentLayout use this property and will\n * retain the overlap even if there is nothing rendered in the contentHeader slot.\n */\nfunction getOverlapDisabled(dynamicOverlapHeight, contentHeader, disableContentHeaderOverlap) {\n  var isOverlapDisabled = false;\n  if (disableContentHeaderOverlap) {\n    isOverlapDisabled = true;\n  } else if (!contentHeader && dynamicOverlapHeight <= 0) {\n    isOverlapDisabled = true;\n  }\n  return isOverlapDisabled;\n}","map":{"version":3,"mappings":"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","names":["React","useContext","useLayoutEffect","clsx","AppLayoutContext","SplitPanelContext","styles","testutilStyles","customCssProps","Layout","_a","children","contentHeader","contentType","disableBodyScroll","disableContentHeaderOverlap","dynamicOverlapHeight","footerHeight","hasNotificationsContent","headerHeight","isNavigationOpen","isSplitPanelOpen","isToolsOpen","layoutElement","layoutWidth","mainOffsetLeft","maxContentWidth","minContentWidth","navigationHide","notificationsHeight","setOffsetBottom","splitPanel","stickyNotifications","toolsHide","getSplitPanelHeader","splitPanelPosition","splitPanelSize","isOverlapDisabled","getOverlapDisabled","hasContentGapLeft","getContentGapLeft","hasContentGapRight","getContentGapRight","handleOffsetBottom","offsetBottom","splitPanelHeader","clientHeight","className","layout","_b","root","ref","style","_d","_e","_g","overlapHeight"],"sources":["/Users/dcastro/node_modules/src/app-layout/visual-refresh/layout.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useLayoutEffect } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { AppLayoutProps } from '../interfaces';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\n/**\n * The layoutElement ref will be used by the resize observers to calculate the offset from\n * the top and bottom of the viewport based on the header and footer elements. This is to\n * ensure the Layout component minimum height will fill 100% of the viewport less those\n * cumulative heights.\n */\nexport default function Layout({ children }: LayoutProps) {\n  const {\n    contentHeader,\n    contentType,\n    disableBodyScroll,\n    disableContentHeaderOverlap,\n    dynamicOverlapHeight,\n    footerHeight,\n    hasNotificationsContent,\n    headerHeight,\n    isNavigationOpen,\n    isSplitPanelOpen,\n    isToolsOpen,\n    layoutElement,\n    layoutWidth,\n    mainOffsetLeft,\n    maxContentWidth,\n    minContentWidth,\n    navigationHide,\n    notificationsHeight,\n    setOffsetBottom,\n    splitPanel,\n    stickyNotifications,\n    toolsHide,\n  } = useContext(AppLayoutContext);\n\n  const {\n    getHeader: getSplitPanelHeader,\n    position: splitPanelPosition,\n    size: splitPanelSize,\n  } = useContext(SplitPanelContext);\n\n  const isOverlapDisabled = getOverlapDisabled(dynamicOverlapHeight, contentHeader, disableContentHeaderOverlap);\n\n  // Content gaps on the left and right are used with the minmax function in the CSS grid column definition\n  const hasContentGapLeft = getContentGapLeft(isNavigationOpen, navigationHide);\n  const hasContentGapRight = getContentGapRight(\n    splitPanelPosition,\n    isSplitPanelOpen,\n    isToolsOpen,\n    splitPanel,\n    toolsHide\n  );\n\n  /**\n   * Determine the offsetBottom value based on the presence of a footer element and\n   * the SplitPanel component. Ignore the SplitPanel if it is not in the bottom\n   * position. Use the size property if it is open and the header height if it is closed.\n   */\n  useLayoutEffect(\n    function handleOffsetBottom() {\n      let offsetBottom = footerHeight;\n\n      if (splitPanel && splitPanelPosition === 'bottom') {\n        if (isSplitPanelOpen) {\n          offsetBottom += splitPanelSize;\n        } else {\n          const splitPanelHeader = getSplitPanelHeader();\n          offsetBottom += splitPanelHeader ? splitPanelHeader.clientHeight : 0;\n        }\n      }\n\n      setOffsetBottom(offsetBottom);\n    },\n    [\n      footerHeight,\n      getSplitPanelHeader,\n      isSplitPanelOpen,\n      setOffsetBottom,\n      splitPanelPosition,\n      splitPanel,\n      splitPanelSize,\n    ]\n  );\n\n  return (\n    <main\n      className={clsx(\n        styles.layout,\n        styles[`content-type-${contentType}`],\n        styles[`split-panel-position-${splitPanelPosition ?? 'bottom'}`],\n        {\n          [styles['disable-body-scroll']]: disableBodyScroll,\n          [testutilStyles['disable-body-scroll-root']]: disableBodyScroll,\n          [styles['has-content-gap-left']]: hasContentGapLeft,\n          [styles['has-content-gap-right']]: hasContentGapRight,\n          [styles['has-max-content-width']]: maxContentWidth && maxContentWidth > 0,\n          [styles['has-split-panel']]: splitPanel,\n          [styles['has-sticky-notifications']]: stickyNotifications && hasNotificationsContent,\n          [styles['is-overlap-disabled']]: isOverlapDisabled,\n        },\n        testutilStyles.root\n      )}\n      ref={layoutElement}\n      style={{\n        [customCssProps.headerHeight]: `${headerHeight}px`,\n        [customCssProps.footerHeight]: `${footerHeight}px`,\n        [customCssProps.layoutWidth]: `${layoutWidth}px`,\n        [customCssProps.mainOffsetLeft]: `${mainOffsetLeft}px`,\n        ...(maxContentWidth && { [customCssProps.maxContentWidth]: `${maxContentWidth}px` }),\n        ...(minContentWidth && { [customCssProps.minContentWidth]: `${minContentWidth}px` }),\n        [customCssProps.notificationsHeight]: `${notificationsHeight}px`,\n        ...(!isOverlapDisabled &&\n          dynamicOverlapHeight > 0 && { [customCssProps.overlapHeight]: `${dynamicOverlapHeight}px` }),\n      }}\n    >\n      {children}\n    </main>\n  );\n}\n\n/**\n * When the Navigation and Tools are present the grid definition has the center column\n * touch the first and last columns with no gap. The forms with the circular buttons\n * for Navigation and Tools have internal padding which creates the necessary\n * horizontal space when the drawers are closed. The remaining conditions below\n * determine the necessity of utilizing the content gap left property to create\n * horizontal space between the center column and its adjacent siblings.\n */\nfunction getContentGapRight(\n  splitPanelPosition: AppLayoutProps.SplitPanelPosition,\n  isSplitPanelOpen?: boolean,\n  isToolsOpen?: boolean,\n  splitPanel?: React.ReactNode,\n  toolsHide?: boolean\n) {\n  let hasContentGapRight = false;\n\n  // Main is touching the edge of the Layout and needs a content gap\n  if (!splitPanel && toolsHide) {\n    hasContentGapRight = true;\n  }\n\n  // Main is touching the Tools drawer and needs a content gap\n  if ((!splitPanel || !isSplitPanelOpen) && !toolsHide && isToolsOpen) {\n    hasContentGapRight = true;\n  }\n\n  // Main is touching the edge of the Layout and needs a content gap\n  if (splitPanel && splitPanelPosition === 'bottom' && (isToolsOpen || toolsHide)) {\n    hasContentGapRight = true;\n  }\n\n  // Main is touching the Split Panel drawer and needs a content gap\n  if (splitPanel && isSplitPanelOpen && splitPanelPosition === 'side') {\n    hasContentGapRight = true;\n  }\n\n  return hasContentGapRight;\n}\n\n/**\n * Additional function to determine whether or not a content gap is needed\n * on the left (see the getContentGapRight function). The same render logic applies\n * regarding the center column touching an adjacent sibling but the only\n * component state that needs to be tracked is the Navigation.\n */\nfunction getContentGapLeft(isNavigationOpen: boolean, navigationHide?: boolean) {\n  return isNavigationOpen || navigationHide ? true : false;\n}\n\n/**\n * Determine whether the overlap between the contentHeader and content slots should be disabled.\n * The disableContentHeaderOverlap property is absolute and will always disable the overlap\n * if it is set to true. If there is no contentHeader then the overlap should be disabled\n * unless there is a dynamicOverlapHeight. The dynamicOverlapHeight property is set by a\n * component in the content slot that needs to manually control the overlap height. Components\n * such as the Table (full page variant), Wizard, ContentLayout use this property and will\n * retain the overlap even if there is nothing rendered in the contentHeader slot.\n */\nfunction getOverlapDisabled(\n  dynamicOverlapHeight: number,\n  contentHeader?: React.ReactNode,\n  disableContentHeaderOverlap?: boolean\n) {\n  let isOverlapDisabled = false;\n\n  if (disableContentHeaderOverlap) {\n    isOverlapDisabled = true;\n  } else if (!contentHeader && dynamicOverlapHeight <= 0) {\n    isOverlapDisabled = true;\n  }\n\n  return isOverlapDisabled;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}