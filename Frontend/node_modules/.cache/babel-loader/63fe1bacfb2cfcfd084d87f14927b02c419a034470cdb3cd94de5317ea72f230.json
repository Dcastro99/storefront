{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { InternalButton } from '../../button/internal';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\n/**\n * The CSS class 'awsui-context-content-header' needs to be added to the root element so\n * that the design tokens used are overridden with the appropriate values.\n */\nexport default function AppBar() {\n  var _a, _b, _c, _d;\n  var _e, _f, _g;\n  var _h = useContext(AppLayoutContext),\n    ariaLabels = _h.ariaLabels,\n    breadcrumbs = _h.breadcrumbs,\n    contentHeader = _h.contentHeader,\n    contentType = _h.contentType,\n    dynamicOverlapHeight = _h.dynamicOverlapHeight,\n    handleNavigationClick = _h.handleNavigationClick,\n    handleToolsClick = _h.handleToolsClick,\n    hasNotificationsContent = _h.hasNotificationsContent,\n    isMobile = _h.isMobile,\n    navigationHide = _h.navigationHide,\n    isNavigationOpen = _h.isNavigationOpen,\n    isToolsOpen = _h.isToolsOpen,\n    toolsHide = _h.toolsHide,\n    isAnyPanelOpen = _h.isAnyPanelOpen;\n  var focusRefsNav = useFocusControl(isNavigationOpen).refs;\n  var focusRefsTools = useFocusControl(isToolsOpen, true).refs;\n  if (navigationHide && !breadcrumbs && toolsHide) {\n    return null;\n  }\n  return React.createElement(\"section\", {\n    \"aria-hidden\": !isMobile && !breadcrumbs ? true : undefined,\n    className: clsx(styles.appbar, (_a = {}, _a[styles['has-breadcrumbs']] = breadcrumbs, _a[styles.unfocusable] = isMobile && isAnyPanelOpen, _a[testutilStyles['mobile-bar']] = isMobile, _a), 'awsui-context-content-header')\n  }, !navigationHide && isMobile && React.createElement(\"nav\", {\n    className: clsx(styles['appbar-nav'], (_b = {}, _b[testutilStyles['drawer-closed']] = !isNavigationOpen, _b)),\n    \"aria-hidden\": isNavigationOpen\n  }, React.createElement(InternalButton, {\n    ariaLabel: (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _e !== void 0 ? _e : undefined,\n    ariaExpanded: isNavigationOpen,\n    iconName: \"menu\",\n    formAction: \"none\",\n    onClick: function () {\n      return handleNavigationClick(true);\n    },\n    variant: \"icon\",\n    className: testutilStyles['navigation-toggle'],\n    ref: focusRefsNav.toggle,\n    disabled: isAnyPanelOpen,\n    __nativeAttributes: {\n      'aria-haspopup': true\n    }\n  })), breadcrumbs && React.createElement(\"div\", {\n    className: clsx(styles.breadcrumbs, styles[\"content-type-\".concat(contentType)], testutilStyles.breadcrumbs, (_c = {}, _c[styles['has-dynamic-overlap-height']] = dynamicOverlapHeight > 0, _c[styles['has-header']] = contentHeader, _c[styles['has-notifications-content']] = hasNotificationsContent, _c))\n  }, breadcrumbs), !toolsHide && isMobile && React.createElement(\"aside\", {\n    className: clsx(styles['appbar-tools'], (_d = {}, _d[testutilStyles['drawer-closed']] = !isToolsOpen, _d)),\n    \"aria-hidden\": isToolsOpen,\n    \"aria-label\": (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _f !== void 0 ? _f : undefined\n  }, React.createElement(InternalButton, {\n    className: testutilStyles['tools-toggle'],\n    ariaExpanded: isToolsOpen,\n    disabled: isAnyPanelOpen,\n    ariaLabel: (_g = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _g !== void 0 ? _g : undefined,\n    iconName: \"status-info\",\n    formAction: \"none\",\n    onClick: function () {\n      return handleToolsClick(true);\n    },\n    variant: \"icon\",\n    ref: focusRefsTools.toggle,\n    __nativeAttributes: {\n      'aria-haspopup': true\n    }\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","useContext","clsx","AppLayoutContext","InternalButton","styles","testutilStyles","useFocusControl","AppBar","ariaLabels","breadcrumbs","contentHeader","contentType","dynamicOverlapHeight","handleNavigationClick","handleToolsClick","hasNotificationsContent","isMobile","navigationHide","isNavigationOpen","isToolsOpen","toolsHide","isAnyPanelOpen","focusRefsNav","focusRefsTools","undefined","className","appbar","_a","unfocusable","_b","ariaLabel","navigationToggle","ariaExpanded","iconName","formAction","onClick","variant","ref","toggle","disabled","__nativeAttributes","_c","_d","tools","toolsToggle"],"sources":["/Users/dcastro/node_modules/src/app-layout/visual-refresh/app-bar.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { InternalButton } from '../../button/internal';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\n\n/**\n * The CSS class 'awsui-context-content-header' needs to be added to the root element so\n * that the design tokens used are overridden with the appropriate values.\n */\nexport default function AppBar() {\n  const {\n    ariaLabels,\n    breadcrumbs,\n    contentHeader,\n    contentType,\n    dynamicOverlapHeight,\n    handleNavigationClick,\n    handleToolsClick,\n    hasNotificationsContent,\n    isMobile,\n    navigationHide,\n    isNavigationOpen,\n    isToolsOpen,\n    toolsHide,\n    isAnyPanelOpen,\n  } = useContext(AppLayoutContext);\n  const { refs: focusRefsNav } = useFocusControl(isNavigationOpen);\n  const { refs: focusRefsTools } = useFocusControl(isToolsOpen, true);\n\n  if (navigationHide && !breadcrumbs && toolsHide) {\n    return null;\n  }\n\n  return (\n    <section\n      aria-hidden={!isMobile && !breadcrumbs ? true : undefined}\n      className={clsx(\n        styles.appbar,\n        {\n          [styles['has-breadcrumbs']]: breadcrumbs,\n          [styles.unfocusable]: isMobile && isAnyPanelOpen,\n          [testutilStyles['mobile-bar']]: isMobile,\n        },\n        'awsui-context-content-header'\n      )}\n    >\n      {!navigationHide && isMobile && (\n        <nav\n          className={clsx(styles['appbar-nav'], { [testutilStyles['drawer-closed']]: !isNavigationOpen })}\n          aria-hidden={isNavigationOpen}\n        >\n          <InternalButton\n            ariaLabel={ariaLabels?.navigationToggle ?? undefined}\n            ariaExpanded={isNavigationOpen}\n            iconName=\"menu\"\n            formAction=\"none\"\n            onClick={() => handleNavigationClick(true)}\n            variant=\"icon\"\n            className={testutilStyles['navigation-toggle']}\n            ref={focusRefsNav.toggle}\n            disabled={isAnyPanelOpen}\n            __nativeAttributes={{ 'aria-haspopup': true }}\n          />\n        </nav>\n      )}\n\n      {breadcrumbs && (\n        <div\n          className={clsx(styles.breadcrumbs, styles[`content-type-${contentType}`], testutilStyles.breadcrumbs, {\n            [styles['has-dynamic-overlap-height']]: dynamicOverlapHeight > 0,\n            [styles['has-header']]: contentHeader,\n            [styles['has-notifications-content']]: hasNotificationsContent,\n          })}\n        >\n          {breadcrumbs}\n        </div>\n      )}\n\n      {!toolsHide && isMobile && (\n        <aside\n          className={clsx(styles['appbar-tools'], { [testutilStyles['drawer-closed']]: !isToolsOpen })}\n          aria-hidden={isToolsOpen}\n          aria-label={ariaLabels?.tools ?? undefined}\n        >\n          <InternalButton\n            className={testutilStyles['tools-toggle']}\n            ariaExpanded={isToolsOpen}\n            disabled={isAnyPanelOpen}\n            ariaLabel={ariaLabels?.toolsToggle ?? undefined}\n            iconName=\"status-info\"\n            formAction=\"none\"\n            onClick={() => handleToolsClick(true)}\n            variant=\"icon\"\n            ref={focusRefsTools.toggle}\n            __nativeAttributes={{ 'aria-haspopup': true }}\n          />\n        </aside>\n      )}\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}