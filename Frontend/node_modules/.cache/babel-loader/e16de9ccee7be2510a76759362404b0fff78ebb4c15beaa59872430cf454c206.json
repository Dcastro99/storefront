{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useMemo } from 'react';\n/**\n * useMergeRefs merges multiple refs into single ref callback.\n *\n * For example\n *  const mergedRef = useMergeRefs(ref1, ref2, ref3)\n *  <div ref={refs}>...</div>\n */\nexport function useMergeRefs() {\n  var refs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n  return useMemo(function () {\n    if (refs.every(function (ref) {\n      return ref === null || ref === undefined;\n    })) {\n      return null;\n    }\n    return function (value) {\n      refs.forEach(function (ref) {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref !== null && ref !== undefined) {\n          ref.current = value;\n        }\n      });\n    };\n    // ESLint expects an array literal which we can not provide here\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAAgBA,OAAO,QAAQ,OAAO;AAEtC;;;;;;;AAOA,OAAM,SAAUC,YAAY;EAAC;OAAA,UAAuF,EAAvFC,qBAAuF,EAAvFA,IAAuF;IAAvFC;;EAC3B,OAAOH,OAAO,CAAC;IACb,IAAIG,IAAI,CAACC,KAAK,CAAC,aAAG;MAAI,UAAG,KAAK,IAAI,IAAIC,GAAG,KAAKC,SAAS;IAAjC,CAAiC,CAAC,EAAE;MACxD,OAAO,IAAI;;IAEb,OAAO,UAACC,KAAU;MAChBJ,IAAI,CAACK,OAAO,CAAC,aAAG;QACd,IAAI,OAAOH,GAAG,KAAK,UAAU,EAAE;UAC7BA,GAAG,CAACE,KAAK,CAAC;SACX,MAAM,IAAIF,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKC,SAAS,EAAE;UAC3CD,GAAmC,CAACI,OAAO,GAAGF,KAAK;;MAExD,CAAC,CAAC;IACJ,CAAC;IACD;IACA;EACF,CAAC,EAAEJ,IAAI,CAAC;AACV","names":["useMemo","useMergeRefs","_i","refs","every","ref","undefined","value","forEach","current"],"sources":["/Users/dcastro/node_modules/src/internal/hooks/use-merge-refs/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\n\n/**\n * useMergeRefs merges multiple refs into single ref callback.\n *\n * For example\n *  const mergedRef = useMergeRefs(ref1, ref2, ref3)\n *  <div ref={refs}>...</div>\n */\nexport function useMergeRefs(...refs: Array<React.RefCallback<any> | React.MutableRefObject<any> | null | undefined>) {\n  return useMemo(() => {\n    if (refs.every(ref => ref === null || ref === undefined)) {\n      return null;\n    }\n    return (value: any) => {\n      refs.forEach(ref => {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref !== null && ref !== undefined) {\n          (ref as React.MutableRefObject<any>).current = value;\n        }\n      });\n    };\n    // ESLint expects an array literal which we can not provide here\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}