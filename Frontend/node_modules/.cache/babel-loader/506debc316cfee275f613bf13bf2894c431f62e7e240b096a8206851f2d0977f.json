{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { AppLayoutButton, CloseButton, togglesConfig } from './toggles';\nimport styles from './styles.css.js';\n// This matches the design token awsui.$border-divider-section-width in Visual Refresh\nvar BORDER_WIDTH = 2;\n// We are using two landmarks per drawer, i.e. two NAVs and two ASIDEs, because of several\n// known bugs in NVDA that cause focus changes within a container to sometimes not be\n// announced. As a result, we use one region for the open button and one region for the\n// actual drawer content, always hiding the other one when it's not visible.\n// An alternative solution to follow a more classic implementation here to only have one\n// button that triggers the opening/closing of the drawer also did not work due to another\n// series of bugs in NVDA (together with Firefox) which prevent the changed expanded state\n// from being announced.\n// Even with this workaround in place, the announcement of the close button when opening a\n// panel in NVDA is not working correctly. The suspected root cause is one of the bugs below\n// as well.\n// Relevant tickets:\n// * https://github.com/nvaccess/nvda/issues/6606\n// * https://github.com/nvaccess/nvda/issues/5825\n// * https://github.com/nvaccess/nvda/issues/5247\n// * https://github.com/nvaccess/nvda/pull/8869 (reverted PR that was going to fix it)\nexport function Drawer(_a) {\n  var _b;\n  var contentClassName = _a.contentClassName,\n    toggleClassName = _a.toggleClassName,\n    closeClassName = _a.closeClassName,\n    width = _a.width,\n    type = _a.type,\n    toggleRefs = _a.toggleRefs,\n    topOffset = _a.topOffset,\n    bottomOffset = _a.bottomOffset,\n    ariaLabels = _a.ariaLabels,\n    children = _a.children,\n    isOpen = _a.isOpen,\n    isHidden = _a.isHidden,\n    isMobile = _a.isMobile,\n    hasDividerWithSplitPanel = _a.hasDividerWithSplitPanel,\n    onToggle = _a.onToggle,\n    onClick = _a.onClick,\n    onLoseFocus = _a.onLoseFocus,\n    _c = _a.extendRight,\n    extendRight = _c === void 0 ? 0 : _c;\n  var _d = togglesConfig[type],\n    TagName = _d.TagName,\n    iconName = _d.iconName,\n    getLabels = _d.getLabels;\n  var _e = getLabels(ariaLabels),\n    mainLabel = _e.mainLabel,\n    closeLabel = _e.closeLabel,\n    openLabel = _e.openLabel;\n  var hasDividerWithButtonBar = isOpen && extendRight !== 0;\n  var drawerContentWidthOpen = isMobile ? undefined : width;\n  var drawerContentWidth = isOpen ? drawerContentWidthOpen : undefined;\n  var drawerWidth = hasDividerWithButtonBar && drawerContentWidth ? drawerContentWidth + BORDER_WIDTH : drawerContentWidth;\n  var closeIconName = 'close';\n  var regularOpenButton = React.createElement(TagName, {\n    \"aria-label\": mainLabel,\n    className: styles.toggle,\n    \"aria-hidden\": isOpen\n  }, React.createElement(AppLayoutButton, {\n    ref: toggleRefs.toggle,\n    className: toggleClassName,\n    iconName: iconName,\n    ariaLabel: openLabel,\n    onClick: function () {\n      return onToggle(true);\n    },\n    ariaExpanded: false\n  }));\n  return React.createElement(\"div\", {\n    className: clsx(styles.drawer, (_b = {}, _b[styles['drawer-closed']] = !isOpen, _b[styles['drawer-hidden']] = isHidden, _b[styles['drawer-mobile']] = isMobile, _b[styles['has-divider-with-splitpanel']] = hasDividerWithSplitPanel, _b[styles['opaque-background']] = hasDividerWithButtonBar, _b)),\n    style: {\n      width: drawerWidth,\n      marginRight: isOpen ? -1 * extendRight : 0,\n      paddingRight: isOpen ? extendRight : 0\n    },\n    onBlur: onLoseFocus ? function (e) {\n      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n        onLoseFocus(e);\n      }\n    } : undefined,\n    onClick: function (event) {\n      if (onClick) {\n        onClick(event);\n      }\n      if (!isOpen) {\n        // to prevent calling onToggle from the drawer when it's called from the toggle button\n        if (event.target.tagName !== 'BUTTON') {\n          onToggle(true);\n        }\n      }\n    }\n  }, React.createElement(\"div\", {\n    style: {\n      width: drawerContentWidth,\n      top: topOffset,\n      bottom: bottomOffset\n    },\n    className: clsx(styles['drawer-content'], contentClassName)\n  }, !isMobile && regularOpenButton, React.createElement(TagName, {\n    \"aria-label\": mainLabel,\n    \"aria-hidden\": !isOpen\n  }, React.createElement(CloseButton, {\n    ref: toggleRefs.close,\n    className: closeClassName,\n    ariaLabel: closeLabel,\n    onClick: function () {\n      return onToggle(false);\n    },\n    iconName: closeIconName\n  }), children)));\n}","map":{"version":3,"mappings":"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","names":["clsx","React","AppLayoutButton","CloseButton","togglesConfig","styles","BORDER_WIDTH","Drawer","_a","contentClassName","toggleClassName","closeClassName","width","type","toggleRefs","topOffset","bottomOffset","ariaLabels","children","isOpen","isHidden","isMobile","hasDividerWithSplitPanel","onToggle","onClick","onLoseFocus","_c","extendRight","TagName","iconName","getLabels","mainLabel","closeLabel","openLabel","hasDividerWithButtonBar","drawerContentWidthOpen","undefined","drawerContentWidth","drawerWidth","closeIconName","regularOpenButton","className","toggle","ref","ariaLabel","ariaExpanded","drawer","_b","style","marginRight","paddingRight","onBlur","e","relatedTarget","currentTarget","contains","event","target","tagName","top","bottom","close"],"sources":["/Users/dcastro/node_modules/src/app-layout/drawer.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { ButtonProps } from '../button/interfaces';\nimport { AppLayoutButton, CloseButton, togglesConfig } from './toggles';\nimport { AppLayoutProps } from './interfaces';\nimport styles from './styles.css.js';\n\n// This matches the design token awsui.$border-divider-section-width in Visual Refresh\nconst BORDER_WIDTH = 2;\n\nexport interface DesktopDrawerProps {\n  contentClassName?: string;\n  toggleClassName?: string;\n  closeClassName?: string;\n  toggleRefs: {\n    toggle: React.Ref<ButtonProps.Ref>;\n    close: React.Ref<ButtonProps.Ref>;\n  };\n  externalizedToggle?: boolean;\n  width: number;\n  topOffset?: number;\n  bottomOffset?: number;\n  ariaLabels?: AppLayoutProps.Labels;\n  children: React.ReactNode;\n  type: keyof typeof togglesConfig;\n  isMobile?: boolean;\n  isOpen?: boolean;\n  isHidden?: boolean;\n  hasDividerWithSplitPanel?: boolean;\n  onToggle: (isOpen: boolean) => void;\n  onClick?: (event: React.MouseEvent) => void;\n  onLoseFocus?: (event: React.FocusEvent) => void;\n  extendRight?: number;\n}\n\n// We are using two landmarks per drawer, i.e. two NAVs and two ASIDEs, because of several\n// known bugs in NVDA that cause focus changes within a container to sometimes not be\n// announced. As a result, we use one region for the open button and one region for the\n// actual drawer content, always hiding the other one when it's not visible.\n// An alternative solution to follow a more classic implementation here to only have one\n// button that triggers the opening/closing of the drawer also did not work due to another\n// series of bugs in NVDA (together with Firefox) which prevent the changed expanded state\n// from being announced.\n// Even with this workaround in place, the announcement of the close button when opening a\n// panel in NVDA is not working correctly. The suspected root cause is one of the bugs below\n// as well.\n// Relevant tickets:\n// * https://github.com/nvaccess/nvda/issues/6606\n// * https://github.com/nvaccess/nvda/issues/5825\n// * https://github.com/nvaccess/nvda/issues/5247\n// * https://github.com/nvaccess/nvda/pull/8869 (reverted PR that was going to fix it)\n\nexport function Drawer({\n  contentClassName,\n  toggleClassName,\n  closeClassName,\n  width,\n  type,\n  toggleRefs,\n  topOffset,\n  bottomOffset,\n  ariaLabels,\n  children,\n  isOpen,\n  isHidden,\n  isMobile,\n  hasDividerWithSplitPanel,\n  onToggle,\n  onClick,\n  onLoseFocus,\n  extendRight = 0,\n}: DesktopDrawerProps) {\n  const { TagName, iconName, getLabels } = togglesConfig[type];\n  const { mainLabel, closeLabel, openLabel } = getLabels(ariaLabels);\n  const hasDividerWithButtonBar = isOpen && extendRight !== 0;\n\n  const drawerContentWidthOpen = isMobile ? undefined : width;\n  const drawerContentWidth = isOpen ? drawerContentWidthOpen : undefined;\n\n  const drawerWidth =\n    hasDividerWithButtonBar && drawerContentWidth ? drawerContentWidth + BORDER_WIDTH : drawerContentWidth;\n\n  const closeIconName = 'close';\n\n  const regularOpenButton = (\n    <TagName aria-label={mainLabel} className={styles.toggle} aria-hidden={isOpen}>\n      <AppLayoutButton\n        ref={toggleRefs.toggle}\n        className={toggleClassName}\n        iconName={iconName}\n        ariaLabel={openLabel}\n        onClick={() => onToggle(true)}\n        ariaExpanded={false}\n      />\n    </TagName>\n  );\n\n  return (\n    <div\n      className={clsx(styles.drawer, {\n        [styles['drawer-closed']]: !isOpen,\n        [styles['drawer-hidden']]: isHidden,\n        [styles['drawer-mobile']]: isMobile,\n        [styles['has-divider-with-splitpanel']]: hasDividerWithSplitPanel,\n        [styles['opaque-background']]: hasDividerWithButtonBar,\n      })}\n      style={{\n        width: drawerWidth,\n        marginRight: isOpen ? -1 * extendRight : 0,\n        paddingRight: isOpen ? extendRight : 0,\n      }}\n      onBlur={\n        onLoseFocus\n          ? e => {\n              if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n                onLoseFocus(e);\n              }\n            }\n          : undefined\n      }\n      onClick={event => {\n        if (onClick) {\n          onClick(event);\n        }\n\n        if (!isOpen) {\n          // to prevent calling onToggle from the drawer when it's called from the toggle button\n          if ((event.target as Element).tagName !== 'BUTTON') {\n            onToggle(true);\n          }\n        }\n      }}\n    >\n      <div\n        style={{ width: drawerContentWidth, top: topOffset, bottom: bottomOffset }}\n        className={clsx(styles['drawer-content'], contentClassName)}\n      >\n        {!isMobile && regularOpenButton}\n        <TagName aria-label={mainLabel} aria-hidden={!isOpen}>\n          <CloseButton\n            ref={toggleRefs.close}\n            className={closeClassName}\n            ariaLabel={closeLabel}\n            onClick={() => onToggle(false)}\n            iconName={closeIconName}\n          />\n          {children}\n        </TagName>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}