{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect } from 'react';\nimport { AppLayoutButton, togglesConfig } from '../toggles';\nimport styles from './styles.css.js';\nimport sharedStyles from '../styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nvar MobileToggle = React.forwardRef(function (_a, ref) {\n  var className = _a.className,\n    ariaLabels = _a.ariaLabels,\n    type = _a.type,\n    disabled = _a.disabled,\n    onClick = _a.onClick;\n  var _b = togglesConfig[type],\n    TagName = _b.TagName,\n    iconName = _b.iconName,\n    getLabels = _b.getLabels;\n  var _c = getLabels(ariaLabels),\n    mainLabel = _c.mainLabel,\n    openLabel = _c.openLabel;\n  return React.createElement(TagName, {\n    className: clsx(styles['mobile-toggle']),\n    \"aria-hidden\": disabled,\n    \"aria-label\": mainLabel,\n    onClick: onClick\n  }, React.createElement(AppLayoutButton, {\n    ref: ref,\n    className: className,\n    iconName: iconName,\n    onClick: onClick,\n    ariaLabel: openLabel,\n    disabled: disabled,\n    ariaExpanded: disabled\n  }));\n});\nexport function MobileToolbar(_a) {\n  var _b = _a.ariaLabels,\n    ariaLabels = _b === void 0 ? {} : _b,\n    toggleRefs = _a.toggleRefs,\n    topOffset = _a.topOffset,\n    navigationHide = _a.navigationHide,\n    toolsHide = _a.toolsHide,\n    _c = _a.anyPanelOpen,\n    anyPanelOpen = _c === void 0 ? false : _c,\n    unfocusable = _a.unfocusable,\n    children = _a.children,\n    onNavigationOpen = _a.onNavigationOpen,\n    onToolsOpen = _a.onToolsOpen;\n  useEffect(function () {\n    if (anyPanelOpen) {\n      document.body.classList.add(styles['block-body-scroll']);\n      return function () {\n        document.body.classList.remove(styles['block-body-scroll']);\n      };\n    } else {\n      document.body.classList.remove(styles['block-body-scroll']);\n    }\n  }, [anyPanelOpen]);\n  return React.createElement(\"div\", {\n    className: clsx(styles['mobile-bar'], unfocusable && sharedStyles.unfocusable),\n    style: {\n      top: topOffset\n    }\n  }, !navigationHide && React.createElement(MobileToggle, {\n    ref: toggleRefs.navigation,\n    type: \"navigation\",\n    className: clsx(sharedStyles['navigation-toggle'], testutilStyles['navigation-toggle']),\n    ariaLabels: ariaLabels,\n    disabled: anyPanelOpen,\n    onClick: onNavigationOpen\n  }), React.createElement(\"div\", {\n    className: styles['mobile-bar-breadcrumbs']\n  }, children && React.createElement(\"div\", {\n    className: clsx(sharedStyles.breadcrumbs, testutilStyles.breadcrumbs)\n  }, children)), !toolsHide && React.createElement(MobileToggle, {\n    ref: toggleRefs.tools,\n    type: \"tools\",\n    className: clsx(sharedStyles['tools-toggle'], testutilStyles['tools-toggle']),\n    ariaLabels: ariaLabels,\n    disabled: anyPanelOpen,\n    onClick: onToolsOpen\n  }));\n}","map":{"version":3,"mappings":"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","names":["clsx","React","useEffect","AppLayoutButton","togglesConfig","styles","sharedStyles","testutilStyles","MobileToggle","forwardRef","_a","ref","className","ariaLabels","type","disabled","onClick","TagName","iconName","getLabels","mainLabel","openLabel","ariaLabel","ariaExpanded","MobileToolbar","_b","toggleRefs","topOffset","navigationHide","toolsHide","_c","anyPanelOpen","unfocusable","children","onNavigationOpen","onToolsOpen","document","body","classList","add","remove","style","top","navigation","breadcrumbs","tools"],"sources":["/Users/dcastro/node_modules/src/app-layout/mobile-toolbar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect } from 'react';\nimport { ButtonProps } from '../../button/interfaces';\nimport { AppLayoutProps } from '../interfaces';\nimport { AppLayoutButton, togglesConfig } from '../toggles';\nimport styles from './styles.css.js';\nimport sharedStyles from '../styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\n\ninterface MobileToggleProps {\n  className?: string;\n  ariaLabels?: AppLayoutProps.Labels;\n  type: keyof typeof togglesConfig;\n  disabled?: boolean;\n  onClick: () => void;\n}\n\nconst MobileToggle = React.forwardRef(\n  ({ className, ariaLabels, type, disabled, onClick }: MobileToggleProps, ref: React.Ref<ButtonProps.Ref>) => {\n    const { TagName, iconName, getLabels } = togglesConfig[type];\n    const { mainLabel, openLabel } = getLabels(ariaLabels);\n    return (\n      <TagName\n        className={clsx(styles['mobile-toggle'])}\n        aria-hidden={disabled}\n        aria-label={mainLabel}\n        onClick={onClick}\n      >\n        <AppLayoutButton\n          ref={ref}\n          className={className}\n          iconName={iconName}\n          onClick={onClick}\n          ariaLabel={openLabel}\n          disabled={disabled}\n          ariaExpanded={disabled}\n        />\n      </TagName>\n    );\n  }\n);\n\ninterface MobileToolbarProps {\n  anyPanelOpen: boolean | undefined;\n  unfocusable: boolean | undefined;\n  toggleRefs: {\n    navigation: React.Ref<ButtonProps.Ref>;\n    tools: React.Ref<ButtonProps.Ref>;\n  };\n  navigationHide: boolean | undefined;\n  toolsHide: boolean | undefined;\n  topOffset?: number;\n  ariaLabels?: AppLayoutProps.Labels;\n  children: React.ReactNode;\n  onNavigationOpen: () => void;\n  onToolsOpen: () => void;\n}\n\nexport function MobileToolbar({\n  ariaLabels = {},\n  toggleRefs,\n  topOffset,\n  navigationHide,\n  toolsHide,\n  anyPanelOpen = false,\n  unfocusable,\n  children,\n  onNavigationOpen,\n  onToolsOpen,\n}: MobileToolbarProps) {\n  useEffect(() => {\n    if (anyPanelOpen) {\n      document.body.classList.add(styles['block-body-scroll']);\n      return () => {\n        document.body.classList.remove(styles['block-body-scroll']);\n      };\n    } else {\n      document.body.classList.remove(styles['block-body-scroll']);\n    }\n  }, [anyPanelOpen]);\n\n  return (\n    <div className={clsx(styles['mobile-bar'], unfocusable && sharedStyles.unfocusable)} style={{ top: topOffset }}>\n      {!navigationHide && (\n        <MobileToggle\n          ref={toggleRefs.navigation}\n          type=\"navigation\"\n          className={clsx(sharedStyles['navigation-toggle'], testutilStyles['navigation-toggle'])}\n          ariaLabels={ariaLabels}\n          disabled={anyPanelOpen}\n          onClick={onNavigationOpen}\n        />\n      )}\n      <div className={styles['mobile-bar-breadcrumbs']}>\n        {children && <div className={clsx(sharedStyles.breadcrumbs, testutilStyles.breadcrumbs)}>{children}</div>}\n      </div>\n      {!toolsHide && (\n        <MobileToggle\n          ref={toggleRefs.tools}\n          type=\"tools\"\n          className={clsx(sharedStyles['tools-toggle'], testutilStyles['tools-toggle'])}\n          ariaLabels={ariaLabels}\n          disabled={anyPanelOpen}\n          onClick={onToolsOpen}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}