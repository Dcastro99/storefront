{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { addMinutes } from 'date-fns';\nimport { joinDateTime } from '.';\nimport { formatDate } from './format-date';\nimport { formatTime } from './format-time';\nimport { parseTimezoneOffset } from './parse-timezone-offset';\n/**\n * Re-formats an ISO8601 date string so that it is expressed using the\n * target timezone offset. The returned date string still represents the\n * same instant in time, but contains no visible offset.\n *\n * Example:\n * ```\n * shiftTimezoneOffset(\"2020-01-01T09:00:00+03:00\", 2 * 60) === \"2020-01-01T08:00:00\"\n * ```\n */\nexport function shiftTimezoneOffset(dateString, targetTimezoneOffset) {\n  var _a = dateString.split('T'),\n    datePart = _a[0],\n    _b = _a[1],\n    timeAndOffsetPart = _b === void 0 ? '' : _b;\n  var timePart = timeAndOffsetPart.split(/-|\\+|Z/)[0];\n  var valueWithoutOffset = joinDateTime(datePart, timePart);\n  var originalTimezoneOffset = parseTimezoneOffset(dateString);\n  var date = new Date(valueWithoutOffset);\n  targetTimezoneOffset = targetTimezoneOffset !== null && targetTimezoneOffset !== void 0 ? targetTimezoneOffset : 0 - date.getTimezoneOffset();\n  var adjustedDate = addMinutes(date, targetTimezoneOffset - originalTimezoneOffset);\n  return joinDateTime(formatDate(adjustedDate), formatTime(adjustedDate));\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,UAAU,QAAQ,UAAU;AACrC,SAASC,YAAY,QAAQ,GAAG;AAChC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,mBAAmB,QAAQ,yBAAyB;AAE7D;;;;;;;;;;AAUA,OAAM,SAAUC,mBAAmB,CAACC,UAAkB,EAAEC,oBAA6B;EAC7E,SAAqCD,UAAU,CAACE,KAAK,CAAC,GAAG,CAAC;IAAzDC,QAAQ;IAAEC,UAAsB;IAAtBC,iBAAiB,mBAAG,EAAE,KAAyB;EACzD,YAAQ,GAAIA,iBAAiB,CAACH,KAAK,CAAC,QAAQ,CAAC,GAArC;EACf,IAAMI,kBAAkB,GAAGX,YAAY,CAACQ,QAAQ,EAAEI,QAAQ,CAAC;EAC3D,IAAMC,sBAAsB,GAAGV,mBAAmB,CAACE,UAAU,CAAC;EAE9D,IAAMS,IAAI,GAAG,IAAIC,IAAI,CAACJ,kBAAkB,CAAC;EACzCL,oBAAoB,GAAGA,oBAAoB,aAApBA,oBAAoB,cAApBA,oBAAoB,GAAI,CAAC,GAAGQ,IAAI,CAACE,iBAAiB,EAAE;EAC3E,IAAMC,YAAY,GAAGlB,UAAU,CAACe,IAAI,EAAER,oBAAoB,GAAGO,sBAAsB,CAAC;EAEpF,OAAOb,YAAY,CAACC,UAAU,CAACgB,YAAY,CAAC,EAAEf,UAAU,CAACe,YAAY,CAAC,CAAC;AACzE","names":["addMinutes","joinDateTime","formatDate","formatTime","parseTimezoneOffset","shiftTimezoneOffset","dateString","targetTimezoneOffset","split","datePart","_b","timeAndOffsetPart","valueWithoutOffset","timePart","originalTimezoneOffset","date","Date","getTimezoneOffset","adjustedDate"],"sources":["/Users/dcastro/node_modules/src/internal/utils/date-time/shift-timezone-offset.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { addMinutes } from 'date-fns';\nimport { joinDateTime } from '.';\nimport { formatDate } from './format-date';\nimport { formatTime } from './format-time';\nimport { parseTimezoneOffset } from './parse-timezone-offset';\n\n/**\n * Re-formats an ISO8601 date string so that it is expressed using the\n * target timezone offset. The returned date string still represents the\n * same instant in time, but contains no visible offset.\n *\n * Example:\n * ```\n * shiftTimezoneOffset(\"2020-01-01T09:00:00+03:00\", 2 * 60) === \"2020-01-01T08:00:00\"\n * ```\n */\nexport function shiftTimezoneOffset(dateString: string, targetTimezoneOffset?: number) {\n  const [datePart, timeAndOffsetPart = ''] = dateString.split('T');\n  const [timePart] = timeAndOffsetPart.split(/-|\\+|Z/);\n  const valueWithoutOffset = joinDateTime(datePart, timePart);\n  const originalTimezoneOffset = parseTimezoneOffset(dateString);\n\n  const date = new Date(valueWithoutOffset);\n  targetTimezoneOffset = targetTimezoneOffset ?? 0 - date.getTimezoneOffset();\n  const adjustedDate = addMinutes(date, targetTimezoneOffset - originalTimezoneOffset);\n\n  return joinDateTime(formatDate(adjustedDate), formatTime(adjustedDate));\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}