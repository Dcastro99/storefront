{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport InternalSegmentedControl from '../segmented-control/internal';\nimport segmentedControlStyles from '../segmented-control/styles.css.js';\nimport buttonTriggerStyles from '../internal/components/button-trigger/styles.css.js';\nimport styles from './styles.css.js';\nexport default forwardRef(ModeSwitcher);\nfunction ModeSwitcher(_a, ref) {\n  var i18nStrings = _a.i18nStrings,\n    mode = _a.mode,\n    onChange = _a.onChange;\n  var elementRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function () {\n        if (elementRef.current) {\n          elementRef.current.getElementsByClassName(segmentedControlStyles.selected)[0].focus();\n          var select = elementRef.current.getElementsByClassName(buttonTriggerStyles['button-trigger']);\n          for (var _i = 0, _a = Array.prototype.slice.call(select); _i < _a.length; _i++) {\n            var button = _a[_i];\n            button.focus();\n          }\n        }\n      }\n    };\n  });\n  return React.createElement(\"div\", {\n    ref: elementRef\n  }, React.createElement(InternalSegmentedControl, {\n    className: styles['mode-switch'],\n    selectedId: mode,\n    options: [{\n      id: 'relative',\n      text: i18nStrings.relativeModeTitle\n    }, {\n      id: 'absolute',\n      text: i18nStrings.absoluteModeTitle\n    }],\n    onChange: function (e) {\n      return onChange(e.detail.selectedId);\n    }\n  }));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,mBAAmB,EAAEC,MAAM,QAAQ,OAAO;AAEtE,OAAOC,wBAAwB,MAAM,+BAA+B;AAEpE,OAAOC,sBAAsB,MAAM,oCAAoC;AACvE,OAAOC,mBAAmB,MAAM,qDAAqD;AACrF,OAAOC,MAAM,MAAM,iBAAiB;AAOpC,eAAeN,UAAU,CAACO,YAAY,CAAC;AAEvC,SAASA,YAAY,CAACC,EAAkD,EAAEC,GAAyB;MAA3EC,WAAW;IAAEC,IAAI;IAAEC,QAAQ;EACjD,IAAMC,UAAU,GAAGX,MAAM,CAAiB,IAAI,CAAC;EAE/CD,mBAAmB,CAACQ,GAAG,EAAE;IAAM,OAAC;MAC9BK,KAAK,EAAL;QACE,IAAID,UAAU,CAACE,OAAO,EAAE;UACrBF,UAAU,CAACE,OAAO,CAACC,sBAAsB,CAACZ,sBAAsB,CAACa,QAAQ,CAAC,CAAC,CAAC,CAAuB,CAACH,KAAK,EAAE;UAE5G,IAAMI,MAAM,GAAGL,UAAU,CAACE,OAAO,CAACC,sBAAsB,CAACX,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;UAE/F,KAAqB,UAAkC,EAAlCG,UAAK,CAACW,SAAS,CAACC,KAAK,CAACC,IAAI,CAACH,MAAM,CAAC,EAAlCI,cAAkC,EAAlCA,IAAkC,EAAE;YAApD,IAAMC,MAAM;YACfA,MAAM,CAACT,KAAK,EAAE;;;MAGpB;KACD;EAZ8B,CAY7B,CAAC;EAEH,OACEf;IAAKU,GAAG,EAAEI;EAAU,GAClBd,oBAACI,wBAAwB;IACvBqB,SAAS,EAAElB,MAAM,CAAC,aAAa,CAAC;IAChCmB,UAAU,EAAEd,IAAI;IAChBe,OAAO,EAAE,CACP;MAAEC,EAAE,EAAE,UAAU;MAAEC,IAAI,EAAElB,WAAW,CAACmB;IAAiB,CAAE,EACvD;MAAEF,EAAE,EAAE,UAAU;MAAEC,IAAI,EAAElB,WAAW,CAACoB;IAAiB,CAAE,CACxD;IACDlB,QAAQ,EAAE,WAAC;MAAI,eAAQ,CAACmB,CAAC,CAACC,MAAM,CAACP,UAAqC,CAAC;IAAxD;EAAwD,EACvE,CACE;AAEV","names":["React","forwardRef","useImperativeHandle","useRef","InternalSegmentedControl","segmentedControlStyles","buttonTriggerStyles","styles","ModeSwitcher","_a","ref","i18nStrings","mode","onChange","elementRef","focus","current","getElementsByClassName","selected","select","prototype","slice","call","_i","button","className","selectedId","options","id","text","relativeModeTitle","absoluteModeTitle","e","detail"],"sources":["/Users/dcastro/node_modules/src/date-range-picker/mode-switcher.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport { DateRangePickerProps, Focusable } from './interfaces';\nimport InternalSegmentedControl from '../segmented-control/internal';\n\nimport segmentedControlStyles from '../segmented-control/styles.css.js';\nimport buttonTriggerStyles from '../internal/components/button-trigger/styles.css.js';\nimport styles from './styles.css.js';\n\ninterface ModeSwitcherProps extends Pick<Required<DateRangePickerProps>, 'i18nStrings'> {\n  mode: 'absolute' | 'relative';\n  onChange: (mode: 'absolute' | 'relative') => void;\n}\n\nexport default forwardRef(ModeSwitcher);\n\nfunction ModeSwitcher({ i18nStrings, mode, onChange }: ModeSwitcherProps, ref: React.Ref<Focusable>) {\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  useImperativeHandle(ref, () => ({\n    focus() {\n      if (elementRef.current) {\n        (elementRef.current.getElementsByClassName(segmentedControlStyles.selected)[0] as HTMLButtonElement).focus();\n\n        const select = elementRef.current.getElementsByClassName(buttonTriggerStyles['button-trigger']);\n\n        for (const button of Array.prototype.slice.call(select)) {\n          button.focus();\n        }\n      }\n    },\n  }));\n\n  return (\n    <div ref={elementRef}>\n      <InternalSegmentedControl\n        className={styles['mode-switch']}\n        selectedId={mode}\n        options={[\n          { id: 'relative', text: i18nStrings.relativeModeTitle },\n          { id: 'absolute', text: i18nStrings.absoluteModeTitle },\n        ]}\n        onChange={e => onChange(e.detail.selectedId as 'absolute' | 'relative')}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}