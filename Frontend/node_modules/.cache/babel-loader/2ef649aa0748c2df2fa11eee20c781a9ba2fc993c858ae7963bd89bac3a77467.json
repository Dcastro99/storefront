{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState, useLayoutEffect, useCallback, useEffect, createContext, useMemo } from 'react';\nimport { useAppLayoutContext } from '../internal/context/app-layout-context';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { findUpUntil, supportsStickyPosition } from '../internal/utils/dom';\nimport { getOverflowParents } from '../internal/utils/scrollable-containers';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport customCssProps from '../internal/generated/custom-css-properties';\nexport var StickyHeaderContext = createContext({\n  isStuck: false\n});\nexport var useStickyHeader = function (rootRef, headerRef, __stickyHeader, __stickyOffset) {\n  var currentRootRef = rootRef.current;\n  var currentHeaderRef = headerRef.current;\n  var totalBorder = useMemo(function () {\n    var containerRootBorder = currentRootRef ? parseInt(getComputedStyle(currentRootRef).getPropertyValue('border-top-width'), 10) : 0;\n    var headerBorder = currentHeaderRef ? parseInt(getComputedStyle(currentHeaderRef).getPropertyValue('border-top-width'), 10) : 0;\n    return containerRootBorder + headerBorder;\n  }, [currentRootRef, currentHeaderRef]);\n  // We reach into AppLayoutContext in case sticky header needs to be offset down by the height\n  // of other sticky elements positioned on top of the view.\n  var stickyOffsetTop = useAppLayoutContext().stickyOffsetTop;\n  var isSticky = useSupportsStickyHeader() && !!__stickyHeader;\n  var isRefresh = useVisualRefresh();\n  // If it has overflow parents inside the app layout, we shouldn't apply a sticky offset.\n  var _a = useState(false),\n    hasInnerOverflowParents = _a[0],\n    setHasInnerOverflowParents = _a[1];\n  var _b = useState(false),\n    isStuck = _b[0],\n    setIsStuck = _b[1];\n  useLayoutEffect(function () {\n    if (rootRef.current) {\n      var overflowParents = getOverflowParents(rootRef.current);\n      var mainElement = findUpUntil(rootRef.current, function (elem) {\n        return elem.tagName === 'MAIN';\n      });\n      // In both versions of the app layout, the scrolling element for disableBodyScroll\n      // is the <main>. If the closest overflow parent is also the closest <main> and we have\n      // offset values, it's safe to assume that it's the app layout scroll root and we\n      // should stop there.\n      setHasInnerOverflowParents(overflowParents.length > 0 && overflowParents[0] !== mainElement);\n    }\n  }, [rootRef]);\n  var effectiveStickyOffset = __stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : hasInnerOverflowParents ? 0 : stickyOffsetTop;\n  /**\n   * The AppLayout refactor removed the need for passing the sticky offset in px all the time through the\n   * AppLayoutDomContext provider because that information already exists on the DOM in a custom property\n   * on the Layout subcomponent. Thus, if the Container header is sticky, we are in Visual Refresh and use\n   * body scroll then we will use that property. When a component is used outside AppLayout, we fall back\n   * to the default offset calculated in AppLayoutDomContext.\n   */\n  var computedOffset = \"\".concat(effectiveStickyOffset - totalBorder, \"px\");\n  if (isRefresh && !hasInnerOverflowParents) {\n    computedOffset = \"var(\".concat(customCssProps.offsetTopWithNotifications, \", \").concat(computedOffset, \")\");\n  }\n  var stickyStyles = isSticky ? {\n    style: {\n      top: computedOffset\n    }\n  } : {};\n  // \"stuck\" state, when the header has moved from its original posititon has a\n  // box-shadow, applied here by a \"header-stuck\" className\n  var checkIfStuck = useCallback(function () {\n    if (rootRef.current && headerRef.current) {\n      var rootTop = rootRef.current.getBoundingClientRect().top;\n      var headerTop = headerRef.current.getBoundingClientRect().top;\n      if (rootTop + totalBorder < headerTop) {\n        setIsStuck(true);\n      } else {\n        setIsStuck(false);\n      }\n    }\n  }, [rootRef, headerRef, totalBorder]);\n  useEffect(function () {\n    if (isSticky) {\n      window.addEventListener('scroll', checkIfStuck, true);\n      window.addEventListener('resize', checkIfStuck);\n      return function () {\n        window.removeEventListener('scroll', checkIfStuck, true);\n        window.removeEventListener('resize', checkIfStuck);\n      };\n    }\n  }, [isSticky, checkIfStuck]);\n  return {\n    isSticky: isSticky,\n    isStuck: isStuck,\n    stickyStyles: stickyStyles\n  };\n};\nexport function useSupportsStickyHeader() {\n  var isMobile = useMobile();\n  return supportsStickyPosition() && !isMobile;\n}","map":{"version":3,"mappings":"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","names":["useState","useLayoutEffect","useCallback","useEffect","createContext","useMemo","useAppLayoutContext","useMobile","findUpUntil","supportsStickyPosition","getOverflowParents","useVisualRefresh","customCssProps","StickyHeaderContext","isStuck","useStickyHeader","rootRef","headerRef","__stickyHeader","__stickyOffset","currentRootRef","current","currentHeaderRef","totalBorder","containerRootBorder","parseInt","getComputedStyle","getPropertyValue","headerBorder","isSticky","useSupportsStickyHeader","isRefresh","hasInnerOverflowParents","setHasInnerOverflowParents","setIsStuck","overflowParents","mainElement","tagName","length","effectiveStickyOffset","stickyOffsetTop","computedOffset","offsetTopWithNotifications","stickyStyles","style","top","checkIfStuck","rootTop","getBoundingClientRect","headerTop","window","addEventListener","removeEventListener","isMobile"],"sources":["/Users/dcastro/node_modules/src/container/use-sticky-header.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { RefObject, useState, useLayoutEffect, useCallback, useEffect, createContext, useMemo } from 'react';\nimport { useAppLayoutContext } from '../internal/context/app-layout-context';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { findUpUntil, supportsStickyPosition } from '../internal/utils/dom';\nimport { getOverflowParents } from '../internal/utils/scrollable-containers';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport customCssProps from '../internal/generated/custom-css-properties';\n\ninterface StickyHeaderContextProps {\n  isStuck: boolean;\n}\n\nexport const StickyHeaderContext = createContext<StickyHeaderContextProps>({ isStuck: false });\n\nexport const useStickyHeader = (\n  rootRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  __stickyHeader?: boolean,\n  __stickyOffset?: number\n) => {\n  const currentRootRef = rootRef.current;\n  const currentHeaderRef = headerRef.current;\n  const totalBorder = useMemo(() => {\n    const containerRootBorder = currentRootRef\n      ? parseInt(getComputedStyle(currentRootRef).getPropertyValue('border-top-width'), 10)\n      : 0;\n    const headerBorder = currentHeaderRef\n      ? parseInt(getComputedStyle(currentHeaderRef).getPropertyValue('border-top-width'), 10)\n      : 0;\n    return containerRootBorder + headerBorder;\n  }, [currentRootRef, currentHeaderRef]);\n\n  // We reach into AppLayoutContext in case sticky header needs to be offset down by the height\n  // of other sticky elements positioned on top of the view.\n  const { stickyOffsetTop } = useAppLayoutContext();\n  const isSticky = useSupportsStickyHeader() && !!__stickyHeader;\n  const isRefresh = useVisualRefresh();\n\n  // If it has overflow parents inside the app layout, we shouldn't apply a sticky offset.\n  const [hasInnerOverflowParents, setHasInnerOverflowParents] = useState(false);\n  const [isStuck, setIsStuck] = useState(false);\n  useLayoutEffect(() => {\n    if (rootRef.current) {\n      const overflowParents = getOverflowParents(rootRef.current);\n      const mainElement = findUpUntil(rootRef.current, elem => elem.tagName === 'MAIN');\n      // In both versions of the app layout, the scrolling element for disableBodyScroll\n      // is the <main>. If the closest overflow parent is also the closest <main> and we have\n      // offset values, it's safe to assume that it's the app layout scroll root and we\n      // should stop there.\n      setHasInnerOverflowParents(overflowParents.length > 0 && overflowParents[0] !== mainElement);\n    }\n  }, [rootRef]);\n\n  const effectiveStickyOffset = __stickyOffset ?? (hasInnerOverflowParents ? 0 : stickyOffsetTop);\n\n  /**\n   * The AppLayout refactor removed the need for passing the sticky offset in px all the time through the\n   * AppLayoutDomContext provider because that information already exists on the DOM in a custom property\n   * on the Layout subcomponent. Thus, if the Container header is sticky, we are in Visual Refresh and use\n   * body scroll then we will use that property. When a component is used outside AppLayout, we fall back\n   * to the default offset calculated in AppLayoutDomContext.\n   */\n  let computedOffset = `${effectiveStickyOffset - totalBorder}px`;\n  if (isRefresh && !hasInnerOverflowParents) {\n    computedOffset = `var(${customCssProps.offsetTopWithNotifications}, ${computedOffset})`;\n  }\n\n  const stickyStyles = isSticky\n    ? {\n        style: {\n          top: computedOffset,\n        },\n      }\n    : {};\n\n  // \"stuck\" state, when the header has moved from its original posititon has a\n  // box-shadow, applied here by a \"header-stuck\" className\n  const checkIfStuck = useCallback(() => {\n    if (rootRef.current && headerRef.current) {\n      const rootTop = rootRef.current.getBoundingClientRect().top;\n      const headerTop = headerRef.current.getBoundingClientRect().top;\n      if (rootTop + totalBorder < headerTop) {\n        setIsStuck(true);\n      } else {\n        setIsStuck(false);\n      }\n    }\n  }, [rootRef, headerRef, totalBorder]);\n  useEffect(() => {\n    if (isSticky) {\n      window.addEventListener('scroll', checkIfStuck, true);\n      window.addEventListener('resize', checkIfStuck);\n      return () => {\n        window.removeEventListener('scroll', checkIfStuck, true);\n        window.removeEventListener('resize', checkIfStuck);\n      };\n    }\n  }, [isSticky, checkIfStuck]);\n  return {\n    isSticky,\n    isStuck,\n    stickyStyles,\n  };\n};\n\nexport function useSupportsStickyHeader() {\n  const isMobile = useMobile();\n  return supportsStickyPosition() && !isMobile;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}