{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport AppBar from './app-bar';\nimport { AppLayoutContext, AppLayoutProvider } from './context';\nimport Background from './background';\nimport Header from './header';\nimport Layout from './layout';\nimport Main from './main';\nimport Navigation from './navigation';\nimport Notifications from './notifications';\nimport SplitPanel from './split-panel';\nimport Tools from './tools';\n/**\n * In mobile viewports the AppBar position changes to sticky and is placed\n * above the notifications. This is handled by adjusting the row positions\n * in CSS for the AppBar and Notifications components relative to the grid\n * definition in the Layout component. In order to keep alignment between\n * the visual ordering and logical ordering of the document the logical order\n * of these components is also modified in the markup below.\n */\nvar AppLayoutWithRef = React.forwardRef(function AppLayout(props, ref) {\n  var isMobile = useContext(AppLayoutContext).isMobile;\n  return React.createElement(AppLayoutProvider, __assign({}, props, {\n    ref: ref\n  }), React.createElement(SplitPanel, null, React.createElement(Layout, null, React.createElement(Background, null), React.createElement(Navigation, null), isMobile && React.createElement(AppBar, null), React.createElement(Notifications, null), !isMobile && React.createElement(AppBar, null), React.createElement(Header, null), React.createElement(Main, null), React.createElement(SplitPanel.Bottom, null), React.createElement(Tools, null, React.createElement(SplitPanel.Side, null)))));\n});\nexport default AppLayoutWithRef;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAASC,gBAAgB,EAAEC,iBAAiB,QAAQ,WAAW;AAE/D,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,UAAU,MAAM,eAAe;AACtC,OAAOC,KAAK,MAAM,SAAS;AAE3B;;;;;;;;AAQA,IAAMC,gBAAgB,GAAGb,KAAK,CAACc,UAAU,CAAC,SAASC,SAAS,CAC1DC,KAAqB,EACrBC,GAAkC;EAE1B,YAAQ,GAAKhB,UAAU,CAACE,gBAAgB,CAAC,SAAjC;EAEhB,OACEH,oBAACI,iBAAiB,eAAKY,KAAK;IAAEC,GAAG,EAAEA;EAAG,IACpCjB,oBAACW,UAAU,QACTX,oBAACO,MAAM,QACLP,oBAACK,UAAU,OAAG,EAEdL,oBAACS,UAAU,OAAG,EAEbS,QAAQ,IAAIlB,oBAACE,MAAM,OAAG,EAEvBF,oBAACU,aAAa,OAAG,EAEhB,CAACQ,QAAQ,IAAIlB,oBAACE,MAAM,OAAG,EAExBF,oBAACM,MAAM,OAAG,EAEVN,oBAACQ,IAAI,OAAG,EAERR,oBAACW,UAAU,CAACQ,MAAM,OAAG,EAErBnB,oBAACY,KAAK,QACJZ,oBAACW,UAAU,CAACS,IAAI,OAAG,CACb,CACD,CACE,CACK;AAExB,CAAC,CAAC;AAEF,eAAeP,gBAAgB","names":["React","useContext","AppBar","AppLayoutContext","AppLayoutProvider","Background","Header","Layout","Main","Navigation","Notifications","SplitPanel","Tools","AppLayoutWithRef","forwardRef","AppLayout","props","ref","isMobile","Bottom","Side"],"sources":["/Users/dcastro/node_modules/src/app-layout/visual-refresh/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport AppBar from './app-bar';\nimport { AppLayoutContext, AppLayoutProvider } from './context';\nimport { AppLayoutProps } from '../interfaces';\nimport Background from './background';\nimport Header from './header';\nimport Layout from './layout';\nimport Main from './main';\nimport Navigation from './navigation';\nimport Notifications from './notifications';\nimport SplitPanel from './split-panel';\nimport Tools from './tools';\n\n/**\n * In mobile viewports the AppBar position changes to sticky and is placed\n * above the notifications. This is handled by adjusting the row positions\n * in CSS for the AppBar and Notifications components relative to the grid\n * definition in the Layout component. In order to keep alignment between\n * the visual ordering and logical ordering of the document the logical order\n * of these components is also modified in the markup below.\n */\nconst AppLayoutWithRef = React.forwardRef(function AppLayout(\n  props: AppLayoutProps,\n  ref: React.Ref<AppLayoutProps.Ref>\n) {\n  const { isMobile } = useContext(AppLayoutContext);\n\n  return (\n    <AppLayoutProvider {...props} ref={ref}>\n      <SplitPanel>\n        <Layout>\n          <Background />\n\n          <Navigation />\n\n          {isMobile && <AppBar />}\n\n          <Notifications />\n\n          {!isMobile && <AppBar />}\n\n          <Header />\n\n          <Main />\n\n          <SplitPanel.Bottom />\n\n          <Tools>\n            <SplitPanel.Side />\n          </Tools>\n        </Layout>\n      </SplitPanel>\n    </AppLayoutProvider>\n  );\n});\n\nexport default AppLayoutWithRef;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}