{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { getBaseProps } from '../internal/base-component';\nimport { warnOnce } from '../internal/logging';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { Progress, ResultState, SmallText } from './internal';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nexport default function ProgressBar(_a) {\n  var _b = _a.value,\n    value = _b === void 0 ? 0 : _b,\n    _c = _a.status,\n    status = _c === void 0 ? 'in-progress' : _c,\n    _d = _a.variant,\n    variant = _d === void 0 ? 'standalone' : _d,\n    resultButtonText = _a.resultButtonText,\n    label = _a.label,\n    description = _a.description,\n    additionalInfo = _a.additionalInfo,\n    resultText = _a.resultText,\n    onResultButtonClick = _a.onResultButtonClick,\n    rest = __rest(_a, [\"value\", \"status\", \"variant\", \"resultButtonText\", \"label\", \"description\", \"additionalInfo\", \"resultText\", \"onResultButtonClick\"]);\n  var __internalRootRef = useBaseComponent('ProgressBar').__internalRootRef;\n  var baseProps = getBaseProps(rest);\n  var generatedName = useUniqueId('awsui-progress-bar-');\n  var labelId = \"\".concat(generatedName, \"-label\");\n  var isInFlash = variant === 'flash';\n  var isInProgressState = status === 'in-progress';\n  if (isInFlash && resultButtonText) {\n    warnOnce('ProgressBar', 'The `resultButtonText` is ignored if you set `variant=\"flash\"`, and the result button is not displayed. Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item in which the progress bar component is embedded.');\n  }\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root, variant && styles[variant]),\n    ref: __internalRootRef\n  }), React.createElement(\"div\", {\n    className: isInFlash ? styles['flash-container'] : undefined\n  }, React.createElement(\"div\", {\n    className: clsx(styles['word-wrap'], styles[\"label-\".concat(variant)]),\n    id: labelId\n  }, label), description && React.createElement(SmallText, {\n    color: isInFlash ? 'inherit' : undefined\n  }, description), React.createElement(\"div\", {\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\"\n  }, isInProgressState ? React.createElement(Progress, {\n    value: value,\n    labelId: labelId,\n    isInFlash: isInFlash\n  }) : React.createElement(ResultState, {\n    resultText: resultText,\n    isInFlash: isInFlash,\n    resultButtonText: resultButtonText,\n    status: status,\n    onClick: function () {\n      fireNonCancelableEvent(onResultButtonClick);\n    }\n  }))), additionalInfo && React.createElement(SmallText, {\n    color: isInFlash ? 'inherit' : undefined\n  }, additionalInfo));\n}\napplyDisplayName(ProgressBar, 'ProgressBar');","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AAEvB,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,YAAY,QAAQ,4BAA4B;AACzD,SAASC,QAAQ,QAAQ,qBAAqB;AAE9C,SAASC,sBAAsB,QAAQ,oBAAoB;AAC3D,SAASC,WAAW,QAAQ,iCAAiC;AAC7D,SAASC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,YAAY;AAC7D,SAASC,gBAAgB,QAAQ,sCAAsC;AACvE,OAAOC,gBAAgB,MAAM,sCAAsC;AAInE,eAAc,SAAUC,WAAW,CAACC,EAWjB;EAVjB,iBAAS;IAATC,KAAK,mBAAG,CAAC;IACTC,cAAsB;IAAtBC,MAAM,mBAAG,aAAa;IACtBC,eAAsB;IAAtBC,OAAO,mBAAG,YAAY;IACtBC,gBAAgB;IAChBC,KAAK;IACLC,WAAW;IACXC,cAAc;IACdC,UAAU;IACVC,mBAAmB;IAChBC,IAAI,cAV2B,iIAWnC,CADQ;EAEC,qBAAiB,GAAKd,gBAAgB,CAAC,aAAa,CAAC,kBAApC;EACzB,IAAMe,SAAS,GAAGvB,YAAY,CAACsB,IAAI,CAAC;EACpC,IAAME,aAAa,GAAGrB,WAAW,CAAC,qBAAqB,CAAC;EAExD,IAAMsB,OAAO,GAAG,UAAGD,aAAa,WAAQ;EACxC,IAAME,SAAS,GAAGX,OAAO,KAAK,OAAO;EACrC,IAAMY,iBAAiB,GAAGd,MAAM,KAAK,aAAa;EAElD,IAAIa,SAAS,IAAIV,gBAAgB,EAAE;IACjCf,QAAQ,CACN,aAAa,EACb,oPAAoP,CACrP;;EAGH,OACEJ,wCACM0B,SAAS;IACbK,SAAS,EAAE9B,IAAI,CAACyB,SAAS,CAACK,SAAS,EAAE7B,MAAM,CAAC8B,IAAI,EAAEd,OAAO,IAAIhB,MAAM,CAACgB,OAAO,CAAC,CAAC;IAC7Ee,GAAG,EAAEC;EAAiB,IAEtBlC;IAAK+B,SAAS,EAAEF,SAAS,GAAG3B,MAAM,CAAC,iBAAiB,CAAC,GAAGiC;EAAS,GAC/DnC;IAAK+B,SAAS,EAAE9B,IAAI,CAACC,MAAM,CAAC,WAAW,CAAC,EAAEA,MAAM,CAAC,gBAASgB,OAAO,CAAE,CAAC,CAAC;IAAEkB,EAAE,EAAER;EAAO,GAC/ER,KAAK,CACF,EACLC,WAAW,IAAIrB,oBAACS,SAAS;IAAC4B,KAAK,EAAER,SAAS,GAAG,SAAS,GAAGM;EAAS,GAAGd,WAAW,CAAa,EAC9FrB;IAAA,aAAe,QAAQ;IAAA,eAAa;EAAM,GACvC8B,iBAAiB,GAChB9B,oBAACO,QAAQ;IAACO,KAAK,EAAEA,KAAK;IAAEc,OAAO,EAAEA,OAAO;IAAEC,SAAS,EAAEA;EAAS,EAAI,GAElE7B,oBAACQ,WAAW;IACVe,UAAU,EAAEA,UAAU;IACtBM,SAAS,EAAEA,SAAS;IACpBV,gBAAgB,EAAEA,gBAAgB;IAClCH,MAAM,EAAEA,MAAM;IACdsB,OAAO,EAAE;MACPjC,sBAAsB,CAACmB,mBAAmB,CAAC;IAC7C;EAAC,EAEJ,CACG,CACF,EACLF,cAAc,IAAItB,oBAACS,SAAS;IAAC4B,KAAK,EAAER,SAAS,GAAG,SAAS,GAAGM;EAAS,GAAGb,cAAc,CAAa,CAChG;AAEV;AAEAZ,gBAAgB,CAACE,WAAW,EAAE,aAAa,CAAC","names":["React","clsx","styles","getBaseProps","warnOnce","fireNonCancelableEvent","useUniqueId","Progress","ResultState","SmallText","applyDisplayName","useBaseComponent","ProgressBar","_a","value","_c","status","_d","variant","resultButtonText","label","description","additionalInfo","resultText","onResultButtonClick","rest","baseProps","generatedName","labelId","isInFlash","isInProgressState","className","root","ref","__internalRootRef","undefined","id","color","onClick"],"sources":["/Users/dcastro/node_modules/src/progress-bar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport styles from './styles.css.js';\nimport { getBaseProps } from '../internal/base-component';\nimport { warnOnce } from '../internal/logging';\nimport { ProgressBarProps } from './interfaces';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { Progress, ResultState, SmallText } from './internal';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\n\nexport { ProgressBarProps };\n\nexport default function ProgressBar({\n  value = 0,\n  status = 'in-progress',\n  variant = 'standalone',\n  resultButtonText,\n  label,\n  description,\n  additionalInfo,\n  resultText,\n  onResultButtonClick,\n  ...rest\n}: ProgressBarProps) {\n  const { __internalRootRef } = useBaseComponent('ProgressBar');\n  const baseProps = getBaseProps(rest);\n  const generatedName = useUniqueId('awsui-progress-bar-');\n\n  const labelId = `${generatedName}-label`;\n  const isInFlash = variant === 'flash';\n  const isInProgressState = status === 'in-progress';\n\n  if (isInFlash && resultButtonText) {\n    warnOnce(\n      'ProgressBar',\n      'The `resultButtonText` is ignored if you set `variant=\"flash\"`, and the result button is not displayed. Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item in which the progress bar component is embedded.'\n    );\n  }\n\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.root, variant && styles[variant])}\n      ref={__internalRootRef}\n    >\n      <div className={isInFlash ? styles['flash-container'] : undefined}>\n        <div className={clsx(styles['word-wrap'], styles[`label-${variant}`])} id={labelId}>\n          {label}\n        </div>\n        {description && <SmallText color={isInFlash ? 'inherit' : undefined}>{description}</SmallText>}\n        <div aria-live=\"polite\" aria-atomic=\"true\">\n          {isInProgressState ? (\n            <Progress value={value} labelId={labelId} isInFlash={isInFlash} />\n          ) : (\n            <ResultState\n              resultText={resultText}\n              isInFlash={isInFlash}\n              resultButtonText={resultButtonText}\n              status={status}\n              onClick={() => {\n                fireNonCancelableEvent(onResultButtonClick);\n              }}\n            />\n          )}\n        </div>\n      </div>\n      {additionalInfo && <SmallText color={isInFlash ? 'inherit' : undefined}>{additionalInfo}</SmallText>}\n    </div>\n  );\n}\n\napplyDisplayName(ProgressBar, 'ProgressBar');\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}