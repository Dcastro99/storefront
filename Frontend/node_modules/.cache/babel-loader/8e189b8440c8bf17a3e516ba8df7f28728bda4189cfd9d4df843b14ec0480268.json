{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { addMonths, endOfDay, isBefore, startOfDay, startOfMonth, isAfter, isSameMonth } from 'date-fns';\nimport styles from '../styles.css.js';\nimport CalendarHeader from './header';\nimport { Grids, selectFocusedDate } from './grids';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport InternalFormField from '../../form-field/internal';\nimport InternalDateInput from '../../date-input/internal';\nimport InternalTimeInput from '../../time-input/internal';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { getDateLabel, renderTimeLabel } from '../../calendar/utils/intl';\nimport LiveRegion from '../../internal/components/live-region';\nimport { normalizeStartOfWeek } from '../../calendar/utils/locales';\nimport { formatDate, formatTime, joinDateTime, parseDate } from '../../internal/utils/date-time';\nimport { getBaseDate } from '../../calendar/utils/navigation';\nexport default forwardRef(Calendar);\nfunction Calendar(_a, ref) {\n  var _b;\n  var locale = _a.locale,\n    startOfWeek = _a.startOfWeek,\n    isDateEnabled = _a.isDateEnabled,\n    onSelectDateRange = _a.onSelectDateRange,\n    _c = _a.initialEndDate,\n    initialEndDate = _c === void 0 ? '' : _c,\n    _d = _a.initialStartDate,\n    initialStartDate = _d === void 0 ? '' : _d,\n    i18nStrings = _a.i18nStrings,\n    dateOnly = _a.dateOnly,\n    isSingleGrid = _a.isSingleGrid,\n    timeInputFormat = _a.timeInputFormat;\n  var elementRef = useRef(null);\n  var normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, locale);\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function () {\n        if (elementRef.current) {\n          var prevButton = elementRef.current.getElementsByClassName(styles['calendar-prev-month-btn'])[0];\n          prevButton === null || prevButton === void 0 ? void 0 : prevButton.focus();\n        }\n      }\n    };\n  });\n  var _e = initialStartDate.split('T'),\n    _f = _e[0],\n    initialStartDateString = _f === void 0 ? '' : _f,\n    _g = _e[1],\n    initialStartTimeString = _g === void 0 ? '' : _g;\n  var _h = initialEndDate.split('T'),\n    _j = _h[0],\n    initialEndDateString = _j === void 0 ? '' : _j,\n    _k = _h[1],\n    initialEndTimeString = _k === void 0 ? '' : _k;\n  var _l = useState(initialStartDateString),\n    startDateString = _l[0],\n    setStartDateString = _l[1];\n  var _m = useState(initialStartTimeString),\n    startTimeString = _m[0],\n    setStartTimeString = _m[1];\n  var _o = useState(initialEndDateString),\n    endDateString = _o[0],\n    setEndDateString = _o[1];\n  var _p = useState(initialEndTimeString),\n    endTimeString = _p[0],\n    setEndTimeString = _p[1];\n  var selectedStartDate = parseDate(startDateString, true);\n  var selectedEndDate = parseDate(endDateString, true);\n  var _q = useState(''),\n    announcement = _q[0],\n    setAnnouncement = _q[1];\n  var _r = useState(function () {\n      if (startDateString) {\n        var startDate = parseDate(startDateString);\n        if (isSingleGrid) {\n          return startOfMonth(startDate);\n        }\n        return startOfMonth(addMonths(startDate, 1));\n      }\n      if (endDateString) {\n        return startOfMonth(parseDate(endDateString));\n      }\n      return startOfMonth(Date.now());\n    }),\n    currentMonth = _r[0],\n    setCurrentMonth = _r[1];\n  var _s = useState(function () {\n      if (selectedStartDate) {\n        if (isSameMonth(selectedStartDate, currentMonth)) {\n          return selectedStartDate;\n        }\n        if (!isSingleGrid && isSameMonth(selectedStartDate, addMonths(currentMonth, -1))) {\n          return selectedStartDate;\n        }\n      }\n      return selectFocusedDate(selectedStartDate, currentMonth, isDateEnabled);\n    }),\n    focusedDate = _s[0],\n    setFocusedDate = _s[1];\n  useEffect(function () {\n    // This effect \"synchronizes\" the local state update back up to the overall DateRangePicker component\n    var startDate = joinDateTime(startDateString, startTimeString);\n    var endDate = joinDateTime(endDateString, endTimeString);\n    if (startDate !== initialStartDate || endDate !== initialEndDate) {\n      onSelectDateRange({\n        startDate: startDate,\n        endDate: endDate,\n        type: 'absolute'\n      });\n    }\n  }, [startDateString, startTimeString, endDateString, endTimeString, onSelectDateRange, initialStartDate, initialEndDate]);\n  var onSelectDateHandler = function (selectedDate) {\n    // recommended to include the start/end time announced with the selection\n    // because the user is not aware of the fact that a start/end time is also set as soon as they select a date\n    var announceStart = function (startDate) {\n      return i18nStrings.startDateLabel + ', ' + getDateLabel(locale, startDate) + ', ' + i18nStrings.startTimeLabel + ', ' + renderTimeLabel(locale, startDate, timeInputFormat) + '. ';\n    };\n    var announceEnd = function (endDate) {\n      return i18nStrings.endDateLabel + ', ' + getDateLabel(locale, endDate) + ', ' + i18nStrings.endTimeLabel + ', ' + renderTimeLabel(locale, endDate, timeInputFormat) + '. ';\n    };\n    var announceRange = function (startDate, endDate) {\n      if (!i18nStrings.renderSelectedAbsoluteRangeAriaLive) {\n        return \"\".concat(getDateLabel(locale, startDate), \" \\u2013 \").concat(getDateLabel(locale, endDate));\n      }\n      return i18nStrings.renderSelectedAbsoluteRangeAriaLive(getDateLabel(locale, startDate), getDateLabel(locale, endDate));\n    };\n    // If both fields are empty, we set the start date\n    if (!startDateString && !endDateString) {\n      var startDate = startOfDay(selectedDate);\n      setStartDateString(formatDate(startDate));\n      setStartTimeString(formatTime(startDate));\n      setAnnouncement(announceStart(startDate));\n      return;\n    }\n    // If both fields are set, we start new\n    if (startDateString && endDateString) {\n      var startDate = startOfDay(selectedDate);\n      setStartDateString(formatDate(startDate));\n      setStartTimeString(formatTime(startDate));\n      setEndDateString('');\n      setEndTimeString('');\n      setAnnouncement(announceStart(startDate));\n      return;\n    }\n    // If only the END date is empty, we fill it (and swap dates if needed)\n    if (startDateString && !endDateString) {\n      var parsedStartDate = parseDate(startDateString);\n      if (isBefore(selectedDate, parsedStartDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        var startDate = startOfDay(selectedDate);\n        var endDate = endOfDay(parsedStartDate);\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceStart(startDate) + announceRange(startDate, endDate));\n      } else {\n        var endDate = endOfDay(selectedDate);\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceEnd(endDate) + announceRange(parsedStartDate, endDate));\n      }\n      return;\n    }\n    // If only the START date is empty, we fill it (and swap dates if needed)\n    if (!startDateString && endDateString) {\n      var existingEndDate = parseDate(endDateString);\n      if (isAfter(selectedDate, existingEndDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        var startDate = startOfDay(existingEndDate);\n        var endDate = endOfDay(selectedDate);\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceEnd(endDate) + announceRange(startDate, endDate));\n      } else {\n        var startDate = startOfDay(selectedDate);\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n        setAnnouncement(announceStart(startDate) + announceRange(startDate, existingEndDate));\n      }\n      return;\n    }\n    // All possible conditions are covered above\n  };\n\n  var onHeaderChangeMonthHandler = function (isPrevious) {\n    var newCurrentMonth = addMonths(currentMonth, isPrevious ? -1 : 1);\n    setCurrentMonth(newCurrentMonth);\n    var newBaseDateMonth = isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, -1);\n    var newBaseDate = getBaseDate(newBaseDateMonth, isDateEnabled);\n    setFocusedDate(newBaseDate);\n  };\n  var onChangeStartDate = function (e) {\n    setStartDateString(e.detail.value);\n    if (e.detail.value.length >= 8) {\n      var newCurrentMonth = startOfMonth(parseDate(e.detail.value));\n      setCurrentMonth(isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, 1));\n    }\n  };\n  var onChangeEndDate = function (e) {\n    setEndDateString(e.detail.value);\n  };\n  var headingIdPrefix = useUniqueId('date-range-picker-calendar-heading');\n  return React.createElement(React.Fragment, null, React.createElement(InternalSpaceBetween, {\n    size: \"s\"\n  }, React.createElement(\"div\", {\n    ref: elementRef,\n    className: clsx(styles.calendar, (_b = {}, _b[styles['one-grid']] = isSingleGrid, _b))\n  }, React.createElement(CalendarHeader, {\n    baseDate: currentMonth,\n    locale: locale,\n    onChangeMonth: onHeaderChangeMonthHandler,\n    previousMonthLabel: i18nStrings.previousMonthAriaLabel,\n    nextMonthLabel: i18nStrings.nextMonthAriaLabel,\n    isSingleGrid: isSingleGrid,\n    headingIdPrefix: headingIdPrefix\n  }), React.createElement(Grids, {\n    isSingleGrid: isSingleGrid,\n    locale: locale,\n    baseDate: currentMonth,\n    focusedDate: focusedDate,\n    onFocusedDateChange: setFocusedDate,\n    isDateEnabled: isDateEnabled,\n    onSelectDate: onSelectDateHandler,\n    onChangeMonth: setCurrentMonth,\n    startOfWeek: normalizedStartOfWeek,\n    todayAriaLabel: i18nStrings.todayAriaLabel,\n    selectedStartDate: selectedStartDate,\n    selectedEndDate: selectedEndDate,\n    headingIdPrefix: headingIdPrefix\n  })), React.createElement(InternalFormField, {\n    constraintText: i18nStrings.dateTimeConstraintText\n  }, React.createElement(\"div\", {\n    className: styles['date-and-time-container']\n  }, React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper']\n  }, React.createElement(InternalFormField, {\n    label: i18nStrings.startDateLabel,\n    stretch: true\n  }, React.createElement(InternalDateInput, {\n    value: startDateString,\n    className: styles['start-date-input'],\n    onChange: onChangeStartDate,\n    placeholder: \"YYYY/MM/DD\"\n  })), !dateOnly && React.createElement(InternalFormField, {\n    label: i18nStrings.startTimeLabel,\n    stretch: true\n  }, React.createElement(InternalTimeInput, {\n    value: startTimeString,\n    onChange: function (e) {\n      return setStartTimeString(e.detail.value);\n    },\n    format: timeInputFormat,\n    placeholder: timeInputFormat,\n    className: styles['start-time-input']\n  }))), React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper']\n  }, React.createElement(InternalFormField, {\n    label: i18nStrings.endDateLabel,\n    stretch: true\n  }, React.createElement(InternalDateInput, {\n    value: endDateString,\n    className: styles['end-date-input'],\n    onChange: onChangeEndDate,\n    placeholder: \"YYYY/MM/DD\"\n  })), !dateOnly && React.createElement(InternalFormField, {\n    label: i18nStrings.endTimeLabel,\n    stretch: true\n  }, React.createElement(InternalTimeInput, {\n    value: endTimeString,\n    onChange: function (e) {\n      return setEndTimeString(e.detail.value);\n    },\n    format: timeInputFormat,\n    placeholder: timeInputFormat,\n    className: styles['end-time-input']\n  })))))), React.createElement(LiveRegion, {\n    className: styles['calendar-aria-live']\n  }, announcement));\n}","map":{"version":3,"mappings":"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","names":["React","forwardRef","useEffect","useImperativeHandle","useRef","useState","addMonths","endOfDay","isBefore","startOfDay","startOfMonth","isAfter","isSameMonth","styles","CalendarHeader","Grids","selectFocusedDate","InternalSpaceBetween","InternalFormField","InternalDateInput","InternalTimeInput","clsx","useUniqueId","getDateLabel","renderTimeLabel","LiveRegion","normalizeStartOfWeek","formatDate","formatTime","joinDateTime","parseDate","getBaseDate","Calendar","_a","ref","locale","startOfWeek","isDateEnabled","onSelectDateRange","_c","initialEndDate","_d","initialStartDate","i18nStrings","dateOnly","isSingleGrid","timeInputFormat","elementRef","normalizedStartOfWeek","focus","current","prevButton","getElementsByClassName","split","_f","initialStartDateString","_g","initialStartTimeString","_j","initialEndDateString","_k","initialEndTimeString","startDateString","setStartDateString","startTimeString","setStartTimeString","endDateString","setEndDateString","endTimeString","setEndTimeString","selectedStartDate","selectedEndDate","announcement","setAnnouncement","startDate","Date","now","currentMonth","setCurrentMonth","focusedDate","setFocusedDate","endDate","type","onSelectDateHandler","selectedDate","announceStart","startDateLabel","startTimeLabel","announceEnd","endDateLabel","endTimeLabel","announceRange","renderSelectedAbsoluteRangeAriaLive","parsedStartDate","existingEndDate","onHeaderChangeMonthHandler","newCurrentMonth","isPrevious","newBaseDateMonth","newBaseDate","onChangeStartDate","e","detail","value","length","onChangeEndDate","headingIdPrefix","size","className","calendar","_b","baseDate","onChangeMonth","previousMonthLabel","previousMonthAriaLabel","nextMonthLabel","nextMonthAriaLabel","onFocusedDateChange","onSelectDate","todayAriaLabel","constraintText","dateTimeConstraintText","label","stretch","onChange","placeholder","format"],"sources":["/Users/dcastro/node_modules/src/date-range-picker/calendar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { addMonths, endOfDay, isBefore, startOfDay, startOfMonth, isAfter, isSameMonth } from 'date-fns';\nimport styles from '../styles.css.js';\nimport { BaseComponentProps } from '../../internal/base-component';\nimport { DateRangePickerProps, Focusable } from '../interfaces';\nimport CalendarHeader from './header';\nimport { Grids, selectFocusedDate } from './grids';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport InternalFormField from '../../form-field/internal';\nimport { InputProps } from '../../input/interfaces';\nimport InternalDateInput from '../../date-input/internal';\nimport { TimeInputProps } from '../../time-input/interfaces';\nimport InternalTimeInput from '../../time-input/internal';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { getDateLabel, renderTimeLabel } from '../../calendar/utils/intl';\nimport LiveRegion from '../../internal/components/live-region';\nimport { normalizeStartOfWeek } from '../../calendar/utils/locales';\nimport { formatDate, formatTime, joinDateTime, parseDate } from '../../internal/utils/date-time';\nimport { getBaseDate } from '../../calendar/utils/navigation';\n\nexport interface DateChangeHandler {\n  (detail: Date): void;\n}\n\nexport interface MonthChangeHandler {\n  (newMonth: Date): void;\n}\n\nexport type DayIndex = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\ninterface HeaderChangeMonthHandler {\n  (isPreviousButtonClick?: boolean): void;\n}\n\nexport interface CalendarProps extends BaseComponentProps {\n  locale: string;\n  startOfWeek: number | undefined;\n  isDateEnabled: DateRangePickerProps.IsDateEnabledFunction;\n  onSelectDateRange: (value: DateRangePickerProps.AbsoluteValue) => void;\n  initialStartDate: string | undefined;\n  initialEndDate: string | undefined;\n  i18nStrings: DateRangePickerProps.I18nStrings;\n  dateOnly: boolean;\n  timeInputFormat: TimeInputProps.Format;\n  isSingleGrid: boolean;\n}\n\nexport default forwardRef(Calendar);\n\nfunction Calendar(\n  {\n    locale,\n    startOfWeek,\n    isDateEnabled,\n    onSelectDateRange,\n    initialEndDate = '',\n    initialStartDate = '',\n    i18nStrings,\n    dateOnly,\n    isSingleGrid,\n    timeInputFormat,\n  }: CalendarProps,\n  ref: React.Ref<Focusable>\n) {\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, locale);\n\n  useImperativeHandle(ref, () => ({\n    focus() {\n      if (elementRef.current) {\n        const prevButton = elementRef.current.getElementsByClassName(styles['calendar-prev-month-btn'])[0];\n        (prevButton as undefined | HTMLButtonElement)?.focus();\n      }\n    },\n  }));\n\n  const [initialStartDateString = '', initialStartTimeString = ''] = initialStartDate.split('T');\n  const [initialEndDateString = '', initialEndTimeString = ''] = initialEndDate.split('T');\n\n  const [startDateString, setStartDateString] = useState(initialStartDateString);\n  const [startTimeString, setStartTimeString] = useState(initialStartTimeString);\n\n  const [endDateString, setEndDateString] = useState(initialEndDateString);\n  const [endTimeString, setEndTimeString] = useState(initialEndTimeString);\n\n  const selectedStartDate = parseDate(startDateString, true);\n  const selectedEndDate = parseDate(endDateString, true);\n\n  const [announcement, setAnnouncement] = useState('');\n\n  const [currentMonth, setCurrentMonth] = useState(() => {\n    if (startDateString) {\n      const startDate = parseDate(startDateString);\n      if (isSingleGrid) {\n        return startOfMonth(startDate);\n      }\n      return startOfMonth(addMonths(startDate, 1));\n    }\n    if (endDateString) {\n      return startOfMonth(parseDate(endDateString));\n    }\n    return startOfMonth(Date.now());\n  });\n\n  const [focusedDate, setFocusedDate] = useState<Date | null>(() => {\n    if (selectedStartDate) {\n      if (isSameMonth(selectedStartDate, currentMonth)) {\n        return selectedStartDate;\n      }\n      if (!isSingleGrid && isSameMonth(selectedStartDate, addMonths(currentMonth, -1))) {\n        return selectedStartDate;\n      }\n    }\n    return selectFocusedDate(selectedStartDate, currentMonth, isDateEnabled);\n  });\n\n  useEffect(() => {\n    // This effect \"synchronizes\" the local state update back up to the overall DateRangePicker component\n\n    const startDate = joinDateTime(startDateString, startTimeString);\n    const endDate = joinDateTime(endDateString, endTimeString);\n\n    if (startDate !== initialStartDate || endDate !== initialEndDate) {\n      onSelectDateRange({\n        startDate,\n        endDate,\n        type: 'absolute',\n      });\n    }\n  }, [\n    startDateString,\n    startTimeString,\n    endDateString,\n    endTimeString,\n    onSelectDateRange,\n    initialStartDate,\n    initialEndDate,\n  ]);\n\n  const onSelectDateHandler = (selectedDate: Date) => {\n    // recommended to include the start/end time announced with the selection\n    // because the user is not aware of the fact that a start/end time is also set as soon as they select a date\n    const announceStart = (startDate: Date) => {\n      return (\n        i18nStrings.startDateLabel +\n        ', ' +\n        getDateLabel(locale, startDate) +\n        ', ' +\n        i18nStrings.startTimeLabel +\n        ', ' +\n        renderTimeLabel(locale, startDate, timeInputFormat) +\n        '. '\n      );\n    };\n\n    const announceEnd = (endDate: Date) => {\n      return (\n        i18nStrings.endDateLabel +\n        ', ' +\n        getDateLabel(locale, endDate) +\n        ', ' +\n        i18nStrings.endTimeLabel +\n        ', ' +\n        renderTimeLabel(locale, endDate, timeInputFormat) +\n        '. '\n      );\n    };\n\n    const announceRange = (startDate: Date, endDate: Date) => {\n      if (!i18nStrings.renderSelectedAbsoluteRangeAriaLive) {\n        return `${getDateLabel(locale, startDate)} – ${getDateLabel(locale, endDate)}`;\n      }\n      return i18nStrings.renderSelectedAbsoluteRangeAriaLive(\n        getDateLabel(locale, startDate),\n        getDateLabel(locale, endDate)\n      );\n    };\n\n    // If both fields are empty, we set the start date\n    if (!startDateString && !endDateString) {\n      const startDate = startOfDay(selectedDate);\n      setStartDateString(formatDate(startDate));\n      setStartTimeString(formatTime(startDate));\n      setAnnouncement(announceStart(startDate));\n      return;\n    }\n\n    // If both fields are set, we start new\n    if (startDateString && endDateString) {\n      const startDate = startOfDay(selectedDate);\n      setStartDateString(formatDate(startDate));\n      setStartTimeString(formatTime(startDate));\n\n      setEndDateString('');\n      setEndTimeString('');\n      setAnnouncement(announceStart(startDate));\n      return;\n    }\n\n    // If only the END date is empty, we fill it (and swap dates if needed)\n    if (startDateString && !endDateString) {\n      const parsedStartDate = parseDate(startDateString);\n\n      if (isBefore(selectedDate, parsedStartDate)) {\n        // The user has selected the range backwards, so we swap start and end\n\n        const startDate = startOfDay(selectedDate);\n        const endDate = endOfDay(parsedStartDate);\n\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceStart(startDate) + announceRange(startDate, endDate));\n      } else {\n        const endDate = endOfDay(selectedDate);\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceEnd(endDate) + announceRange(parsedStartDate, endDate));\n      }\n      return;\n    }\n\n    // If only the START date is empty, we fill it (and swap dates if needed)\n    if (!startDateString && endDateString) {\n      const existingEndDate = parseDate(endDateString);\n\n      if (isAfter(selectedDate, existingEndDate)) {\n        // The user has selected the range backwards, so we swap start and end\n\n        const startDate = startOfDay(existingEndDate);\n        const endDate = endOfDay(selectedDate);\n\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceEnd(endDate) + announceRange(startDate, endDate));\n      } else {\n        const startDate = startOfDay(selectedDate);\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n        setAnnouncement(announceStart(startDate) + announceRange(startDate, existingEndDate));\n      }\n      return;\n    }\n    // All possible conditions are covered above\n  };\n\n  const onHeaderChangeMonthHandler: HeaderChangeMonthHandler = isPrevious => {\n    const newCurrentMonth = addMonths(currentMonth, isPrevious ? -1 : 1);\n    setCurrentMonth(newCurrentMonth);\n\n    const newBaseDateMonth = isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, -1);\n    const newBaseDate = getBaseDate(newBaseDateMonth, isDateEnabled);\n    setFocusedDate(newBaseDate);\n  };\n\n  const onChangeStartDate: InputProps['onChange'] = e => {\n    setStartDateString(e.detail.value);\n\n    if (e.detail.value.length >= 8) {\n      const newCurrentMonth = startOfMonth(parseDate(e.detail.value));\n      setCurrentMonth(isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, 1));\n    }\n  };\n\n  const onChangeEndDate: InputProps['onChange'] = e => {\n    setEndDateString(e.detail.value);\n  };\n\n  const headingIdPrefix = useUniqueId('date-range-picker-calendar-heading');\n  return (\n    <>\n      <InternalSpaceBetween size=\"s\">\n        <div\n          ref={elementRef}\n          className={clsx(styles.calendar, {\n            [styles['one-grid']]: isSingleGrid,\n          })}\n        >\n          <CalendarHeader\n            baseDate={currentMonth}\n            locale={locale}\n            onChangeMonth={onHeaderChangeMonthHandler}\n            previousMonthLabel={i18nStrings.previousMonthAriaLabel}\n            nextMonthLabel={i18nStrings.nextMonthAriaLabel}\n            isSingleGrid={isSingleGrid}\n            headingIdPrefix={headingIdPrefix}\n          />\n\n          <Grids\n            isSingleGrid={isSingleGrid}\n            locale={locale}\n            baseDate={currentMonth}\n            focusedDate={focusedDate}\n            onFocusedDateChange={setFocusedDate}\n            isDateEnabled={isDateEnabled}\n            onSelectDate={onSelectDateHandler}\n            onChangeMonth={setCurrentMonth}\n            startOfWeek={normalizedStartOfWeek}\n            todayAriaLabel={i18nStrings.todayAriaLabel}\n            selectedStartDate={selectedStartDate}\n            selectedEndDate={selectedEndDate}\n            headingIdPrefix={headingIdPrefix}\n          />\n        </div>\n        <InternalFormField constraintText={i18nStrings.dateTimeConstraintText}>\n          <div className={styles['date-and-time-container']}>\n            <div className={styles['date-and-time-wrapper']}>\n              <InternalFormField label={i18nStrings.startDateLabel} stretch={true}>\n                <InternalDateInput\n                  value={startDateString}\n                  className={styles['start-date-input']}\n                  onChange={onChangeStartDate}\n                  placeholder=\"YYYY/MM/DD\"\n                />\n              </InternalFormField>\n              {!dateOnly && (\n                <InternalFormField label={i18nStrings.startTimeLabel} stretch={true}>\n                  <InternalTimeInput\n                    value={startTimeString}\n                    onChange={e => setStartTimeString(e.detail.value)}\n                    format={timeInputFormat}\n                    placeholder={timeInputFormat}\n                    className={styles['start-time-input']}\n                  />\n                </InternalFormField>\n              )}\n            </div>\n\n            <div className={styles['date-and-time-wrapper']}>\n              <InternalFormField label={i18nStrings.endDateLabel} stretch={true}>\n                <InternalDateInput\n                  value={endDateString}\n                  className={styles['end-date-input']}\n                  onChange={onChangeEndDate}\n                  placeholder=\"YYYY/MM/DD\"\n                />\n              </InternalFormField>\n              {!dateOnly && (\n                <InternalFormField label={i18nStrings.endTimeLabel} stretch={true}>\n                  <InternalTimeInput\n                    value={endTimeString}\n                    onChange={e => setEndTimeString(e.detail.value)}\n                    format={timeInputFormat}\n                    placeholder={timeInputFormat}\n                    className={styles['end-time-input']}\n                  />\n                </InternalFormField>\n              )}\n            </div>\n          </div>\n        </InternalFormField>\n      </InternalSpaceBetween>\n      <LiveRegion className={styles['calendar-aria-live']}>{announcement}</LiveRegion>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}