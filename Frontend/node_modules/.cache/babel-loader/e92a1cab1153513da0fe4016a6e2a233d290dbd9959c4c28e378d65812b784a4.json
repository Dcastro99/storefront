{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { applyDefaults } from './defaults';\nimport { Notifications } from './notifications';\nimport { MobileToolbar } from './mobile-toolbar';\nimport { SplitPanelWrapper } from './split-panel-wrapper';\nimport { useFocusControl } from './utils/use-focus-control';\nimport useWindowWidth from './utils/use-window-width';\nimport useContentHeight from './utils/use-content-height';\nimport styles from './styles.css.js';\nimport testutilStyles from './test-classes/styles.css.js';\nimport { findUpUntil } from '../internal/utils/dom';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { useContainerQuery } from '../internal/hooks/container-queries';\nimport { useStableEventHandler } from '../internal/hooks/use-stable-event-handler';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { CONSTRAINED_MAIN_PANEL_MIN_HEIGHT, CONSTRAINED_PAGE_HEIGHT, getSplitPanelDefaultSize, MAIN_PANEL_MIN_HEIGHT } from '../split-panel/utils/size-utils';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport ContentWrapper from './content-wrapper';\nimport { isMotionDisabled } from '../internal/motion';\nimport { useEffectOnUpdate } from '../internal/hooks/use-effect-on-update';\nimport { NavigationPanel } from './navigation-panel';\nimport { ToolsAndSplitPanel } from './tools-and-split-panel';\nimport { usePreviousFrameValue } from '../internal/hooks/use-previous-frame';\nimport useAppLayoutOffsets from './utils/use-content-width';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '../internal/logging';\nimport RefreshedAppLayout from './visual-refresh';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nvar AppLayout = React.forwardRef(function (_a, ref) {\n  var _b = _a.contentType,\n    contentType = _b === void 0 ? 'default' : _b,\n    _c = _a.headerSelector,\n    headerSelector = _c === void 0 ? '#b #h' : _c,\n    _d = _a.footerSelector,\n    footerSelector = _d === void 0 ? '#b #f' : _d,\n    rest = __rest(_a, [\"contentType\", \"headerSelector\", \"footerSelector\"]);\n  var __internalRootRef = useBaseComponent('AppLayout').__internalRootRef;\n  var isRefresh = useVisualRefresh();\n  // This re-builds the props including the default values\n  var props = __assign({\n    contentType: contentType,\n    headerSelector: headerSelector,\n    footerSelector: footerSelector\n  }, rest);\n  var baseProps = getBaseProps(rest);\n  return React.createElement(\"div\", __assign({\n    ref: __internalRootRef\n  }, baseProps), isRefresh ? React.createElement(RefreshedAppLayout, __assign({}, props, {\n    ref: ref\n  })) : React.createElement(OldAppLayout, __assign({}, props, {\n    ref: ref\n  })));\n});\nvar OldAppLayout = React.forwardRef(function (_a, ref) {\n  var _b;\n  var _c;\n  var navigation = _a.navigation,\n    _d = _a.navigationWidth,\n    navigationWidth = _d === void 0 ? 280 : _d,\n    navigationHide = _a.navigationHide,\n    controlledNavigationOpen = _a.navigationOpen,\n    tools = _a.tools,\n    _e = _a.toolsWidth,\n    toolsWidth = _e === void 0 ? 290 : _e,\n    toolsHide = _a.toolsHide,\n    controlledToolsOpen = _a.toolsOpen,\n    breadcrumbs = _a.breadcrumbs,\n    notifications = _a.notifications,\n    stickyNotifications = _a.stickyNotifications,\n    contentHeader = _a.contentHeader,\n    disableContentHeaderOverlap = _a.disableContentHeaderOverlap,\n    content = _a.content,\n    _f = _a.contentType,\n    contentType = _f === void 0 ? 'default' : _f,\n    disableContentPaddings = _a.disableContentPaddings,\n    disableBodyScroll = _a.disableBodyScroll,\n    maxContentWidth = _a.maxContentWidth,\n    minContentWidth = _a.minContentWidth,\n    _g = _a.headerSelector,\n    headerSelector = _g === void 0 ? '#b #h' : _g,\n    _h = _a.footerSelector,\n    footerSelector = _h === void 0 ? '#b #f' : _h,\n    ariaLabels = _a.ariaLabels,\n    splitPanel = _a.splitPanel,\n    controlledSplitPanelSize = _a.splitPanelSize,\n    controlledSplitPanelOpen = _a.splitPanelOpen,\n    controlledSplitPanelPreferences = _a.splitPanelPreferences,\n    onSplitPanelPreferencesChange = _a.onSplitPanelPreferencesChange,\n    onSplitPanelResize = _a.onSplitPanelResize,\n    onSplitPanelToggle = _a.onSplitPanelToggle,\n    onNavigationChange = _a.onNavigationChange,\n    onToolsChange = _a.onToolsChange;\n  if (isDevelopment) {\n    if (controlledToolsOpen && toolsHide) {\n      warnOnce('AppLayout', \"You have enabled both the `toolsOpen` prop and the `toolsHide` prop. This is not supported. Set `toolsOpen` to `false` when you set `toolsHide` to `true`.\");\n    }\n  }\n  var rootRef = useRef(null);\n  var isMobile = useMobile();\n  var isMotionEnabled = rootRef.current ? !isMotionDisabled(rootRef.current) : false;\n  var defaults = applyDefaults(contentType, {\n    maxContentWidth: maxContentWidth,\n    minContentWidth: minContentWidth\n  }, false);\n  var _j = useControllable(controlledNavigationOpen, onNavigationChange, isMobile ? false : defaults.navigationOpen, {\n      componentName: 'AppLayout',\n      controlledProp: 'navigationOpen',\n      changeHandler: 'onNavigationChange'\n    }),\n    _k = _j[0],\n    navigationOpen = _k === void 0 ? false : _k,\n    setNavigationOpen = _j[1];\n  var _l = useControllable(controlledToolsOpen, onToolsChange, isMobile ? false : defaults.toolsOpen, {\n      componentName: 'AppLayout',\n      controlledProp: 'toolsOpen',\n      changeHandler: 'onToolsChange'\n    }),\n    _m = _l[0],\n    toolsOpen = _m === void 0 ? false : _m,\n    setToolsOpen = _l[1];\n  var onNavigationToggle = useCallback(function (open) {\n    setNavigationOpen(open);\n    fireNonCancelableEvent(onNavigationChange, {\n      open: open\n    });\n  }, [setNavigationOpen, onNavigationChange]);\n  var onToolsToggle = useCallback(function (open) {\n    setToolsOpen(open);\n    fireNonCancelableEvent(onToolsChange, {\n      open: open\n    });\n  }, [setToolsOpen, onToolsChange]);\n  var onNavigationClick = function (event) {\n    var hasLink = findUpUntil(event.target, function (node) {\n      return node.tagName === 'A' && !!node.href;\n    });\n    if (hasLink) {\n      onNavigationToggle(false);\n    }\n  };\n  var navigationVisible = !navigationHide && navigationOpen;\n  var toolsVisible = !toolsHide && toolsOpen;\n  var _o = useContentHeight(headerSelector, footerSelector, disableBodyScroll),\n    contentHeightStyle = _o.contentHeightStyle,\n    headerHeight = _o.headerHeight,\n    footerHeight = _o.footerHeight,\n    panelHeightStyle = _o.panelHeightStyle;\n  var _p = useContainerQuery(function (rect) {\n      return rect.height;\n    }),\n    notificationsHeight = _p[0],\n    notificationsRef = _p[1];\n  var _q = useContainerQuery(function (rect) {\n      return splitPanel ? rect.height : 0;\n    }, [splitPanel]),\n    splitPanelHeaderHeight = _q[0],\n    splitPanelHeaderMeasureRef = _q[1];\n  var splitPanelHeaderRefObject = useRef(null);\n  var splitPanelHeaderRef = useMergeRefs(splitPanelHeaderMeasureRef, splitPanelHeaderRefObject);\n  var anyPanelOpen = navigationVisible || toolsVisible;\n  var hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;\n  var stickyNotificationsHeight = stickyNotifications ? notificationsHeight : null;\n  var _r = useControllable(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, undefined, {\n      componentName: 'AppLayout',\n      controlledProp: 'splitPanelPreferences',\n      changeHandler: 'onSplitPanelPreferencesChange'\n    }),\n    splitPanelPreferences = _r[0],\n    setSplitPanelPreferences = _r[1];\n  var splitPanelPosition = (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) || 'bottom';\n  var _s = useContainerQuery(function (rect) {\n      return splitPanel ? rect.height : 0;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [splitPanel, splitPanelPosition]),\n    splitPanelHeight = _s[0],\n    splitPanelRef = _s[1];\n  var closedDrawerWidth = 40;\n  var effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;\n  var effectiveToolsWidth = toolsHide && (!splitPanel || (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) !== 'side') ? 0 : toolsOpen ? toolsWidth : closedDrawerWidth;\n  var defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);\n  var _t = useControllable(controlledSplitPanelSize, onSplitPanelResize, defaultSplitPanelSize, {\n      componentName: 'AppLayout',\n      controlledProp: 'splitPanelSize',\n      changeHandler: 'onSplitPanelResize'\n    }),\n    _u = _t[0],\n    splitPanelSize = _u === void 0 ? defaultSplitPanelSize : _u,\n    setSplitPanelSize = _t[1];\n  var _v = useControllable(controlledSplitPanelOpen, onSplitPanelToggle, false, {\n      componentName: 'AppLayout',\n      controlledProp: 'splitPanelOpen',\n      changeHandler: 'onSplitPanelToggle'\n    }),\n    _w = _v[0],\n    splitPanelOpen = _w === void 0 ? false : _w,\n    setSplitPanelOpen = _v[1];\n  var mainContentRef = useRef(null);\n  var legacyScrollRootRef = useRef(null);\n  var onSplitPanelPreferencesSet = useCallback(function (detail) {\n    setSplitPanelPreferences(detail);\n    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n  }, [setSplitPanelPreferences, onSplitPanelPreferencesChange]);\n  var onSplitPanelSizeSet = useCallback(function (detail) {\n    setSplitPanelSize(detail.size);\n    fireNonCancelableEvent(onSplitPanelResize, detail);\n  }, [setSplitPanelSize, onSplitPanelResize]);\n  var onToggle = useCallback(function () {\n    setSplitPanelOpen(!splitPanelOpen);\n    fireNonCancelableEvent(onSplitPanelToggle, {\n      open: !splitPanelOpen\n    });\n  }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle]);\n  var getSplitPanelMaxWidth = useStableEventHandler(function () {\n    if (!mainContentRef.current || !defaults.minContentWidth) {\n      return NaN;\n    }\n    var width = parseInt(getComputedStyle(mainContentRef.current).width);\n    // when disableContentPaddings is true there is less available space,\n    // so we subtract space-scaled-2x-xxxl * 2 for left and right padding\n    var contentPadding = disableContentPaddings ? 80 : 0;\n    var spaceAvailable = width - defaults.minContentWidth - contentPadding;\n    var spaceTaken = finalSplitPanePosition === 'side' ? splitPanelSize : 0;\n    return Math.max(0, spaceTaken + spaceAvailable);\n  });\n  var getSplitPanelMaxHeight = useStableEventHandler(function () {\n    if (typeof document === 'undefined') {\n      return 0; // render the split panel in its minimum possible size\n    } else if (disableBodyScroll && legacyScrollRootRef.current) {\n      var availableHeight = legacyScrollRootRef.current.clientHeight;\n      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n    } else {\n      var availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n    }\n  });\n  var _x = useState(false),\n    isForcedPosition = _x[0],\n    setIsForcedPosition = _x[1];\n  var finalSplitPanePosition = isForcedPosition ? 'bottom' : splitPanelPosition;\n  var splitPaneAvailableOnTheSide = Boolean(splitPanel) && finalSplitPanePosition === 'side';\n  var splitPanelOpenOnTheSide = splitPaneAvailableOnTheSide && splitPanelOpen;\n  var toggleButtonsBarWidth = 0;\n  var windowWidth = useWindowWidth();\n  var _y = useAppLayoutOffsets(rootRef.current),\n    leftOffset = _y.left,\n    rightOffset = _y.right;\n  var contentWidthWithSplitPanel = windowWidth - leftOffset - rightOffset - effectiveToolsWidth - effectiveNavigationWidth - (disableContentPaddings ? 0 : toggleButtonsBarWidth);\n  useEffect(function () {\n    var contentWidth = contentWidthWithSplitPanel - splitPanelSize;\n    setIsForcedPosition(isMobile || (defaults.minContentWidth || 0) > contentWidth);\n    // This is a workaround to avoid a forced position due to splitPanelSize, which is\n    // user controlled variable.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contentWidthWithSplitPanel, defaults.minContentWidth, isMobile]);\n  var navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;\n  var toolsClosedWidth = toolsHide || isMobile ? 0 : closedDrawerWidth;\n  var _z = useState(),\n    splitPanelLastInteraction = _z[0],\n    setSplitPanelLastInteraction = _z[1];\n  useEffectOnUpdate(function () {\n    return setSplitPanelLastInteraction(splitPanelOpen ? {\n      type: 'open'\n    } : {\n      type: 'close'\n    });\n  }, [splitPanelOpen]);\n  useEffectOnUpdate(function () {\n    return setSplitPanelLastInteraction({\n      type: 'position'\n    });\n  }, [splitPanelPosition]);\n  var contentMaxWidthStyle = !isMobile ? {\n    maxWidth: defaults.maxContentWidth\n  } : undefined;\n  var _0 = useState(0),\n    splitPanelReportedSize = _0[0],\n    setSplitPanelReportedSize = _0[1];\n  var splitPanelContext = {\n    topOffset: headerHeight + (finalSplitPanePosition === 'bottom' ? stickyNotificationsHeight || 0 : 0),\n    bottomOffset: footerHeight,\n    leftOffset: leftOffset + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),\n    rightOffset: rightOffset + (isMobile ? 0 : !toolsHide && toolsOpen ? toolsWidth : toolsClosedWidth),\n    position: finalSplitPanePosition,\n    size: splitPanelSize,\n    getMaxWidth: getSplitPanelMaxWidth,\n    getMaxHeight: getSplitPanelMaxHeight,\n    getHeader: function () {\n      return splitPanelHeaderRefObject.current;\n    },\n    disableContentPaddings: disableContentPaddings,\n    contentWidthStyles: contentMaxWidthStyle,\n    isOpen: splitPanelOpen,\n    isMobile: isMobile,\n    isRefresh: false,\n    isForcedPosition: isForcedPosition,\n    lastInteraction: splitPanelLastInteraction,\n    splitPanelRef: splitPanelRef,\n    splitPanelHeaderRef: splitPanelHeaderRef,\n    onResize: onSplitPanelSizeSet,\n    onToggle: onToggle,\n    onPreferencesChange: onSplitPanelPreferencesSet,\n    reportSize: setSplitPanelReportedSize\n  };\n  var contentWrapperProps = {\n    navigationPadding: navigationHide || !!navigationOpen,\n    toolsPadding:\n    // tools padding is displayed in one of the three cases\n    // 1. Nothing on the that screen edge (no tools panel and no split panel)\n    toolsHide && (!splitPanel || finalSplitPanePosition !== 'side') ||\n    // 2. Tools panel is present and open\n    toolsVisible ||\n    // 3. Split panel is open in side position\n    splitPanelOpenOnTheSide,\n    isMobile: isMobile\n  };\n  var navigationRefs = useFocusControl(navigationOpen).refs;\n  var _1 = useFocusControl(toolsOpen, true),\n    toolsRefs = _1.refs,\n    focusToolsClose = _1.setFocus,\n    loseToolsFocus = _1.loseFocus;\n  useImperativeHandle(ref, function () {\n    return {\n      openTools: function () {\n        return onToolsToggle(true);\n      },\n      closeNavigationIfNecessary: function () {\n        if (isMobile) {\n          onNavigationToggle(false);\n        }\n      },\n      focusToolsClose: focusToolsClose\n    };\n  }, [isMobile, onNavigationToggle, onToolsToggle, focusToolsClose]);\n  var splitPanelBottomOffset = (_c = !splitPanel || finalSplitPanePosition !== 'bottom' ? undefined : splitPanelOpen ? splitPanelHeight : splitPanelHeaderHeight) !== null && _c !== void 0 ? _c : undefined;\n  var contentWidthStyles = !isMobile ? {\n    minWidth: defaults.minContentWidth,\n    maxWidth: defaults.maxContentWidth\n  } : undefined;\n  var isToolsDrawerHidden = disableContentPaddings;\n  var toolsDrawerWidth = function () {\n    if (isMobile) {\n      return 0;\n    }\n    var toolsPanelWidth = toolsHide ? 0 : toolsOpen ? toolsWidth : closedDrawerWidth;\n    var splitPanelWidth = !splitPanel || finalSplitPanePosition !== 'side' ? 0 : splitPanelOpen ? splitPanelReportedSize : closedDrawerWidth;\n    return toolsPanelWidth + splitPanelWidth;\n  }();\n  var navigationDrawerWidth = function () {\n    if (isMobile) {\n      return 0;\n    }\n    return effectiveNavigationWidth;\n  }();\n  var previousContentWidth = usePreviousFrameValue(contentWidthWithSplitPanel - (splitPanelOpenOnTheSide ? splitPanelReportedSize : 0));\n  var contentScaleX = function () {\n    if (isMobile || !isMotionEnabled || !disableContentPaddings || !previousContentWidth) {\n      return undefined;\n    }\n  }();\n  return React.createElement(\"div\", {\n    className: clsx(styles.root, testutilStyles.root, disableBodyScroll && styles['root-no-scroll']),\n    ref: rootRef\n  }, React.createElement(\"div\", {\n    className: styles['layout-wrapper'],\n    style: contentHeightStyle\n  }, isMobile && (!toolsHide || !navigationHide || breadcrumbs) && React.createElement(MobileToolbar, {\n    anyPanelOpen: anyPanelOpen,\n    toggleRefs: {\n      navigation: navigationRefs.toggle,\n      tools: toolsRefs.toggle\n    },\n    topOffset: headerHeight,\n    ariaLabels: ariaLabels,\n    navigationHide: navigationHide,\n    toolsHide: toolsHide,\n    onNavigationOpen: function () {\n      return onNavigationToggle(true);\n    },\n    onToolsOpen: function () {\n      return onToolsToggle(true);\n    },\n    unfocusable: anyPanelOpen\n  }, breadcrumbs), React.createElement(\"div\", {\n    className: clsx(styles.layout, disableBodyScroll && styles['layout-no-scroll'])\n  }, !navigationHide && React.createElement(NavigationPanel, {\n    ariaLabels: ariaLabels,\n    footerHeight: footerHeight,\n    headerHeight: headerHeight,\n    isHidden: disableContentPaddings,\n    isMobile: isMobile,\n    isMotionEnabled: isMotionEnabled,\n    navigation: navigation,\n    navigationDrawerWidth: navigationDrawerWidth,\n    navigationOpen: navigationOpen,\n    onClick: isMobile ? onNavigationClick : undefined,\n    onNavigationToggle: onNavigationToggle,\n    panelHeightStyle: panelHeightStyle,\n    toggleRefs: navigationRefs,\n    navigationWidth: navigationWidth\n  }), React.createElement(\"main\", {\n    ref: legacyScrollRootRef,\n    className: clsx(styles['layout-main'], (_b = {}, _b[styles['layout-main-scrollable']] = disableBodyScroll, _b[testutilStyles['disable-body-scroll-root']] = disableBodyScroll, _b[styles.unfocusable] = isMobile && anyPanelOpen, _b))\n  }, React.createElement(\"div\", {\n    style: {\n      marginBottom: splitPanelBottomOffset,\n      transform: contentScaleX ? \"scaleX(\".concat(contentScaleX, \")\") : undefined\n    }\n  }, notifications && React.createElement(Notifications, {\n    testUtilsClassName: clsx(styles.notifications, testutilStyles.notifications),\n    labels: ariaLabels,\n    topOffset: disableBodyScroll ? 0 : headerHeight,\n    sticky: !isMobile && stickyNotifications,\n    ref: notificationsRef,\n    isMobile: isMobile,\n    navigationPadding: contentWrapperProps.navigationPadding,\n    toolsPadding: contentWrapperProps.toolsPadding,\n    contentWidthStyles: contentWidthStyles\n  }, notifications), (!isMobile && breadcrumbs || contentHeader) && React.createElement(ContentWrapper, __assign({}, contentWrapperProps, {\n    contentWidthStyles: contentWidthStyles\n  }), !isMobile && breadcrumbs && React.createElement(\"div\", {\n    className: clsx(styles.breadcrumbs, testutilStyles.breadcrumbs, styles['breadcrumbs-desktop'])\n  }, breadcrumbs), contentHeader && React.createElement(\"div\", {\n    className: clsx(styles['content-header-wrapper'], !hasRenderedNotifications && (isMobile || !breadcrumbs) && styles['content-extra-top-padding'], !hasRenderedNotifications && !breadcrumbs && styles['content-header-wrapper-first-child'], !disableContentHeaderOverlap && styles['content-header-wrapper-overlapped'])\n  }, contentHeader)), React.createElement(ContentWrapper, __assign({}, contentWrapperProps, {\n    ref: mainContentRef,\n    disablePaddings: disableContentPaddings,\n    // eslint-disable-next-line react/forbid-component-props\n    className: clsx(!disableContentPaddings && styles['content-wrapper'], !disableContentPaddings && (isMobile || !breadcrumbs) && !contentHeader && styles['content-extra-top-padding'], !hasRenderedNotifications && !breadcrumbs && !isMobile && !contentHeader && styles['content-wrapper-first-child'])\n  }), React.createElement(\"div\", {\n    className: clsx(styles.content, testutilStyles.content, !disableContentHeaderOverlap && contentHeader && styles['content-overlapped']),\n    style: contentWidthStyles\n  }, React.createElement(AppLayoutContext.Provider, {\n    value: {\n      stickyOffsetTop: (disableBodyScroll ? 0 : headerHeight) + (stickyNotificationsHeight !== null ? stickyNotificationsHeight : 0),\n      stickyOffsetBottom: footerHeight + (splitPanelBottomOffset || 0)\n    }\n  }, content)))), finalSplitPanePosition === 'bottom' && React.createElement(SplitPanelWrapper, {\n    context: splitPanelContext\n  }, splitPanel)), React.createElement(ToolsAndSplitPanel, {\n    splitPanel: finalSplitPanePosition === 'side' ? splitPanel : undefined,\n    ariaLabels: ariaLabels,\n    closedDrawerWidth: closedDrawerWidth,\n    contentHeightStyle: contentHeightStyle,\n    disableContentPaddings: disableContentPaddings,\n    drawerWidth: toolsDrawerWidth,\n    footerHeight: footerHeight,\n    headerHeight: headerHeight,\n    isHidden: isToolsDrawerHidden,\n    isMobile: isMobile,\n    isMotionEnabled: isMotionEnabled,\n    onToolsToggle: onToolsToggle,\n    panelHeightStyle: panelHeightStyle,\n    splitPanelContext: splitPanelContext,\n    splitPanelOpen: splitPanelOpenOnTheSide,\n    splitPanelReportedSize: splitPanelReportedSize,\n    toggleRefs: toolsRefs,\n    onLoseToolsFocus: loseToolsFocus,\n    tools: tools,\n    toolsHide: Boolean(toolsHide),\n    toolsOpen: toolsOpen,\n    toolsWidth: toolsWidth\n  }))));\n});\napplyDisplayName(AppLayout, 'AppLayout');\nexport default AppLayout;","map":{"version":3,"mappings":"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","names":["clsx","React","useCallback","useEffect","useImperativeHandle","useRef","useState","getBaseProps","useControllable","useMobile","fireNonCancelableEvent","applyDefaults","Notifications","MobileToolbar","SplitPanelWrapper","useFocusControl","useWindowWidth","useContentHeight","styles","testutilStyles","findUpUntil","AppLayoutContext","useContainerQuery","useStableEventHandler","applyDisplayName","CONSTRAINED_MAIN_PANEL_MIN_HEIGHT","CONSTRAINED_PAGE_HEIGHT","getSplitPanelDefaultSize","MAIN_PANEL_MIN_HEIGHT","useBaseComponent","useVisualRefresh","ContentWrapper","isMotionDisabled","useEffectOnUpdate","NavigationPanel","ToolsAndSplitPanel","usePreviousFrameValue","useAppLayoutOffsets","isDevelopment","warnOnce","RefreshedAppLayout","useMergeRefs","AppLayout","forwardRef","_a","ref","contentType","_c","headerSelector","_d","footerSelector","rest","isRefresh","props","baseProps","__internalRootRef","OldAppLayout","navigation","navigationWidth","navigationHide","controlledNavigationOpen","tools","_e","toolsWidth","toolsHide","controlledToolsOpen","breadcrumbs","notifications","stickyNotifications","contentHeader","disableContentHeaderOverlap","content","_f","disableContentPaddings","disableBodyScroll","maxContentWidth","minContentWidth","_g","_h","ariaLabels","splitPanel","controlledSplitPanelSize","controlledSplitPanelOpen","controlledSplitPanelPreferences","onSplitPanelPreferencesChange","onSplitPanelResize","onSplitPanelToggle","onNavigationChange","onToolsChange","rootRef","isMobile","isMotionEnabled","current","defaults","navigationOpen","componentName","controlledProp","changeHandler","_k","setNavigationOpen","toolsOpen","_m","setToolsOpen","onNavigationToggle","open","onToolsToggle","onNavigationClick","event","hasLink","target","tagName","node","href","navigationVisible","toolsVisible","contentHeightStyle","headerHeight","footerHeight","panelHeightStyle","height","notificationsHeight","notificationsRef","rect","splitPanelHeaderHeight","splitPanelHeaderMeasureRef","splitPanelHeaderRefObject","splitPanelHeaderRef","anyPanelOpen","hasRenderedNotifications","stickyNotificationsHeight","undefined","splitPanelPreferences","setSplitPanelPreferences","splitPanelPosition","position","splitPanelHeight","splitPanelRef","closedDrawerWidth","effectiveNavigationWidth","effectiveToolsWidth","defaultSplitPanelSize","_u","splitPanelSize","setSplitPanelSize","_w","splitPanelOpen","setSplitPanelOpen","mainContentRef","legacyScrollRootRef","onSplitPanelPreferencesSet","detail","onSplitPanelSizeSet","size","onToggle","getSplitPanelMaxWidth","NaN","width","parseInt","getComputedStyle","contentPadding","spaceAvailable","spaceTaken","finalSplitPanePosition","Math","max","getSplitPanelMaxHeight","document","availableHeight","clientHeight","documentElement","isForcedPosition","setIsForcedPosition","splitPaneAvailableOnTheSide","Boolean","splitPanelOpenOnTheSide","toggleButtonsBarWidth","windowWidth","leftOffset","rightOffset","contentWidthWithSplitPanel","contentWidth","navigationClosedWidth","toolsClosedWidth","splitPanelLastInteraction","setSplitPanelLastInteraction","type","contentMaxWidthStyle","maxWidth","splitPanelReportedSize","setSplitPanelReportedSize","splitPanelContext","topOffset","bottomOffset","getMaxWidth","getMaxHeight","getHeader","contentWidthStyles","isOpen","lastInteraction","onResize","onPreferencesChange","reportSize","contentWrapperProps","navigationPadding","toolsPadding","navigationRefs","toolsRefs","focusToolsClose","loseToolsFocus","openTools","closeNavigationIfNecessary","splitPanelBottomOffset","minWidth","isToolsDrawerHidden","toolsDrawerWidth","toolsPanelWidth","splitPanelWidth","navigationDrawerWidth","previousContentWidth","contentScaleX","className","root","style","toggleRefs","toggle","onNavigationOpen","onToolsOpen","unfocusable","layout","isHidden","onClick","_b","marginBottom","transform","testUtilsClassName","labels","sticky","disablePaddings","Provider","value","stickyOffsetTop","stickyOffsetBottom","context","drawerWidth","onLoseToolsFocus"],"sources":["/Users/dcastro/node_modules/src/app-layout/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { applyDefaults } from './defaults';\nimport { AppLayoutProps } from './interfaces';\nimport { Notifications } from './notifications';\nimport { MobileToolbar } from './mobile-toolbar';\nimport { SplitPanelWrapper } from './split-panel-wrapper';\nimport { useFocusControl } from './utils/use-focus-control';\nimport useWindowWidth from './utils/use-window-width';\nimport useContentHeight from './utils/use-content-height';\nimport styles from './styles.css.js';\nimport testutilStyles from './test-classes/styles.css.js';\nimport { findUpUntil } from '../internal/utils/dom';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { useContainerQuery } from '../internal/hooks/container-queries';\nimport { useStableEventHandler } from '../internal/hooks/use-stable-event-handler';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { SplitPanelContextProps, SplitPanelLastInteraction } from '../internal/context/split-panel-context';\nimport {\n  CONSTRAINED_MAIN_PANEL_MIN_HEIGHT,\n  CONSTRAINED_PAGE_HEIGHT,\n  getSplitPanelDefaultSize,\n  MAIN_PANEL_MIN_HEIGHT,\n} from '../split-panel/utils/size-utils';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport ContentWrapper, { ContentWrapperProps } from './content-wrapper';\nimport { isMotionDisabled } from '../internal/motion';\nimport { useEffectOnUpdate } from '../internal/hooks/use-effect-on-update';\nimport { NavigationPanel } from './navigation-panel';\nimport { ToolsAndSplitPanel } from './tools-and-split-panel';\nimport { usePreviousFrameValue } from '../internal/hooks/use-previous-frame';\nimport useAppLayoutOffsets from './utils/use-content-width';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '../internal/logging';\n\nimport RefreshedAppLayout from './visual-refresh';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\n\nexport { AppLayoutProps };\n\nconst AppLayout = React.forwardRef(\n  (\n    { contentType = 'default', headerSelector = '#b #h', footerSelector = '#b #f', ...rest }: AppLayoutProps,\n    ref: React.Ref<AppLayoutProps.Ref>\n  ) => {\n    const { __internalRootRef } = useBaseComponent<HTMLDivElement>('AppLayout');\n    const isRefresh = useVisualRefresh();\n\n    // This re-builds the props including the default values\n    const props = { contentType, headerSelector, footerSelector, ...rest };\n\n    const baseProps = getBaseProps(rest);\n\n    return (\n      <div ref={__internalRootRef} {...baseProps}>\n        {isRefresh ? <RefreshedAppLayout {...props} ref={ref} /> : <OldAppLayout {...props} ref={ref} />}\n      </div>\n    );\n  }\n);\n\nconst OldAppLayout = React.forwardRef(\n  (\n    {\n      navigation,\n      navigationWidth = 280,\n      navigationHide,\n      navigationOpen: controlledNavigationOpen,\n      tools,\n      toolsWidth = 290,\n      toolsHide,\n      toolsOpen: controlledToolsOpen,\n      breadcrumbs,\n      notifications,\n      stickyNotifications,\n      contentHeader,\n      disableContentHeaderOverlap,\n      content,\n      contentType = 'default',\n      disableContentPaddings,\n      disableBodyScroll,\n      maxContentWidth,\n      minContentWidth,\n      headerSelector = '#b #h',\n      footerSelector = '#b #f',\n      ariaLabels,\n      splitPanel,\n      splitPanelSize: controlledSplitPanelSize,\n      splitPanelOpen: controlledSplitPanelOpen,\n      splitPanelPreferences: controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      onSplitPanelResize,\n      onSplitPanelToggle,\n      onNavigationChange,\n      onToolsChange,\n    }: AppLayoutProps,\n    ref: React.Ref<AppLayoutProps.Ref>\n  ) => {\n    if (isDevelopment) {\n      if (controlledToolsOpen && toolsHide) {\n        warnOnce(\n          'AppLayout',\n          `You have enabled both the \\`toolsOpen\\` prop and the \\`toolsHide\\` prop. This is not supported. Set \\`toolsOpen\\` to \\`false\\` when you set \\`toolsHide\\` to \\`true\\`.`\n        );\n      }\n    }\n    const rootRef = useRef<HTMLDivElement>(null);\n    const isMobile = useMobile();\n    const isMotionEnabled = rootRef.current ? !isMotionDisabled(rootRef.current) : false;\n\n    const defaults = applyDefaults(contentType, { maxContentWidth, minContentWidth }, false);\n    const [navigationOpen = false, setNavigationOpen] = useControllable(\n      controlledNavigationOpen,\n      onNavigationChange,\n      isMobile ? false : defaults.navigationOpen,\n      { componentName: 'AppLayout', controlledProp: 'navigationOpen', changeHandler: 'onNavigationChange' }\n    );\n\n    const [toolsOpen = false, setToolsOpen] = useControllable(\n      controlledToolsOpen,\n      onToolsChange,\n      isMobile ? false : defaults.toolsOpen,\n      { componentName: 'AppLayout', controlledProp: 'toolsOpen', changeHandler: 'onToolsChange' }\n    );\n\n    const onNavigationToggle = useCallback(\n      (open: boolean) => {\n        setNavigationOpen(open);\n        fireNonCancelableEvent(onNavigationChange, { open });\n      },\n      [setNavigationOpen, onNavigationChange]\n    );\n    const onToolsToggle = useCallback(\n      (open: boolean) => {\n        setToolsOpen(open);\n        fireNonCancelableEvent(onToolsChange, { open });\n      },\n      [setToolsOpen, onToolsChange]\n    );\n    const onNavigationClick = (event: React.MouseEvent) => {\n      const hasLink = findUpUntil(\n        event.target as HTMLElement,\n        node => node.tagName === 'A' && !!(node as HTMLAnchorElement).href\n      );\n      if (hasLink) {\n        onNavigationToggle(false);\n      }\n    };\n\n    const navigationVisible = !navigationHide && navigationOpen;\n    const toolsVisible = !toolsHide && toolsOpen;\n\n    const { contentHeightStyle, headerHeight, footerHeight, panelHeightStyle } = useContentHeight(\n      headerSelector,\n      footerSelector,\n      disableBodyScroll\n    );\n    const [notificationsHeight, notificationsRef] = useContainerQuery(rect => rect.height);\n    const [splitPanelHeaderHeight, splitPanelHeaderMeasureRef] = useContainerQuery(\n      rect => (splitPanel ? rect.height : 0),\n      [splitPanel]\n    );\n    const splitPanelHeaderRefObject = useRef(null);\n    const splitPanelHeaderRef = useMergeRefs(splitPanelHeaderMeasureRef, splitPanelHeaderRefObject);\n    const anyPanelOpen = navigationVisible || toolsVisible;\n    const hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;\n    const stickyNotificationsHeight = stickyNotifications ? notificationsHeight : null;\n\n    const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(\n      controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      undefined,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelPreferences',\n        changeHandler: 'onSplitPanelPreferencesChange',\n      }\n    );\n    const splitPanelPosition = splitPanelPreferences?.position || 'bottom';\n\n    const [splitPanelHeight, splitPanelRef] = useContainerQuery(\n      rect => (splitPanel ? rect.height : 0),\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [splitPanel, splitPanelPosition]\n    );\n\n    const closedDrawerWidth = 40;\n    const effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;\n    const effectiveToolsWidth =\n      toolsHide && (!splitPanel || splitPanelPreferences?.position !== 'side')\n        ? 0\n        : toolsOpen\n        ? toolsWidth\n        : closedDrawerWidth;\n\n    const defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);\n    const [splitPanelSize = defaultSplitPanelSize, setSplitPanelSize] = useControllable(\n      controlledSplitPanelSize,\n      onSplitPanelResize,\n      defaultSplitPanelSize,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelSize',\n        changeHandler: 'onSplitPanelResize',\n      }\n    );\n\n    const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(\n      controlledSplitPanelOpen,\n      onSplitPanelToggle,\n      false,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelOpen',\n        changeHandler: 'onSplitPanelToggle',\n      }\n    );\n\n    const mainContentRef = useRef<HTMLDivElement>(null);\n    const legacyScrollRootRef = useRef<HTMLElement>(null);\n\n    const onSplitPanelPreferencesSet = useCallback(\n      (detail: { position: 'side' | 'bottom' }) => {\n        setSplitPanelPreferences(detail);\n        fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n      },\n      [setSplitPanelPreferences, onSplitPanelPreferencesChange]\n    );\n    const onSplitPanelSizeSet = useCallback(\n      (detail: { size: number }) => {\n        setSplitPanelSize(detail.size);\n        fireNonCancelableEvent(onSplitPanelResize, detail);\n      },\n      [setSplitPanelSize, onSplitPanelResize]\n    );\n    const onToggle = useCallback(() => {\n      setSplitPanelOpen(!splitPanelOpen);\n      fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });\n    }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle]);\n\n    const getSplitPanelMaxWidth = useStableEventHandler(() => {\n      if (!mainContentRef.current || !defaults.minContentWidth) {\n        return NaN;\n      }\n\n      const width = parseInt(getComputedStyle(mainContentRef.current).width);\n      // when disableContentPaddings is true there is less available space,\n      // so we subtract space-scaled-2x-xxxl * 2 for left and right padding\n      const contentPadding = disableContentPaddings ? 80 : 0;\n      const spaceAvailable = width - defaults.minContentWidth - contentPadding;\n      const spaceTaken = finalSplitPanePosition === 'side' ? splitPanelSize : 0;\n      return Math.max(0, spaceTaken + spaceAvailable);\n    });\n\n    const getSplitPanelMaxHeight = useStableEventHandler(() => {\n      if (typeof document === 'undefined') {\n        return 0; // render the split panel in its minimum possible size\n      } else if (disableBodyScroll && legacyScrollRootRef.current) {\n        const availableHeight = legacyScrollRootRef.current.clientHeight;\n        return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n      } else {\n        const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n        return availableHeight < CONSTRAINED_PAGE_HEIGHT\n          ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT\n          : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n      }\n    });\n\n    const [isForcedPosition, setIsForcedPosition] = useState(false);\n    const finalSplitPanePosition = isForcedPosition ? 'bottom' : splitPanelPosition;\n\n    const splitPaneAvailableOnTheSide = Boolean(splitPanel) && finalSplitPanePosition === 'side';\n    const splitPanelOpenOnTheSide = splitPaneAvailableOnTheSide && splitPanelOpen;\n\n    const toggleButtonsBarWidth = 0;\n\n    const windowWidth = useWindowWidth();\n    const { left: leftOffset, right: rightOffset } = useAppLayoutOffsets(rootRef.current);\n    const contentWidthWithSplitPanel =\n      windowWidth -\n      leftOffset -\n      rightOffset -\n      effectiveToolsWidth -\n      effectiveNavigationWidth -\n      (disableContentPaddings ? 0 : toggleButtonsBarWidth);\n\n    useEffect(() => {\n      const contentWidth = contentWidthWithSplitPanel - splitPanelSize;\n      setIsForcedPosition(isMobile || (defaults.minContentWidth || 0) > contentWidth);\n      // This is a workaround to avoid a forced position due to splitPanelSize, which is\n      // user controlled variable.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [contentWidthWithSplitPanel, defaults.minContentWidth, isMobile]);\n\n    const navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;\n    const toolsClosedWidth = toolsHide || isMobile ? 0 : closedDrawerWidth;\n\n    const [splitPanelLastInteraction, setSplitPanelLastInteraction] = useState<undefined | SplitPanelLastInteraction>();\n    useEffectOnUpdate(\n      () => setSplitPanelLastInteraction(splitPanelOpen ? { type: 'open' } : { type: 'close' }),\n      [splitPanelOpen]\n    );\n    useEffectOnUpdate(() => setSplitPanelLastInteraction({ type: 'position' }), [splitPanelPosition]);\n\n    const contentMaxWidthStyle = !isMobile ? { maxWidth: defaults.maxContentWidth } : undefined;\n\n    const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n\n    const splitPanelContext: SplitPanelContextProps = {\n      topOffset: headerHeight + (finalSplitPanePosition === 'bottom' ? stickyNotificationsHeight || 0 : 0),\n      bottomOffset: footerHeight,\n      leftOffset:\n        leftOffset + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),\n      rightOffset: rightOffset + (isMobile ? 0 : !toolsHide && toolsOpen ? toolsWidth : toolsClosedWidth),\n      position: finalSplitPanePosition,\n      size: splitPanelSize,\n      getMaxWidth: getSplitPanelMaxWidth,\n      getMaxHeight: getSplitPanelMaxHeight,\n      getHeader: () => splitPanelHeaderRefObject.current,\n      disableContentPaddings,\n      contentWidthStyles: contentMaxWidthStyle,\n      isOpen: splitPanelOpen,\n      isMobile,\n      isRefresh: false,\n      isForcedPosition,\n      lastInteraction: splitPanelLastInteraction,\n      splitPanelRef,\n      splitPanelHeaderRef,\n      onResize: onSplitPanelSizeSet,\n      onToggle,\n      onPreferencesChange: onSplitPanelPreferencesSet,\n      reportSize: setSplitPanelReportedSize,\n    };\n\n    const contentWrapperProps: ContentWrapperProps = {\n      navigationPadding: navigationHide || !!navigationOpen,\n      toolsPadding:\n        // tools padding is displayed in one of the three cases\n        // 1. Nothing on the that screen edge (no tools panel and no split panel)\n        (toolsHide && (!splitPanel || finalSplitPanePosition !== 'side')) ||\n        // 2. Tools panel is present and open\n        toolsVisible ||\n        // 3. Split panel is open in side position\n        splitPanelOpenOnTheSide,\n      isMobile,\n    };\n\n    const { refs: navigationRefs } = useFocusControl(navigationOpen);\n    const { refs: toolsRefs, setFocus: focusToolsClose, loseFocus: loseToolsFocus } = useFocusControl(toolsOpen, true);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        openTools: () => onToolsToggle(true),\n        closeNavigationIfNecessary: () => {\n          if (isMobile) {\n            onNavigationToggle(false);\n          }\n        },\n        focusToolsClose,\n      }),\n      [isMobile, onNavigationToggle, onToolsToggle, focusToolsClose]\n    );\n\n    const splitPanelBottomOffset =\n      (!splitPanel || finalSplitPanePosition !== 'bottom'\n        ? undefined\n        : splitPanelOpen\n        ? splitPanelHeight\n        : splitPanelHeaderHeight) ?? undefined;\n\n    const contentWidthStyles = !isMobile\n      ? { minWidth: defaults.minContentWidth, maxWidth: defaults.maxContentWidth }\n      : undefined;\n\n    const isToolsDrawerHidden = disableContentPaddings;\n\n    const toolsDrawerWidth = (() => {\n      if (isMobile) {\n        return 0;\n      }\n\n      const toolsPanelWidth = toolsHide ? 0 : toolsOpen ? toolsWidth : closedDrawerWidth;\n      const splitPanelWidth =\n        !splitPanel || finalSplitPanePosition !== 'side'\n          ? 0\n          : splitPanelOpen\n          ? splitPanelReportedSize\n          : closedDrawerWidth;\n\n      return toolsPanelWidth + splitPanelWidth;\n    })();\n\n    const navigationDrawerWidth = (() => {\n      if (isMobile) {\n        return 0;\n      }\n\n      return effectiveNavigationWidth;\n    })();\n\n    const previousContentWidth = usePreviousFrameValue(\n      contentWidthWithSplitPanel - (splitPanelOpenOnTheSide ? splitPanelReportedSize : 0)\n    );\n\n    const contentScaleX = (() => {\n      if (isMobile || !isMotionEnabled || !disableContentPaddings || !previousContentWidth) {\n        return undefined;\n      }\n    })();\n\n    return (\n      <div\n        className={clsx(styles.root, testutilStyles.root, disableBodyScroll && styles['root-no-scroll'])}\n        ref={rootRef}\n      >\n        <div className={styles['layout-wrapper']} style={contentHeightStyle}>\n          {isMobile && (!toolsHide || !navigationHide || breadcrumbs) && (\n            <MobileToolbar\n              anyPanelOpen={anyPanelOpen}\n              toggleRefs={{ navigation: navigationRefs.toggle, tools: toolsRefs.toggle }}\n              topOffset={headerHeight}\n              ariaLabels={ariaLabels}\n              navigationHide={navigationHide}\n              toolsHide={toolsHide}\n              onNavigationOpen={() => onNavigationToggle(true)}\n              onToolsOpen={() => onToolsToggle(true)}\n              unfocusable={anyPanelOpen}\n            >\n              {breadcrumbs}\n            </MobileToolbar>\n          )}\n          <div className={clsx(styles.layout, disableBodyScroll && styles['layout-no-scroll'])}>\n            {!navigationHide && (\n              <NavigationPanel\n                ariaLabels={ariaLabels}\n                footerHeight={footerHeight}\n                headerHeight={headerHeight}\n                isHidden={disableContentPaddings}\n                isMobile={isMobile}\n                isMotionEnabled={isMotionEnabled}\n                navigation={navigation}\n                navigationDrawerWidth={navigationDrawerWidth}\n                navigationOpen={navigationOpen}\n                onClick={isMobile ? onNavigationClick : undefined}\n                onNavigationToggle={onNavigationToggle}\n                panelHeightStyle={panelHeightStyle}\n                toggleRefs={navigationRefs}\n                navigationWidth={navigationWidth}\n              />\n            )}\n            <main\n              ref={legacyScrollRootRef}\n              className={clsx(styles['layout-main'], {\n                [styles['layout-main-scrollable']]: disableBodyScroll,\n                [testutilStyles['disable-body-scroll-root']]: disableBodyScroll,\n                [styles.unfocusable]: isMobile && anyPanelOpen,\n              })}\n            >\n              <div\n                style={{\n                  marginBottom: splitPanelBottomOffset,\n                  transform: contentScaleX ? `scaleX(${contentScaleX})` : undefined,\n                }}\n              >\n                {notifications && (\n                  <Notifications\n                    testUtilsClassName={clsx(styles.notifications, testutilStyles.notifications)}\n                    labels={ariaLabels}\n                    topOffset={disableBodyScroll ? 0 : headerHeight}\n                    sticky={!isMobile && stickyNotifications}\n                    ref={notificationsRef}\n                    isMobile={isMobile}\n                    navigationPadding={contentWrapperProps.navigationPadding}\n                    toolsPadding={contentWrapperProps.toolsPadding}\n                    contentWidthStyles={contentWidthStyles}\n                  >\n                    {notifications}\n                  </Notifications>\n                )}\n                {((!isMobile && breadcrumbs) || contentHeader) && (\n                  <ContentWrapper {...contentWrapperProps} contentWidthStyles={contentWidthStyles}>\n                    {!isMobile && breadcrumbs && (\n                      <div\n                        className={clsx(styles.breadcrumbs, testutilStyles.breadcrumbs, styles['breadcrumbs-desktop'])}\n                      >\n                        {breadcrumbs}\n                      </div>\n                    )}\n                    {contentHeader && (\n                      <div\n                        className={clsx(\n                          styles['content-header-wrapper'],\n                          !hasRenderedNotifications &&\n                            (isMobile || !breadcrumbs) &&\n                            styles['content-extra-top-padding'],\n                          !hasRenderedNotifications && !breadcrumbs && styles['content-header-wrapper-first-child'],\n                          !disableContentHeaderOverlap && styles['content-header-wrapper-overlapped']\n                        )}\n                      >\n                        {contentHeader}\n                      </div>\n                    )}\n                  </ContentWrapper>\n                )}\n                <ContentWrapper\n                  {...contentWrapperProps}\n                  ref={mainContentRef}\n                  disablePaddings={disableContentPaddings}\n                  // eslint-disable-next-line react/forbid-component-props\n                  className={clsx(\n                    !disableContentPaddings && styles['content-wrapper'],\n                    !disableContentPaddings &&\n                      (isMobile || !breadcrumbs) &&\n                      !contentHeader &&\n                      styles['content-extra-top-padding'],\n                    !hasRenderedNotifications &&\n                      !breadcrumbs &&\n                      !isMobile &&\n                      !contentHeader &&\n                      styles['content-wrapper-first-child']\n                  )}\n                >\n                  <div\n                    className={clsx(\n                      styles.content,\n                      testutilStyles.content,\n                      !disableContentHeaderOverlap && contentHeader && styles['content-overlapped']\n                    )}\n                    style={contentWidthStyles}\n                  >\n                    <AppLayoutContext.Provider\n                      value={{\n                        stickyOffsetTop:\n                          (disableBodyScroll ? 0 : headerHeight) +\n                          (stickyNotificationsHeight !== null ? stickyNotificationsHeight : 0),\n                        stickyOffsetBottom: footerHeight + (splitPanelBottomOffset || 0),\n                      }}\n                    >\n                      {content}\n                    </AppLayoutContext.Provider>\n                  </div>\n                </ContentWrapper>\n              </div>\n              {finalSplitPanePosition === 'bottom' && (\n                <SplitPanelWrapper context={splitPanelContext}>{splitPanel}</SplitPanelWrapper>\n              )}\n            </main>\n\n            <ToolsAndSplitPanel\n              splitPanel={finalSplitPanePosition === 'side' ? splitPanel : undefined}\n              ariaLabels={ariaLabels}\n              closedDrawerWidth={closedDrawerWidth}\n              contentHeightStyle={contentHeightStyle}\n              disableContentPaddings={disableContentPaddings}\n              drawerWidth={toolsDrawerWidth}\n              footerHeight={footerHeight}\n              headerHeight={headerHeight}\n              isHidden={isToolsDrawerHidden}\n              isMobile={isMobile}\n              isMotionEnabled={isMotionEnabled}\n              onToolsToggle={onToolsToggle}\n              panelHeightStyle={panelHeightStyle}\n              splitPanelContext={splitPanelContext}\n              splitPanelOpen={splitPanelOpenOnTheSide}\n              splitPanelReportedSize={splitPanelReportedSize}\n              toggleRefs={toolsRefs}\n              onLoseToolsFocus={loseToolsFocus}\n              tools={tools}\n              toolsHide={Boolean(toolsHide)}\n              toolsOpen={toolsOpen}\n              toolsWidth={toolsWidth}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\napplyDisplayName(AppLayout, 'AppLayout');\nexport default AppLayout;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}