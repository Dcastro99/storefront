{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport useFocusVisible from '../../hooks/focus-visible';\nimport { useUniqueId } from '../../hooks/use-unique-id';\nfunction joinString(values) {\n  return values.filter(function (value) {\n    return !!value;\n  }).join(' ');\n}\nexport default function AbstractSwitch(_a) {\n  var _b, _c;\n  var controlId = _a.controlId,\n    controlClassName = _a.controlClassName,\n    outlineClassName = _a.outlineClassName,\n    disabled = _a.disabled,\n    nativeControl = _a.nativeControl,\n    styledControl = _a.styledControl,\n    label = _a.label,\n    description = _a.description,\n    descriptionBottomPadding = _a.descriptionBottomPadding,\n    ariaLabel = _a.ariaLabel,\n    ariaLabelledby = _a.ariaLabelledby,\n    ariaDescribedby = _a.ariaDescribedby,\n    withoutLabel = _a.withoutLabel,\n    __internalRootRef = _a.__internalRootRef,\n    rest = __rest(_a, [\"controlId\", \"controlClassName\", \"outlineClassName\", \"disabled\", \"nativeControl\", \"styledControl\", \"label\", \"description\", \"descriptionBottomPadding\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescribedby\", \"withoutLabel\", \"__internalRootRef\"]);\n  var uniqueId = useUniqueId();\n  var id = controlId || uniqueId;\n  var focusVisible = useFocusVisible();\n  var wrapperId = \"\".concat(id, \"-wrapper\");\n  var labelId = \"\".concat(id, \"-label\");\n  var descriptionId = \"\".concat(id, \"-description\");\n  var WrapperElement = withoutLabel ? 'div' : 'label';\n  var wrapperAttributes = {};\n  if (!withoutLabel) {\n    wrapperAttributes.id = wrapperId;\n    wrapperAttributes.htmlFor = id;\n  }\n  var ariaLabelledByIds = [];\n  if (label) {\n    ariaLabelledByIds.push(labelId);\n  }\n  if (ariaLabelledby) {\n    ariaLabelledByIds.push(ariaLabelledby);\n  }\n  var ariaDescriptons = [];\n  if (ariaDescribedby) {\n    ariaDescriptons.push(ariaDescribedby);\n  }\n  if (description) {\n    ariaDescriptons.push(descriptionId);\n  }\n  return React.createElement(\"div\", __assign({}, rest, {\n    className: clsx(styles.wrapper, rest.className),\n    ref: __internalRootRef\n  }), React.createElement(WrapperElement, __assign({}, wrapperAttributes, {\n    className: styles['label-wrapper'],\n    \"aria-disabled\": disabled ? 'true' : undefined\n  }), React.createElement(\"span\", {\n    className: clsx(styles.control, controlClassName)\n  }, styledControl, nativeControl(__assign(__assign({}, focusVisible), {\n    id: id,\n    disabled: disabled,\n    className: styles['native-input'],\n    'aria-describedby': ariaDescriptons.length ? joinString(ariaDescriptons) : undefined,\n    'aria-labelledby': ariaLabelledByIds.length ? joinString(ariaLabelledByIds) : undefined,\n    'aria-label': ariaLabel\n  })), React.createElement(\"span\", {\n    className: clsx(styles.outline, outlineClassName)\n  })), React.createElement(\"span\", {\n    className: clsx(styles.content, !label && !description && styles['empty-content'])\n  }, label && React.createElement(\"span\", {\n    id: labelId,\n    className: clsx(styles.label, (_b = {}, _b[styles['label-disabled']] = disabled, _b))\n  }, label), description && React.createElement(\"span\", {\n    id: descriptionId,\n    className: clsx(styles.description, (_c = {}, _c[styles['description-disabled']] = disabled, _c[styles['description-bottom-padding']] = descriptionBottomPadding, _c))\n  }, description))));\n}","map":{"version":3,"mappings":"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","names":["React","clsx","styles","useFocusVisible","useUniqueId","joinString","values","filter","value","join","AbstractSwitch","_a","controlClassName","outlineClassName","disabled","nativeControl","styledControl","label","description","descriptionBottomPadding","ariaLabel","ariaLabelledby","ariaDescribedby","withoutLabel","__internalRootRef","rest","uniqueId","id","controlId","focusVisible","wrapperId","labelId","descriptionId","WrapperElement","wrapperAttributes","htmlFor","ariaLabelledByIds","push","ariaDescriptons","className","wrapper","ref","undefined","control","length","outline","content","_b","_c"],"sources":["/Users/dcastro/node_modules/src/internal/components/abstract-switch/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport useFocusVisible from '../../hooks/focus-visible';\nimport { useUniqueId } from '../../hooks/use-unique-id';\nimport { InternalBaseComponentProps } from '../../hooks/use-base-component/index.js';\n\nexport interface AbstractSwitchProps extends React.HTMLAttributes<HTMLElement>, InternalBaseComponentProps {\n  controlId?: string;\n  controlClassName: string;\n  outlineClassName: string;\n  disabled?: boolean;\n  nativeControl: (props: React.InputHTMLAttributes<HTMLInputElement>) => React.ReactElement;\n  styledControl: React.ReactElement;\n  label?: React.ReactNode;\n  description?: React.ReactNode;\n  descriptionBottomPadding?: boolean;\n  ariaLabel?: string;\n  ariaLabelledby?: string;\n  ariaDescribedby?: string;\n  withoutLabel?: boolean;\n}\n\nfunction joinString(values: (string | undefined)[]) {\n  return values.filter((value): value is string => !!value).join(' ');\n}\n\nexport default function AbstractSwitch({\n  controlId,\n  controlClassName,\n  outlineClassName,\n  disabled,\n  nativeControl,\n  styledControl,\n  label,\n  description,\n  descriptionBottomPadding,\n  ariaLabel,\n  ariaLabelledby,\n  ariaDescribedby,\n  withoutLabel,\n  __internalRootRef,\n  ...rest\n}: AbstractSwitchProps) {\n  const uniqueId = useUniqueId();\n  const id = controlId || uniqueId;\n\n  const focusVisible = useFocusVisible();\n  const wrapperId = `${id}-wrapper`;\n  const labelId = `${id}-label`;\n  const descriptionId = `${id}-description`;\n\n  const WrapperElement = withoutLabel ? 'div' : 'label';\n  const wrapperAttributes: Record<string, string | undefined> = {};\n  if (!withoutLabel) {\n    wrapperAttributes.id = wrapperId;\n    wrapperAttributes.htmlFor = id;\n  }\n\n  const ariaLabelledByIds = [];\n  if (label) {\n    ariaLabelledByIds.push(labelId);\n  }\n  if (ariaLabelledby) {\n    ariaLabelledByIds.push(ariaLabelledby);\n  }\n\n  const ariaDescriptons = [];\n  if (ariaDescribedby) {\n    ariaDescriptons.push(ariaDescribedby);\n  }\n  if (description) {\n    ariaDescriptons.push(descriptionId);\n  }\n\n  return (\n    <div {...rest} className={clsx(styles.wrapper, rest.className)} ref={__internalRootRef}>\n      <WrapperElement\n        {...wrapperAttributes}\n        className={styles['label-wrapper']}\n        aria-disabled={disabled ? 'true' : undefined}\n      >\n        <span className={clsx(styles.control, controlClassName)}>\n          {styledControl}\n          {nativeControl({\n            ...focusVisible,\n            id,\n            disabled,\n            className: styles['native-input'],\n            'aria-describedby': ariaDescriptons.length ? joinString(ariaDescriptons) : undefined,\n            'aria-labelledby': ariaLabelledByIds.length ? joinString(ariaLabelledByIds) : undefined,\n            'aria-label': ariaLabel,\n          })}\n          <span className={clsx(styles.outline, outlineClassName)} />\n        </span>\n        <span className={clsx(styles.content, !label && !description && styles['empty-content'])}>\n          {label && (\n            <span id={labelId} className={clsx(styles.label, { [styles['label-disabled']]: disabled })}>\n              {label}\n            </span>\n          )}\n          {description && (\n            <span\n              id={descriptionId}\n              className={clsx(styles.description, {\n                [styles['description-disabled']]: disabled,\n                [styles['description-bottom-padding']]: descriptionBottomPadding,\n              })}\n            >\n              {description}\n            </span>\n          )}\n        </span>\n      </WrapperElement>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}