{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { THEME, PACKAGE_VERSION } from './environment';\nvar oneTimeMetrics = {};\nvar buildMetricHash = function (_a) {\n  var source = _a.source,\n    action = _a.action;\n  return [\"src\".concat(source), \"action\".concat(action)].join('_');\n};\nvar getMajorVersion = function (versionString) {\n  var majorVersionMatch = versionString.match(/^(\\d+\\.\\d+)/);\n  return majorVersionMatch ? majorVersionMatch[1] : '';\n};\nvar formatMajorVersionForMetricDetail = function (version) {\n  return version.replace(/\\s/g, '');\n};\nvar formatVersionForMetricName = function (theme, version) {\n  return \"\".concat(theme.charAt(0)).concat(getMajorVersion(version).replace('.', ''));\n};\nvar buildMetricDetail = function (_a) {\n  var source = _a.source,\n    action = _a.action,\n    version = _a.version;\n  var metricOrigin = typeof AWSUI_METRIC_ORIGIN !== 'undefined' ? AWSUI_METRIC_ORIGIN : 'main';\n  var detailObject = {\n    o: metricOrigin,\n    s: source,\n    t: THEME,\n    a: action,\n    f: framework,\n    v: formatMajorVersionForMetricDetail(version)\n  };\n  return JSON.stringify(detailObject);\n};\nvar buildMetricName = function (_a) {\n  var source = _a.source,\n    version = _a.version;\n  return ['awsui', source, \"\".concat(formatVersionForMetricName(THEME, version))].join('_');\n};\nvar findAWSC = function (currentWindow) {\n  try {\n    if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC) === 'object') {\n      return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC;\n    }\n    if (!currentWindow || currentWindow.parent === currentWindow) {\n      // When the window has no more parents, it references itself\n      return undefined;\n    }\n    return findAWSC(currentWindow.parent);\n  } catch (ex) {\n    // Most likely a cross-origin access error\n    return undefined;\n  }\n};\n// react is the default framework we're logging, for angular we need to set it explicitly\nvar framework = 'react';\nfunction setFramework(fwk) {\n  framework = fwk;\n}\nexport var Metrics = {\n  initMetrics: function (fwk) {\n    setFramework(fwk);\n  },\n  /**\n   * Calls Console Platform's client logging JS API with provided metric name, value, and detail.\n   * Does nothing if Console Platform client logging JS is not present in page.\n   */\n  sendMetric: function (metricName, value, detail) {\n    if (!metricName || !/^[a-zA-Z0-9_-]{1,32}$/.test(metricName)) {\n      console.error(\"Invalid metric name: \".concat(metricName));\n      return;\n    }\n    if (detail && detail.length > 200) {\n      console.error(\"Detail for metric \".concat(metricName, \" is too long: \").concat(detail));\n      return;\n    }\n    var AWSC = findAWSC(window);\n    if (typeof AWSC === 'object' && typeof AWSC.Clog === 'object' && typeof AWSC.Clog.log === 'function') {\n      AWSC.Clog.log(metricName, value, detail);\n    }\n  },\n  sendMetricObject: function (metric, value) {\n    this.sendMetric(buildMetricName(metric), value, buildMetricDetail(metric));\n  },\n  sendMetricObjectOnce: function (metric, value) {\n    var metricHash = buildMetricHash(metric);\n    if (!oneTimeMetrics[metricHash]) {\n      this.sendMetricObject(metric, value);\n      oneTimeMetrics[metricHash] = true;\n    }\n  },\n  /*\n   * Calls Console Platform's client logging only the first time the provided metricName is used.\n   * Subsequent calls with the same metricName are ignored.\n   */\n  sendMetricOnce: function (metricName, value, detail) {\n    if (!oneTimeMetrics[metricName]) {\n      this.sendMetric(metricName, value, detail);\n      oneTimeMetrics[metricName] = true;\n    }\n  },\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was loaded. The component load event will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentLoaded: function () {\n    this.sendMetricObjectOnce({\n      source: 'components',\n      action: 'loaded',\n      version: PACKAGE_VERSION\n    }, 1);\n  },\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was used in the page.  A component will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentUsed: function (componentName) {\n    this.sendMetricObjectOnce({\n      source: componentName,\n      action: 'used',\n      version: PACKAGE_VERSION\n    }, 1);\n  }\n};\nexport var MetricsTestHelper = {\n  resetOneTimeMetricsCache: function () {\n    for (var prop in oneTimeMetrics) {\n      delete oneTimeMetrics[prop];\n    }\n  },\n  formatMajorVersionForMetricDetail: formatMajorVersionForMetricDetail,\n  formatVersionForMetricName: formatVersionForMetricName\n};","map":{"version":3,"mappings":"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","names":["THEME","PACKAGE_VERSION","oneTimeMetrics","buildMetricHash","_a","source","action","join","getMajorVersion","versionString","majorVersionMatch","match","formatMajorVersionForMetricDetail","version","replace","formatVersionForMetricName","theme","charAt","buildMetricDetail","metricOrigin","AWSUI_METRIC_ORIGIN","detailObject","o","s","t","a","f","framework","v","JSON","stringify","buildMetricName","findAWSC","currentWindow","AWSC","parent","undefined","ex","setFramework","fwk","Metrics","initMetrics","sendMetric","metricName","value","detail","test","console","error","length","window","Clog","log","sendMetricObject","metric","sendMetricObjectOnce","metricHash","sendMetricOnce","logComponentLoaded","logComponentUsed","componentName","MetricsTestHelper","resetOneTimeMetricsCache","prop"],"sources":["/Users/dcastro/node_modules/src/internal/metrics.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { THEME, PACKAGE_VERSION } from './environment';\n\nexport interface MetricsLogItem {\n  source: string;\n  action: string;\n  version: string;\n}\n\ninterface AWSC {\n  Clog: any;\n}\n\ninterface MetricsWindow extends Window {\n  AWSC?: AWSC;\n}\n\ndeclare const AWSUI_METRIC_ORIGIN: string | undefined;\n\nconst oneTimeMetrics: Record<string, boolean> = {};\n\nconst buildMetricHash = ({ source, action }: MetricsLogItem): string => {\n  return [`src${source}`, `action${action}`].join('_');\n};\n\nconst getMajorVersion = (versionString: string): string => {\n  const majorVersionMatch = versionString.match(/^(\\d+\\.\\d+)/);\n  return majorVersionMatch ? majorVersionMatch[1] : '';\n};\n\nconst formatMajorVersionForMetricDetail = (version: string) => {\n  return version.replace(/\\s/g, '');\n};\n\nconst formatVersionForMetricName = (theme: string, version: string) => {\n  return `${theme.charAt(0)}${getMajorVersion(version).replace('.', '')}`;\n};\n\nconst buildMetricDetail = ({ source, action, version }: MetricsLogItem): string => {\n  const metricOrigin = typeof AWSUI_METRIC_ORIGIN !== 'undefined' ? AWSUI_METRIC_ORIGIN : 'main';\n  const detailObject = {\n    o: metricOrigin,\n    s: source,\n    t: THEME,\n    a: action,\n    f: framework,\n    v: formatMajorVersionForMetricDetail(version),\n  };\n  return JSON.stringify(detailObject);\n};\n\nconst buildMetricName = ({ source, version }: MetricsLogItem): string => {\n  return ['awsui', source, `${formatVersionForMetricName(THEME, version)}`].join('_');\n};\n\nconst findAWSC = (currentWindow?: MetricsWindow): AWSC | undefined => {\n  try {\n    if (typeof currentWindow?.AWSC === 'object') {\n      return currentWindow?.AWSC;\n    }\n\n    if (!currentWindow || currentWindow.parent === currentWindow) {\n      // When the window has no more parents, it references itself\n      return undefined;\n    }\n\n    return findAWSC(currentWindow.parent);\n  } catch (ex) {\n    // Most likely a cross-origin access error\n    return undefined;\n  }\n};\n\n// react is the default framework we're logging, for angular we need to set it explicitly\nlet framework = 'react';\nfunction setFramework(fwk: string) {\n  framework = fwk;\n}\n\nexport const Metrics = {\n  initMetrics(fwk: string) {\n    setFramework(fwk);\n  },\n\n  /**\n   * Calls Console Platform's client logging JS API with provided metric name, value, and detail.\n   * Does nothing if Console Platform client logging JS is not present in page.\n   */\n  sendMetric(metricName: string, value: number, detail?: string): void {\n    if (!metricName || !/^[a-zA-Z0-9_-]{1,32}$/.test(metricName)) {\n      console.error(`Invalid metric name: ${metricName}`);\n      return;\n    }\n    if (detail && detail.length > 200) {\n      console.error(`Detail for metric ${metricName} is too long: ${detail}`);\n      return;\n    }\n    const AWSC = findAWSC(window);\n    if (typeof AWSC === 'object' && typeof AWSC.Clog === 'object' && typeof AWSC.Clog.log === 'function') {\n      AWSC.Clog.log(metricName, value, detail);\n    }\n  },\n\n  sendMetricObject(metric: MetricsLogItem, value: number): void {\n    this.sendMetric(buildMetricName(metric), value, buildMetricDetail(metric));\n  },\n\n  sendMetricObjectOnce(metric: MetricsLogItem, value: number): void {\n    const metricHash = buildMetricHash(metric);\n    if (!oneTimeMetrics[metricHash]) {\n      this.sendMetricObject(metric, value);\n      oneTimeMetrics[metricHash] = true;\n    }\n  },\n\n  /*\n   * Calls Console Platform's client logging only the first time the provided metricName is used.\n   * Subsequent calls with the same metricName are ignored.\n   */\n  sendMetricOnce(metricName: string, value: number, detail?: string): void {\n    if (!oneTimeMetrics[metricName]) {\n      this.sendMetric(metricName, value, detail);\n      oneTimeMetrics[metricName] = true;\n    }\n  },\n\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was loaded. The component load event will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentLoaded() {\n    this.sendMetricObjectOnce(\n      {\n        source: 'components',\n        action: 'loaded',\n        version: PACKAGE_VERSION,\n      },\n      1\n    );\n  },\n\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was used in the page.  A component will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentUsed(componentName: string) {\n    this.sendMetricObjectOnce(\n      {\n        source: componentName,\n        action: 'used',\n        version: PACKAGE_VERSION,\n      },\n      1\n    );\n  },\n};\n\nexport const MetricsTestHelper = {\n  resetOneTimeMetricsCache: () => {\n    for (const prop in oneTimeMetrics) {\n      delete oneTimeMetrics[prop];\n    }\n  },\n  formatMajorVersionForMetricDetail,\n  formatVersionForMetricName,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}