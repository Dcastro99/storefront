{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useLayoutEffect } from 'react';\nimport { useMergeRefs } from '../../hooks/use-merge-refs';\nimport { getBaseProps } from '../../base-component';\nimport { fireCancelableEvent, fireNonCancelableEvent } from '../../events';\nimport { useFormFieldContext } from '../../context/form-field-context';\nimport InternalInput from '../../../input/internal';\nimport useMask from './use-mask';\nimport MaskFormat from './utils/mask-format';\nvar MaskedInput = React.forwardRef(function (_a, ref) {\n  var value = _a.value,\n    onBlur = _a.onBlur,\n    onChange = _a.onChange,\n    onKeyDown = _a.onKeyDown,\n    mask = _a.mask,\n    _b = _a.autofix,\n    autofix = _b === void 0 ? false : _b,\n    _c = _a.disableAutocompleteOnBlur,\n    disableAutocompleteOnBlur = _c === void 0 ? false : _c,\n    rest = __rest(_a, [\"value\", \"onBlur\", \"onChange\", \"onKeyDown\", \"mask\", \"autofix\", \"disableAutocompleteOnBlur\"]);\n  var baseProps = getBaseProps(rest);\n  var formFieldContext = useFormFieldContext(rest);\n  var inputRef = React.useRef(null);\n  var _d = useState(null),\n    cursorPosition = _d[0],\n    setCursorPosition = _d[1];\n  useLayoutEffect(function () {\n    var _a;\n    if (cursorPosition !== null) {\n      (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.setSelectionRange(cursorPosition, cursorPosition);\n    }\n  }, [cursorPosition, inputRef]);\n  var _e = useMask({\n      format: new MaskFormat(mask),\n      value: value,\n      inputRef: inputRef,\n      autofix: autofix,\n      disableAutocompleteOnBlur: disableAutocompleteOnBlur,\n      onChange: function (value) {\n        return !rest.readOnly && fireNonCancelableEvent(onChange, {\n          value: value\n        });\n      },\n      onKeyDown: function (event) {\n        return !rest.readOnly && onKeyDown && fireCancelableEvent(onKeyDown, event.detail, event);\n      },\n      onBlur: function () {\n        return fireNonCancelableEvent(onBlur);\n      },\n      setPosition: setCursorPosition\n    }),\n    onPaste = _e.onPaste,\n    maskProps = __rest(_e, [\"onPaste\"]);\n  var inputProps = __assign(__assign(__assign(__assign({}, rest), baseProps), formFieldContext), maskProps);\n  var mergedRef = useMergeRefs(ref, inputRef);\n  return React.createElement(InternalInput, __assign({}, inputProps, {\n    ref: mergedRef,\n    __nativeAttributes: {\n      onPaste: onPaste\n    }\n  }));\n});\nexport { useMask };\nexport default MaskedInput;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAASC,QAAQ,EAAEC,eAAe,QAAQ,OAAO;AAC7D,SAASC,YAAY,QAAQ,4BAA4B;AAEzD,SAASC,YAAY,QAAQ,sBAAsB;AACnD,SAASC,mBAAmB,EAAEC,sBAAsB,QAAQ,cAAc;AAE1E,SAASC,mBAAmB,QAAQ,kCAAkC;AAEtE,OAAOC,aAAa,MAAM,yBAAyB;AAEnD,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,UAAU,MAAM,qBAAqB;AAI5C,IAAMC,WAAW,GAAGX,KAAK,CAACY,UAAU,CAClC,UACEC,EASmB,EACnBC,GAA8B;EAT5B,SAAK;IACLC,MAAM;IACNC,QAAQ;IACRC,SAAS;IACTC,IAAI;IACJC,eAAe;IAAfC,OAAO,mBAAG,KAAK;IACfC,iCAAiC;IAAjCC,yBAAyB,mBAAG,KAAK;IAC9BC,IAAI,cART,4FASC,CADQ;EAIT,IAAMC,SAAS,GAAGpB,YAAY,CAACmB,IAAI,CAAC;EACpC,IAAME,gBAAgB,GAAGlB,mBAAmB,CAACgB,IAAI,CAAC;EAClD,IAAMG,QAAQ,GAAG1B,KAAK,CAAC2B,MAAM,CAAmB,IAAI,CAAC;EAC/C,SAAsC1B,QAAQ,CAAgB,IAAI,CAAC;IAAlE2B,cAAc;IAAEC,iBAAiB,QAAiC;EAEzE3B,eAAe,CAAC;;IACd,IAAI0B,cAAc,KAAK,IAAI,EAAE;MAC3B,cAAQ,CAACE,OAAO,0CAAEC,iBAAiB,CAACH,cAAc,EAAEA,cAAc,CAAC;;EAEvE,CAAC,EAAE,CAACA,cAAc,EAAEF,QAAQ,CAAC,CAAC;EAE9B,IAAMM,KAA4BvB,OAAO,CAAC;MACxCwB,MAAM,EAAE,IAAIvB,UAAU,CAACQ,IAAI,CAAC;MAC5BgB,KAAK;MACLR,QAAQ;MACRN,OAAO;MACPE,yBAAyB;MACzBN,QAAQ,EAAE,UAACkB,KAAa;QAAK,QAACX,IAAI,CAACY,QAAQ,IAAI7B,sBAAsB,CAACU,QAAQ,EAAE;UAAEkB,KAAK;QAAA,CAAE,CAAC;MAA7D,CAA6D;MAC1FjB,SAAS,EAAE,UAACmB,KAAkB;QAC5B,QAACb,IAAI,CAACY,QAAQ,IAAIlB,SAAS,IAAIZ,mBAAmB,CAACY,SAAS,EAAEmB,KAAK,CAACC,MAAM,EAAED,KAAK,CAAC;MAAlF,CAAkF;MACpFrB,MAAM,EAAE;QAAM,6BAAsB,CAACA,MAAM,CAAC;MAA9B,CAA8B;MAC5CuB,WAAW,EAAET;KACd,CAAC;IAXMU,OAAO;IAAKC,SAAS,cAAvB,WAAyB,CAW7B;EAEF,IAAMC,UAAU,2CAAQlB,IAAI,GAAKC,SAAS,GAAKC,gBAAgB,GAAKe,SAAS,CAAE;EAC/E,IAAME,SAAS,GAAGvC,YAAY,CAACW,GAAG,EAAEY,QAAQ,CAAC;EAC7C,OACE1B,oBAACQ,aAAa,eACRiC,UAAU;IACd3B,GAAG,EAAE4B,SAAS;IACdC,kBAAkB,EAAE;MAClBJ,OAAO;;EACR,GACD;AAEN,CAAC,CACF;AAED,SAA2B9B,OAAO;AAClC,eAAeE,WAAW","names":["React","useState","useLayoutEffect","useMergeRefs","getBaseProps","fireCancelableEvent","fireNonCancelableEvent","useFormFieldContext","InternalInput","useMask","MaskFormat","MaskedInput","forwardRef","_a","ref","onBlur","onChange","onKeyDown","mask","_b","autofix","_c","disableAutocompleteOnBlur","rest","baseProps","formFieldContext","inputRef","useRef","cursorPosition","setCursorPosition","current","setSelectionRange","_e","format","value","readOnly","event","detail","setPosition","onPaste","maskProps","inputProps","mergedRef","__nativeAttributes"],"sources":["/Users/dcastro/node_modules/src/internal/components/masked-input/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Ref, useState, useLayoutEffect } from 'react';\nimport { useMergeRefs } from '../../hooks/use-merge-refs';\n\nimport { getBaseProps } from '../../base-component';\nimport { fireCancelableEvent, fireNonCancelableEvent } from '../../events';\n\nimport { useFormFieldContext } from '../../context/form-field-context';\n\nimport InternalInput from '../../../input/internal';\n\nimport useMask from './use-mask';\nimport MaskFormat from './utils/mask-format';\n\nimport { MaskedInputProps } from './interfaces';\n\nconst MaskedInput = React.forwardRef(\n  (\n    {\n      value,\n      onBlur,\n      onChange,\n      onKeyDown,\n      mask,\n      autofix = false,\n      disableAutocompleteOnBlur = false,\n      ...rest\n    }: MaskedInputProps,\n    ref: Ref<MaskedInputProps.Ref>\n  ) => {\n    const baseProps = getBaseProps(rest);\n    const formFieldContext = useFormFieldContext(rest);\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const [cursorPosition, setCursorPosition] = useState<number | null>(null);\n\n    useLayoutEffect(() => {\n      if (cursorPosition !== null) {\n        inputRef.current?.setSelectionRange(cursorPosition, cursorPosition);\n      }\n    }, [cursorPosition, inputRef]);\n\n    const { onPaste, ...maskProps } = useMask({\n      format: new MaskFormat(mask),\n      value,\n      inputRef,\n      autofix,\n      disableAutocompleteOnBlur,\n      onChange: (value: string) => !rest.readOnly && fireNonCancelableEvent(onChange, { value }),\n      onKeyDown: (event: CustomEvent) =>\n        !rest.readOnly && onKeyDown && fireCancelableEvent(onKeyDown, event.detail, event),\n      onBlur: () => fireNonCancelableEvent(onBlur),\n      setPosition: setCursorPosition,\n    });\n\n    const inputProps = { ...rest, ...baseProps, ...formFieldContext, ...maskProps };\n    const mergedRef = useMergeRefs(ref, inputRef);\n    return (\n      <InternalInput\n        {...inputProps}\n        ref={mergedRef}\n        __nativeAttributes={{\n          onPaste,\n        }}\n      />\n    );\n  }\n);\n\nexport { MaskedInputProps, useMask };\nexport default MaskedInput;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}