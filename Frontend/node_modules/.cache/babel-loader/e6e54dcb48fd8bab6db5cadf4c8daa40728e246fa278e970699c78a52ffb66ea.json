{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect, useRef } from 'react';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { getBaseProps } from '../internal/base-component';\nimport AbstractSwitch from '../internal/components/abstract-switch';\nimport styles from './styles.css.js';\nimport CheckboxIcon from '../internal/components/checkbox-icon';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nvar InternalCheckbox = React.forwardRef(function (_a, ref) {\n  var controlId = _a.controlId,\n    name = _a.name,\n    checked = _a.checked,\n    disabled = _a.disabled,\n    indeterminate = _a.indeterminate,\n    children = _a.children,\n    description = _a.description,\n    ariaLabel = _a.ariaLabel,\n    onFocus = _a.onFocus,\n    onBlur = _a.onBlur,\n    onChange = _a.onChange,\n    withoutLabel = _a.withoutLabel,\n    tabIndex = _a.tabIndex,\n    __internalRootRef = _a.__internalRootRef,\n    rest = __rest(_a, [\"controlId\", \"name\", \"checked\", \"disabled\", \"indeterminate\", \"children\", \"description\", \"ariaLabel\", \"onFocus\", \"onBlur\", \"onChange\", \"withoutLabel\", \"tabIndex\", \"__internalRootRef\"]);\n  var _b = useFormFieldContext(rest),\n    ariaDescribedby = _b.ariaDescribedby,\n    ariaLabelledby = _b.ariaLabelledby;\n  var baseProps = getBaseProps(rest);\n  var checkboxRef = useRef(null);\n  useForwardFocus(ref, checkboxRef);\n  useEffect(function () {\n    if (checkboxRef.current) {\n      checkboxRef.current.indeterminate = Boolean(indeterminate);\n    }\n  });\n  return React.createElement(AbstractSwitch, __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    controlClassName: styles['checkbox-control'],\n    outlineClassName: styles.outline,\n    controlId: controlId,\n    disabled: disabled,\n    label: children,\n    description: description,\n    descriptionBottomPadding: true,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescribedby: ariaDescribedby,\n    nativeControl: function (nativeControlProps) {\n      return React.createElement(\"input\", __assign({}, nativeControlProps, {\n        ref: checkboxRef,\n        type: \"checkbox\",\n        checked: checked,\n        name: name,\n        tabIndex: tabIndex,\n        onFocus: onFocus && function () {\n          return fireNonCancelableEvent(onFocus);\n        },\n        onBlur: onBlur && function () {\n          return fireNonCancelableEvent(onBlur);\n        },\n        // empty handler to suppress React controllability warning\n        onChange: function () {},\n        onClick:\n        // Using onClick because onChange does not fire in indeterminate state in Internet Explorer and Legacy Edge\n        // https://stackoverflow.com/questions/33523130/ie-does-not-fire-change-event-on-indeterminate-checkbox-when-you-click-on-it\n        onChange && function () {\n          return fireNonCancelableEvent(onChange,\n          // for deterministic transitions \"indeterminate\" -> \"checked\" -> \"unchecked\"\n          indeterminate ? {\n            checked: true,\n            indeterminate: false\n          } : {\n            checked: !checked,\n            indeterminate: false\n          });\n        }\n      }));\n    },\n    styledControl: React.createElement(CheckboxIcon, {\n      checked: checked,\n      indeterminate: indeterminate,\n      disabled: disabled\n    }),\n    withoutLabel: withoutLabel,\n    __internalRootRef: __internalRootRef\n  }));\n});\nexport default InternalCheckbox;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,sBAAsB,QAAQ,oBAAoB;AAC3D,OAAOC,eAAe,MAAM,iCAAiC;AAC7D,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAOC,cAAc,MAAM,wCAAwC;AAEnE,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,YAAY,MAAM,sCAAsC;AAE/D,SAASC,mBAAmB,QAAQ,wCAAwC;AAO5E,IAAMC,gBAAgB,GAAGV,KAAK,CAACW,UAAU,CACvC,UACEC,EAgBC,EACDC,GAAG;EAhBD,aAAS;IACTC,IAAI;IACJC,OAAO;IACPC,QAAQ;IACRC,aAAa;IACbC,QAAQ;IACRC,WAAW;IACXC,SAAS;IACTC,OAAO;IACPC,MAAM;IACNC,QAAQ;IACRC,YAAY;IACZC,QAAQ;IACRC,iBAAiB;IACdC,IAAI,cAfT,uLAgBC,CADQ;EAIH,SAAsClB,mBAAmB,CAACkB,IAAI,CAAC;IAA7DC,eAAe;IAAEC,cAAc,oBAA8B;EACrE,IAAMC,SAAS,GAAGzB,YAAY,CAACsB,IAAI,CAAC;EACpC,IAAMI,WAAW,GAAG7B,MAAM,CAAmB,IAAI,CAAC;EAClDE,eAAe,CAACS,GAAG,EAAEkB,WAAW,CAAC;EACjC9B,SAAS,CAAC;IACR,IAAI8B,WAAW,CAACC,OAAO,EAAE;MACvBD,WAAW,CAACC,OAAO,CAACf,aAAa,GAAGgB,OAAO,CAAChB,aAAa,CAAC;;EAE9D,CAAC,CAAC;EACF,OACEjB,oBAACM,cAAc,eACTwB,SAAS;IACbI,SAAS,EAAEnC,IAAI,CAACQ,MAAM,CAAC4B,IAAI,EAAEL,SAAS,CAACI,SAAS,CAAC;IACjDE,gBAAgB,EAAE7B,MAAM,CAAC,kBAAkB,CAAC;IAC5C8B,gBAAgB,EAAE9B,MAAM,CAAC+B,OAAO;IAChCC,SAAS,EAAEA,SAAS;IACpBvB,QAAQ,EAAEA,QAAQ;IAClBwB,KAAK,EAAEtB,QAAQ;IACfC,WAAW,EAAEA,WAAW;IACxBsB,wBAAwB,EAAE,IAAI;IAC9BrB,SAAS,EAAEA,SAAS;IACpBS,cAAc,EAAEA,cAAc;IAC9BD,eAAe,EAAEA,eAAe;IAChCc,aAAa,EAAE,4BAAkB;MAAI,OACnC1C,0CACM2C,kBAAkB;QACtB9B,GAAG,EAAEkB,WAAW;QAChBa,IAAI,EAAC,UAAU;QACf7B,OAAO,EAAEA,OAAO;QAChBD,IAAI,EAAEA,IAAI;QACVW,QAAQ,EAAEA,QAAQ;QAClBJ,OAAO,EAAEA,OAAO,IAAK;UAAM,6BAAsB,CAACA,OAAO,CAAC;QAA/B,CAAgC;QAC3DC,MAAM,EAAEA,MAAM,IAAK;UAAM,6BAAsB,CAACA,MAAM,CAAC;QAA9B,CAA+B;QACxD;QACAC,QAAQ,EAAE,aAAO,CAAC;QAClBsB,OAAO;QACL;QACA;QACAtB,QAAQ,IACP;UACC,6BAAsB,CACpBA,QAAQ;UACR;UACAN,aAAa,GAAG;YAAEF,OAAO,EAAE,IAAI;YAAEE,aAAa,EAAE;UAAK,CAAE,GAAG;YAAEF,OAAO,EAAE,CAACA,OAAO;YAAEE,aAAa,EAAE;UAAK,CAAE,CACtG;QAJD;MAIE,GAEN;IAvBiC,CAwBpC;IACD6B,aAAa,EAAE9C,oBAACQ,YAAY;MAACO,OAAO,EAAEA,OAAO;MAAEE,aAAa,EAAEA,aAAa;MAAED,QAAQ,EAAEA;IAAQ,EAAI;IACnGQ,YAAY,EAAEA,YAAY;IAC1BE,iBAAiB,EAAEA;EAAiB,GACpC;AAEN,CAAC,CACF;AAED,eAAehB,gBAAgB","names":["clsx","React","useEffect","useRef","fireNonCancelableEvent","useForwardFocus","getBaseProps","AbstractSwitch","styles","CheckboxIcon","useFormFieldContext","InternalCheckbox","forwardRef","_a","ref","name","checked","disabled","indeterminate","children","description","ariaLabel","onFocus","onBlur","onChange","withoutLabel","tabIndex","__internalRootRef","rest","ariaDescribedby","ariaLabelledby","baseProps","checkboxRef","current","Boolean","className","root","controlClassName","outlineClassName","outline","controlId","label","descriptionBottomPadding","nativeControl","nativeControlProps","type","onClick","styledControl"],"sources":["/Users/dcastro/node_modules/src/checkbox/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect, useRef } from 'react';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { getBaseProps } from '../internal/base-component';\nimport AbstractSwitch from '../internal/components/abstract-switch';\nimport { CheckboxProps } from './interfaces';\nimport styles from './styles.css.js';\nimport CheckboxIcon from '../internal/components/checkbox-icon';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\n\ninterface InternalProps extends CheckboxProps, InternalBaseComponentProps {\n  withoutLabel?: boolean;\n  tabIndex?: -1;\n}\n\nconst InternalCheckbox = React.forwardRef<CheckboxProps.Ref, InternalProps>(\n  (\n    {\n      controlId,\n      name,\n      checked,\n      disabled,\n      indeterminate,\n      children,\n      description,\n      ariaLabel,\n      onFocus,\n      onBlur,\n      onChange,\n      withoutLabel,\n      tabIndex,\n      __internalRootRef,\n      ...rest\n    },\n    ref\n  ) => {\n    const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);\n    const baseProps = getBaseProps(rest);\n    const checkboxRef = useRef<HTMLInputElement>(null);\n    useForwardFocus(ref, checkboxRef);\n    useEffect(() => {\n      if (checkboxRef.current) {\n        checkboxRef.current.indeterminate = Boolean(indeterminate);\n      }\n    });\n    return (\n      <AbstractSwitch\n        {...baseProps}\n        className={clsx(styles.root, baseProps.className)}\n        controlClassName={styles['checkbox-control']}\n        outlineClassName={styles.outline}\n        controlId={controlId}\n        disabled={disabled}\n        label={children}\n        description={description}\n        descriptionBottomPadding={true}\n        ariaLabel={ariaLabel}\n        ariaLabelledby={ariaLabelledby}\n        ariaDescribedby={ariaDescribedby}\n        nativeControl={nativeControlProps => (\n          <input\n            {...nativeControlProps}\n            ref={checkboxRef}\n            type=\"checkbox\"\n            checked={checked}\n            name={name}\n            tabIndex={tabIndex}\n            onFocus={onFocus && (() => fireNonCancelableEvent(onFocus))}\n            onBlur={onBlur && (() => fireNonCancelableEvent(onBlur))}\n            // empty handler to suppress React controllability warning\n            onChange={() => {}}\n            onClick={\n              // Using onClick because onChange does not fire in indeterminate state in Internet Explorer and Legacy Edge\n              // https://stackoverflow.com/questions/33523130/ie-does-not-fire-change-event-on-indeterminate-checkbox-when-you-click-on-it\n              onChange &&\n              (() =>\n                fireNonCancelableEvent(\n                  onChange,\n                  // for deterministic transitions \"indeterminate\" -> \"checked\" -> \"unchecked\"\n                  indeterminate ? { checked: true, indeterminate: false } : { checked: !checked, indeterminate: false }\n                ))\n            }\n          />\n        )}\n        styledControl={<CheckboxIcon checked={checked} indeterminate={indeterminate} disabled={disabled} />}\n        withoutLabel={withoutLabel}\n        __internalRootRef={__internalRootRef}\n      />\n    );\n  }\n);\n\nexport default InternalCheckbox;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}