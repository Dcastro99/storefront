{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport styles from './styles.css.js';\nimport clsx from 'clsx';\nvar splitOnFiltering = function (str, highlightText) {\n  // Filtering needs to be case insensitive\n  var filteringPattern = highlightText.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n  var regexp = new RegExp(filteringPattern, 'gi');\n  var noMatches = str.split(regexp);\n  var matches = str.match(regexp);\n  return {\n    noMatches: noMatches,\n    matches: matches\n  };\n};\nvar Highlight = function (_a) {\n  var str = _a.str;\n  return str ? React.createElement(\"span\", {\n    className: clsx(styles['filtering-match-highlight'])\n  }, str) : null;\n};\nexport default function HighlightMatch(_a) {\n  var str = _a.str,\n    highlightText = _a.highlightText;\n  if (!str || !highlightText) {\n    return React.createElement(React.Fragment, null, str);\n  }\n  if (str === highlightText) {\n    return React.createElement(Highlight, {\n      str: str\n    });\n  }\n  var _b = splitOnFiltering(str, highlightText),\n    noMatches = _b.noMatches,\n    matches = _b.matches;\n  var highlighted = [];\n  noMatches.forEach(function (noMatch, idx) {\n    highlighted.push(noMatch);\n    if (matches && idx < matches.length) {\n      highlighted.push(React.createElement(Highlight, {\n        key: idx,\n        str: matches[idx]\n      }));\n    }\n  });\n  return React.createElement(\"span\", null, highlighted);\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,IAAI,MAAM,MAAM;AAEvB,IAAMC,gBAAgB,GAAG,UAACC,GAAW,EAAEC,aAAqB;EAC1D;EACA,IAAMC,gBAAgB,GAAGD,aAAa,CAACE,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC;EAC/E,IAAMC,MAAM,GAAG,IAAIC,MAAM,CAACH,gBAAgB,EAAE,IAAI,CAAC;EACjD,IAAMI,SAAS,GAAGN,GAAG,CAACO,KAAK,CAACH,MAAM,CAAC;EACnC,IAAMI,OAAO,GAAGR,GAAG,CAACS,KAAK,CAACL,MAAM,CAAC;EAEjC,OAAO;IAAEE,SAAS;IAAEE,OAAO;EAAA,CAAE;AAC/B,CAAC;AAOD,IAAME,SAAS,GAAG,UAACC,EAA4B;MAA1BX,GAAG;EACtB,UAAG,GAAGJ;IAAMgB,SAAS,EAAEd,IAAI,CAACD,MAAM,CAAC,2BAA2B,CAAC;EAAC,GAAGG,GAAG,CAAQ,GAAG,IAAI;AAArF,CAAqF;AAEvF,eAAc,SAAUa,cAAc,CAACF,EAA2C;MAAzCX,GAAG;IAAEC,aAAa;EACzD,IAAI,CAACD,GAAG,IAAI,CAACC,aAAa,EAAE;IAC1B,OAAOL,0CAAGI,GAAG,CAAI;;EAGnB,IAAIA,GAAG,KAAKC,aAAa,EAAE;IACzB,OAAOL,oBAACc,SAAS;MAACV,GAAG,EAAEA;IAAG,EAAI;;EAG1B,SAAyBD,gBAAgB,CAACC,GAAG,EAAEC,aAAa,CAAC;IAA3DK,SAAS;IAAEE,OAAO,aAAyC;EAEnE,IAAMM,WAAW,GAA6B,EAAE;EAEhDR,SAAS,CAACS,OAAO,CAAC,UAACC,OAAO,EAAEC,GAAG;IAC7BH,WAAW,CAACI,IAAI,CAACF,OAAO,CAAC;IAEzB,IAAIR,OAAO,IAAIS,GAAG,GAAGT,OAAO,CAACW,MAAM,EAAE;MACnCL,WAAW,CAACI,IAAI,CAACtB,oBAACc,SAAS;QAACU,GAAG,EAAEH,GAAG;QAAEjB,GAAG,EAAEQ,OAAO,CAACS,GAAG;MAAC,EAAI,CAAC;;EAEhE,CAAC,CAAC;EAEF,OAAOrB,kCAAOkB,WAAW,CAAQ;AACnC","names":["React","styles","clsx","splitOnFiltering","str","highlightText","filteringPattern","replace","regexp","RegExp","noMatches","split","matches","match","Highlight","_a","className","HighlightMatch","highlighted","forEach","noMatch","idx","push","length","key"],"sources":["/Users/dcastro/node_modules/src/internal/components/option/highlight-match.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport styles from './styles.css.js';\nimport clsx from 'clsx';\n\nconst splitOnFiltering = (str: string, highlightText: string) => {\n  // Filtering needs to be case insensitive\n  const filteringPattern = highlightText.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n  const regexp = new RegExp(filteringPattern, 'gi');\n  const noMatches = str.split(regexp);\n  const matches = str.match(regexp);\n\n  return { noMatches, matches };\n};\n\nexport interface HighlightMatchProps {\n  str?: string;\n  highlightText?: string;\n}\n\nconst Highlight = ({ str }: HighlightMatchProps) =>\n  str ? <span className={clsx(styles['filtering-match-highlight'])}>{str}</span> : null;\n\nexport default function HighlightMatch({ str, highlightText }: HighlightMatchProps) {\n  if (!str || !highlightText) {\n    return <>{str}</>;\n  }\n\n  if (str === highlightText) {\n    return <Highlight str={str} />;\n  }\n\n  const { noMatches, matches } = splitOnFiltering(str, highlightText);\n\n  const highlighted: (string | JSX.Element)[] = [];\n\n  noMatches.forEach((noMatch, idx) => {\n    highlighted.push(noMatch);\n\n    if (matches && idx < matches.length) {\n      highlighted.push(<Highlight key={idx} str={matches[idx]} />);\n    }\n  });\n\n  return <span>{highlighted}</span>;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}