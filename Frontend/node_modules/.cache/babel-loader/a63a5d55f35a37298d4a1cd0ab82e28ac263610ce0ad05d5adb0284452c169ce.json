{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport OptionComponent from '../internal/components/option';\nimport SelectableItem from '../internal/components/selectable-item';\nimport { getBaseProps } from '../internal/base-component';\nimport { getTestOptionIndexes } from '../internal/components/options-list/utils/test-indexes';\nimport styles from './styles.css.js';\nvar AutosuggestOption = function (_a, ref) {\n  var _b = _a.nativeAttributes,\n    nativeAttributes = _b === void 0 ? {} : _b,\n    highlightText = _a.highlightText,\n    option = _a.option,\n    highlighted = _a.highlighted,\n    highlightType = _a.highlightType,\n    enteredTextLabel = _a.enteredTextLabel,\n    virtualPosition = _a.virtualPosition,\n    padBottom = _a.padBottom,\n    screenReaderContent = _a.screenReaderContent,\n    ariaSetsize = _a.ariaSetsize,\n    ariaPosinset = _a.ariaPosinset,\n    rest = __rest(_a, [\"nativeAttributes\", \"highlightText\", \"option\", \"highlighted\", \"highlightType\", \"enteredTextLabel\", \"virtualPosition\", \"padBottom\", \"screenReaderContent\", \"ariaSetsize\", \"ariaPosinset\"]);\n  var baseProps = getBaseProps(rest);\n  var useEntered = 'type' in option && option.type === 'use-entered';\n  var isParent = 'type' in option && option.type === 'parent';\n  var isChild = 'type' in option && option.type === 'child';\n  var _c = getTestOptionIndexes(option) || {},\n    throughIndex = _c.throughIndex,\n    inGroupIndex = _c.inGroupIndex,\n    groupIndex = _c.groupIndex;\n  var optionContent;\n  if (useEntered) {\n    optionContent = enteredTextLabel(option.value || '');\n  } else if (isParent) {\n    optionContent = option.label;\n  } else {\n    var a11yProperties = {};\n    if (nativeAttributes['aria-label']) {\n      a11yProperties['aria-label'] = nativeAttributes['aria-label'];\n    }\n    optionContent = React.createElement(\"div\", __assign({}, a11yProperties), React.createElement(OptionComponent, {\n      option: option,\n      highlightText: highlightText\n    }));\n  }\n  return React.createElement(SelectableItem, __assign({}, baseProps, {\n    className: styles.option,\n    ariaSelected: highlighted,\n    highlighted: highlighted,\n    disabled: option.disabled,\n    hasBackground: useEntered,\n    isParent: isParent,\n    isChild: isChild,\n    virtualPosition: virtualPosition,\n    \"data-test-index\": throughIndex,\n    \"data-in-group-index\": inGroupIndex,\n    \"data-group-index\": groupIndex,\n    ref: ref,\n    padBottom: padBottom,\n    screenReaderContent: screenReaderContent,\n    ariaSetsize: ariaSetsize,\n    ariaPosinset: ariaPosinset,\n    highlightType: highlightType\n  }), optionContent);\n};\nexport default React.memo(React.forwardRef(AutosuggestOption));","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,OAAOC,cAAc,MAAM,wCAAwC;AACnE,SAA6BC,YAAY,QAAQ,4BAA4B;AAC7E,SAASC,oBAAoB,QAAQ,wDAAwD;AAE7F,OAAOC,MAAM,MAAM,iBAAiB;AAkBpC,IAAMC,iBAAiB,GAAG,UACxBC,EAayB,EACzBC,GAA8B;EAb5B,4BAAqB;IAArBC,gBAAgB,mBAAG,EAAE;IACrBC,aAAa;IACbC,MAAM;IACNC,WAAW;IACXC,aAAa;IACbC,gBAAgB;IAChBC,eAAe;IACfC,SAAS;IACTC,mBAAmB;IACnBC,WAAW;IACXC,YAAY;IACTC,IAAI,cAZT,yLAaC,CADQ;EAIT,IAAMC,SAAS,GAAGlB,YAAY,CAACiB,IAAI,CAAC;EACpC,IAAME,UAAU,GAAG,MAAM,IAAIX,MAAM,IAAIA,MAAM,CAACY,IAAI,KAAK,aAAa;EACpE,IAAMC,QAAQ,GAAG,MAAM,IAAIb,MAAM,IAAIA,MAAM,CAACY,IAAI,KAAK,QAAQ;EAC7D,IAAME,OAAO,GAAG,MAAM,IAAId,MAAM,IAAIA,MAAM,CAACY,IAAI,KAAK,OAAO;EACrD,SAA6CnB,oBAAoB,CAACO,MAAM,CAAC,IAAI,EAAE;IAA7Ee,YAAY;IAAEC,YAAY;IAAEC,UAAU,gBAAuC;EAErF,IAAIC,aAAa;EACjB,IAAIP,UAAU,EAAE;IACdO,aAAa,GAAGf,gBAAgB,CAACH,MAAM,CAACmB,KAAK,IAAI,EAAE,CAAC;GACrD,MAAM,IAAIN,QAAQ,EAAE;IACnBK,aAAa,GAAGlB,MAAM,CAACoB,KAAK;GAC7B,MAAM;IACL,IAAMC,cAAc,GAA+C,EAAE;IACrE,IAAIvB,gBAAgB,CAAC,YAAY,CAAC,EAAE;MAClCuB,cAAc,CAAC,YAAY,CAAC,GAAGvB,gBAAgB,CAAC,YAAY,CAAC;;IAG/DoB,aAAa,GACX7B,wCAASgC,cAAc,GACrBhC,oBAACC,eAAe;MAACU,MAAM,EAAEA,MAAM;MAAED,aAAa,EAAEA;IAAa,EAAI,CAEpE;;EAGH,OACEV,oBAACE,cAAc,eACTmB,SAAS;IACbY,SAAS,EAAE5B,MAAM,CAACM,MAAM;IACxBuB,YAAY,EAAEtB,WAAW;IACzBA,WAAW,EAAEA,WAAW;IACxBuB,QAAQ,EAAExB,MAAM,CAACwB,QAAQ;IACzBC,aAAa,EAAEd,UAAU;IACzBE,QAAQ,EAAEA,QAAQ;IAClBC,OAAO,EAAEA,OAAO;IAChBV,eAAe,EAAEA,eAAe;IAAA,mBACfW,YAAY;IAAA,uBACRC,YAAY;IAAA,oBACfC,UAAU;IAC5BpB,GAAG,EAAEA,GAAG;IACRQ,SAAS,EAAEA,SAAS;IACpBC,mBAAmB,EAAEA,mBAAmB;IACxCC,WAAW,EAAEA,WAAW;IACxBC,YAAY,EAAEA,YAAY;IAC1BN,aAAa,EAAEA;EAAa,IAE3BgB,aAAa,CACC;AAErB,CAAC;AAED,eAAe7B,KAAK,CAACqC,IAAI,CAACrC,KAAK,CAACsC,UAAU,CAAChC,iBAAiB,CAAC,CAAC","names":["React","OptionComponent","SelectableItem","getBaseProps","getTestOptionIndexes","styles","AutosuggestOption","_a","ref","nativeAttributes","highlightText","option","highlighted","highlightType","enteredTextLabel","virtualPosition","padBottom","screenReaderContent","ariaSetsize","ariaPosinset","rest","baseProps","useEntered","type","isParent","isChild","throughIndex","inGroupIndex","groupIndex","optionContent","value","label","a11yProperties","className","ariaSelected","disabled","hasBackground","memo","forwardRef"],"sources":["/Users/dcastro/node_modules/src/autosuggest/autosuggest-option.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport OptionComponent from '../internal/components/option';\nimport SelectableItem from '../internal/components/selectable-item';\nimport { BaseComponentProps, getBaseProps } from '../internal/base-component';\nimport { getTestOptionIndexes } from '../internal/components/options-list/utils/test-indexes';\n\nimport styles from './styles.css.js';\nimport { AutosuggestItem } from './interfaces';\nimport { HighlightType } from '../internal/components/options-list/utils/use-highlight-option';\n\nexport interface AutosuggestOptionProps extends BaseComponentProps {\n  nativeAttributes?: Record<string, any>;\n  highlightText: string;\n  option: AutosuggestItem;\n  highlighted: boolean;\n  highlightType: HighlightType;\n  enteredTextLabel: (value: string) => string;\n  virtualPosition?: number;\n  padBottom?: boolean;\n  screenReaderContent?: string;\n  ariaSetsize?: number;\n  ariaPosinset?: number;\n}\n\nconst AutosuggestOption = (\n  {\n    nativeAttributes = {},\n    highlightText,\n    option,\n    highlighted,\n    highlightType,\n    enteredTextLabel,\n    virtualPosition,\n    padBottom,\n    screenReaderContent,\n    ariaSetsize,\n    ariaPosinset,\n    ...rest\n  }: AutosuggestOptionProps,\n  ref: React.Ref<HTMLDivElement>\n) => {\n  const baseProps = getBaseProps(rest);\n  const useEntered = 'type' in option && option.type === 'use-entered';\n  const isParent = 'type' in option && option.type === 'parent';\n  const isChild = 'type' in option && option.type === 'child';\n  const { throughIndex, inGroupIndex, groupIndex } = getTestOptionIndexes(option) || {};\n\n  let optionContent;\n  if (useEntered) {\n    optionContent = enteredTextLabel(option.value || '');\n  } else if (isParent) {\n    optionContent = option.label;\n  } else {\n    const a11yProperties: AutosuggestOptionProps['nativeAttributes'] = {};\n    if (nativeAttributes['aria-label']) {\n      a11yProperties['aria-label'] = nativeAttributes['aria-label'];\n    }\n\n    optionContent = (\n      <div {...a11yProperties}>\n        <OptionComponent option={option} highlightText={highlightText} />\n      </div>\n    );\n  }\n\n  return (\n    <SelectableItem\n      {...baseProps}\n      className={styles.option}\n      ariaSelected={highlighted}\n      highlighted={highlighted}\n      disabled={option.disabled}\n      hasBackground={useEntered}\n      isParent={isParent}\n      isChild={isChild}\n      virtualPosition={virtualPosition}\n      data-test-index={throughIndex}\n      data-in-group-index={inGroupIndex}\n      data-group-index={groupIndex}\n      ref={ref}\n      padBottom={padBottom}\n      screenReaderContent={screenReaderContent}\n      ariaSetsize={ariaSetsize}\n      ariaPosinset={ariaPosinset}\n      highlightType={highlightType}\n    >\n      {optionContent}\n    </SelectableItem>\n  );\n};\n\nexport default React.memo(React.forwardRef(AutosuggestOption));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}