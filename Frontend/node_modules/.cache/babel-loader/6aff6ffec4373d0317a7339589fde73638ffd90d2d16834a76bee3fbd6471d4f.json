{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { getBaseProps } from '../../base-component';\nimport { applyDisplayName } from '../../utils/apply-display-name';\nimport useFocusVisible from '../../hooks/focus-visible';\nimport InternalButtonDropdown from '../../../button-dropdown/internal';\nimport InternalIcon from '../../../icon/internal';\nimport buttonDropdownStyles from '../../../button-dropdown/styles.css.js';\nimport styles from './styles.css.js';\nexport var ButtonTrigger = React.forwardRef(function (_a, ref) {\n  var _b;\n  var iconName = _a.iconName,\n    iconUrl = _a.iconUrl,\n    iconAlt = _a.iconAlt,\n    iconSvg = _a.iconSvg,\n    badge = _a.badge,\n    ariaLabel = _a.ariaLabel,\n    offsetRight = _a.offsetRight,\n    disabled = _a.disabled,\n    expanded = _a.expanded,\n    children = _a.children,\n    onClick = _a.onClick;\n  var focusVisible = useFocusVisible();\n  var hasIcon = iconName || iconUrl || iconSvg;\n  return React.createElement(\"button\", __assign({}, focusVisible, {\n    ref: ref,\n    type: \"button\",\n    className: clsx(styles.button, styles[\"offset-right-\".concat(offsetRight)], (_b = {}, _b[styles.expanded] = expanded, _b)),\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": !!expanded,\n    \"aria-haspopup\": true,\n    disabled: disabled,\n    onClick: function (event) {\n      event.preventDefault();\n      onClick && onClick();\n    }\n  }), hasIcon && React.createElement(InternalIcon, {\n    className: styles.icon,\n    name: iconName,\n    url: iconUrl,\n    alt: iconAlt,\n    svg: iconSvg,\n    badge: badge\n  }), children && React.createElement(\"span\", {\n    className: styles.text\n  }, children), children && React.createElement(InternalIcon, {\n    name: \"caret-down-filled\",\n    className: expanded ? buttonDropdownStyles['rotate-up'] : buttonDropdownStyles['rotate-down']\n  }));\n});\nvar MenuDropdown = function (_a) {\n  var iconName = _a.iconName,\n    iconUrl = _a.iconUrl,\n    iconAlt = _a.iconAlt,\n    iconSvg = _a.iconSvg,\n    badge = _a.badge,\n    ariaLabel = _a.ariaLabel,\n    offsetRight = _a.offsetRight,\n    children = _a.children,\n    props = __rest(_a, [\"iconName\", \"iconUrl\", \"iconAlt\", \"iconSvg\", \"badge\", \"ariaLabel\", \"offsetRight\", \"children\"]);\n  var baseProps = getBaseProps(props);\n  var dropdownTrigger = function (clickHandler, ref, isDisabled, isExpanded) {\n    return React.createElement(ButtonTrigger, {\n      ref: ref,\n      disabled: isDisabled,\n      expanded: isExpanded,\n      iconName: iconName,\n      iconUrl: iconUrl,\n      iconAlt: iconAlt,\n      iconSvg: iconSvg,\n      badge: badge,\n      ariaLabel: ariaLabel,\n      offsetRight: offsetRight,\n      onClick: clickHandler\n    }, children);\n  };\n  return React.createElement(InternalButtonDropdown, __assign({}, baseProps, props, {\n    variant: \"navigation\",\n    customTriggerBuilder: dropdownTrigger,\n    preferCenter: true\n  }));\n};\napplyDisplayName(MenuDropdown, 'MenuDropdown');\nexport default MenuDropdown;","map":{"version":3,"mappings":"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","names":["clsx","React","getBaseProps","applyDisplayName","useFocusVisible","InternalButtonDropdown","InternalIcon","buttonDropdownStyles","styles","ButtonTrigger","forwardRef","_a","ref","iconName","iconUrl","iconAlt","iconSvg","badge","ariaLabel","offsetRight","disabled","expanded","children","onClick","focusVisible","hasIcon","type","className","button","_b","event","preventDefault","icon","name","url","alt","svg","text","MenuDropdown","props","baseProps","dropdownTrigger","clickHandler","isDisabled","isExpanded","variant","customTriggerBuilder","preferCenter"],"sources":["/Users/dcastro/node_modules/src/internal/components/menu-dropdown/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\n\nimport { MenuDropdownProps, ButtonTriggerProps } from './interfaces';\nimport { getBaseProps } from '../../base-component';\nimport { applyDisplayName } from '../../utils/apply-display-name';\nimport useFocusVisible from '../../hooks/focus-visible';\nimport InternalButtonDropdown from '../../../button-dropdown/internal';\nimport InternalIcon from '../../../icon/internal';\nimport buttonDropdownStyles from '../../../button-dropdown/styles.css.js';\nimport styles from './styles.css.js';\n\nexport { MenuDropdownProps };\n\nexport const ButtonTrigger = React.forwardRef(\n  (\n    {\n      iconName,\n      iconUrl,\n      iconAlt,\n      iconSvg,\n      badge,\n      ariaLabel,\n      offsetRight,\n      disabled,\n      expanded,\n      children,\n      onClick,\n    }: ButtonTriggerProps,\n    ref: React.Ref<any>\n  ) => {\n    const focusVisible = useFocusVisible();\n    const hasIcon = iconName || iconUrl || iconSvg;\n\n    return (\n      <button\n        {...focusVisible}\n        ref={ref}\n        type=\"button\"\n        className={clsx(styles.button, styles[`offset-right-${offsetRight}`], { [styles.expanded]: expanded })}\n        aria-label={ariaLabel}\n        aria-expanded={!!expanded}\n        aria-haspopup={true}\n        disabled={disabled}\n        onClick={event => {\n          event.preventDefault();\n          onClick && onClick();\n        }}\n      >\n        {hasIcon && (\n          <InternalIcon\n            className={styles.icon}\n            name={iconName}\n            url={iconUrl}\n            alt={iconAlt}\n            svg={iconSvg}\n            badge={badge}\n          />\n        )}\n        {children && <span className={styles.text}>{children}</span>}\n        {children && (\n          <InternalIcon\n            name=\"caret-down-filled\"\n            className={expanded ? buttonDropdownStyles['rotate-up'] : buttonDropdownStyles['rotate-down']}\n          />\n        )}\n      </button>\n    );\n  }\n);\n\nconst MenuDropdown = ({\n  iconName,\n  iconUrl,\n  iconAlt,\n  iconSvg,\n  badge,\n  ariaLabel,\n  offsetRight,\n  children,\n  ...props\n}: MenuDropdownProps) => {\n  const baseProps = getBaseProps(props);\n\n  const dropdownTrigger = (clickHandler: () => void, ref: React.Ref<any>, isDisabled: boolean, isExpanded: boolean) => {\n    return (\n      <ButtonTrigger\n        ref={ref}\n        disabled={isDisabled}\n        expanded={isExpanded}\n        iconName={iconName}\n        iconUrl={iconUrl}\n        iconAlt={iconAlt}\n        iconSvg={iconSvg}\n        badge={badge}\n        ariaLabel={ariaLabel}\n        offsetRight={offsetRight}\n        onClick={clickHandler}\n      >\n        {children}\n      </ButtonTrigger>\n    );\n  };\n\n  return (\n    <InternalButtonDropdown\n      {...baseProps}\n      {...props}\n      variant=\"navigation\"\n      customTriggerBuilder={dropdownTrigger}\n      preferCenter={true}\n    />\n  );\n};\n\napplyDisplayName(MenuDropdown, 'MenuDropdown');\nexport default MenuDropdown;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}