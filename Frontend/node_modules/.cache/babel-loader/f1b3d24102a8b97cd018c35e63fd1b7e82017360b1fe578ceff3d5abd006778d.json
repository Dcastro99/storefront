{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../../base-component';\nimport InternalIcon from '../../../icon/internal';\nimport styles from './styles.css.js';\nimport { fireKeyboardEvent, fireCancelableEvent } from '../../events';\nimport useFocusVisible from '../../hooks/focus-visible';\nvar ButtonTrigger = function (_a, ref) {\n  var children = _a.children,\n    _b = _a.pressed,\n    pressed = _b === void 0 ? false : _b,\n    _c = _a.hideCaret,\n    hideCaret = _c === void 0 ? false : _c,\n    _d = _a.disabled,\n    disabled = _d === void 0 ? false : _d,\n    _e = _a.readOnly,\n    readOnly = _e === void 0 ? false : _e,\n    _f = _a.invalid,\n    invalid = _f === void 0 ? false : _f,\n    inFilteringToken = _a.inFilteringToken,\n    ariaHasPopup = _a.ariaHasPopup,\n    ariaLabel = _a.ariaLabel,\n    ariaLabelledby = _a.ariaLabelledby,\n    ariaDescribedby = _a.ariaDescribedby,\n    onKeyDown = _a.onKeyDown,\n    onKeyUp = _a.onKeyUp,\n    onMouseDown = _a.onMouseDown,\n    onClick = _a.onClick,\n    onFocus = _a.onFocus,\n    onBlur = _a.onBlur,\n    restProps = __rest(_a, [\"children\", \"pressed\", \"hideCaret\", \"disabled\", \"readOnly\", \"invalid\", \"inFilteringToken\", \"ariaHasPopup\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescribedby\", \"onKeyDown\", \"onKeyUp\", \"onMouseDown\", \"onClick\", \"onFocus\", \"onBlur\"]);\n  var baseProps = getBaseProps(restProps);\n  var focusVisible = useFocusVisible();\n  var attributes = __assign(__assign(__assign({}, focusVisible), baseProps), {\n    type: 'button',\n    className: clsx(styles['button-trigger'], baseProps.className, pressed && styles.pressed, disabled && styles.disabled, invalid && styles.invalid, !hideCaret && styles['has-caret'], readOnly && styles['read-only'], inFilteringToken && styles['in-filtering-token']),\n    disabled: disabled || readOnly,\n    'aria-expanded': pressed,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-haspopup': ariaHasPopup !== null && ariaHasPopup !== void 0 ? ariaHasPopup : 'listbox',\n    onKeyDown: onKeyDown && function (event) {\n      return fireKeyboardEvent(onKeyDown, event);\n    },\n    onKeyUp: onKeyUp && function (event) {\n      return fireKeyboardEvent(onKeyUp, event);\n    },\n    onMouseDown: onMouseDown && function (event) {\n      return fireCancelableEvent(onMouseDown, {}, event);\n    },\n    onClick: onClick && function (event) {\n      return fireCancelableEvent(onClick, {}, event);\n    },\n    onFocus: onFocus && function (event) {\n      return fireCancelableEvent(onFocus, {}, event);\n    },\n    onBlur: onBlur && function (event) {\n      return fireCancelableEvent(onBlur, {\n        relatedTarget: event.relatedTarget\n      }, event);\n    }\n  });\n  if (invalid) {\n    attributes['aria-invalid'] = invalid;\n  }\n  return React.createElement(\"button\", __assign({\n    ref: ref\n  }, attributes), children, !hideCaret && React.createElement(\"span\", {\n    className: styles.arrow\n  }, React.createElement(InternalIcon, {\n    name: \"caret-down-filled\",\n    variant: disabled ? 'disabled' : 'normal'\n  })));\n};\nexport default React.forwardRef(ButtonTrigger);","map":{"version":3,"mappings":"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","names":["React","clsx","getBaseProps","InternalIcon","styles","fireKeyboardEvent","fireCancelableEvent","useFocusVisible","ButtonTrigger","_a","ref","_b","pressed","_c","hideCaret","_d","disabled","_e","readOnly","_f","invalid","inFilteringToken","ariaHasPopup","ariaLabel","ariaLabelledby","ariaDescribedby","onKeyDown","onKeyUp","onMouseDown","onClick","onFocus","onBlur","restProps","baseProps","focusVisible","attributes","type","className","event","relatedTarget","children","arrow","name","variant","forwardRef"],"sources":["/Users/dcastro/node_modules/src/internal/components/button-trigger/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { ButtonHTMLAttributes } from 'react';\nimport clsx from 'clsx';\nimport { BaseComponentProps, getBaseProps } from '../../base-component';\nimport InternalIcon from '../../../icon/internal';\nimport styles from './styles.css.js';\nimport { fireKeyboardEvent, fireCancelableEvent, CancelableEventHandler, BaseKeyDetail } from '../../events';\nimport useFocusVisible from '../../hooks/focus-visible';\n\nexport interface ButtonTriggerProps extends BaseComponentProps {\n  children?: React.ReactNode;\n  pressed?: boolean;\n  hideCaret?: boolean;\n  disabled?: boolean;\n  readOnly?: boolean;\n  invalid?: boolean;\n  inFilteringToken?: boolean;\n  ariaHasPopup?: 'true' | 'listbox';\n  ariaLabel?: string;\n  ariaLabelledby?: string;\n  ariaDescribedby?: string;\n  onKeyDown?: CancelableEventHandler<BaseKeyDetail>;\n  onKeyUp?: CancelableEventHandler<BaseKeyDetail>;\n  onMouseDown?: CancelableEventHandler;\n  onClick?: CancelableEventHandler;\n  onFocus?: CancelableEventHandler;\n  onBlur?: CancelableEventHandler<{ relatedTarget: Node | null }>;\n}\n\nconst ButtonTrigger = (\n  {\n    children,\n    pressed = false,\n    hideCaret = false,\n    disabled = false,\n    readOnly = false,\n    invalid = false,\n    inFilteringToken,\n    ariaHasPopup,\n    ariaLabel,\n    ariaLabelledby,\n    ariaDescribedby,\n    onKeyDown,\n    onKeyUp,\n    onMouseDown,\n    onClick,\n    onFocus,\n    onBlur,\n    ...restProps\n  }: ButtonTriggerProps,\n  ref: React.Ref<HTMLButtonElement>\n) => {\n  const baseProps = getBaseProps(restProps);\n  const focusVisible = useFocusVisible();\n\n  const attributes: ButtonHTMLAttributes<HTMLButtonElement> = {\n    ...focusVisible,\n    ...baseProps,\n    type: 'button',\n    className: clsx(\n      styles['button-trigger'],\n      baseProps.className,\n      pressed && styles.pressed,\n      disabled && styles.disabled,\n      invalid && styles.invalid,\n      !hideCaret && styles['has-caret'],\n      readOnly && styles['read-only'],\n      inFilteringToken && styles['in-filtering-token']\n    ),\n    disabled: disabled || readOnly,\n    'aria-expanded': pressed,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-haspopup': ariaHasPopup ?? 'listbox',\n    onKeyDown: onKeyDown && (event => fireKeyboardEvent(onKeyDown, event)),\n    onKeyUp: onKeyUp && (event => fireKeyboardEvent(onKeyUp, event)),\n    onMouseDown: onMouseDown && (event => fireCancelableEvent(onMouseDown, {}, event)),\n    onClick: onClick && (event => fireCancelableEvent(onClick, {}, event)),\n    onFocus: onFocus && (event => fireCancelableEvent(onFocus, {}, event)),\n    onBlur: onBlur && (event => fireCancelableEvent(onBlur, { relatedTarget: event.relatedTarget }, event)),\n  };\n\n  if (invalid) {\n    attributes['aria-invalid'] = invalid;\n  }\n\n  return (\n    <button ref={ref} {...attributes}>\n      {children}\n      {!hideCaret && (\n        <span className={styles.arrow}>\n          <InternalIcon name=\"caret-down-filled\" variant={disabled ? 'disabled' : 'normal'} />\n        </span>\n      )}\n    </button>\n  );\n};\n\nexport namespace ButtonTriggerProps {\n  export interface Ref {\n    focus(): void;\n  }\n}\n\nexport default React.forwardRef(ButtonTrigger);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}