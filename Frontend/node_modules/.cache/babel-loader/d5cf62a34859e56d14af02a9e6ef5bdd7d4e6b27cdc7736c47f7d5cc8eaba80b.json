{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport React, { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport OptionsList from '../../internal/components/options-list';\nimport { renderOptions } from '../utils/render-options';\nimport { useVirtual } from 'react-virtual';\nimport { useContainerQuery } from '../../internal/hooks/container-queries';\nimport styles from './styles.css.js';\nvar VirtualList = function (props, ref) {\n  return props.menuProps.open ? React.createElement(VirtualListOpen, __assign({}, props, {\n    ref: ref\n  })) : React.createElement(VirtualListClosed, __assign({}, props, {\n    ref: ref\n  }));\n};\nvar VirtualListOpen = forwardRef(function (_a, ref) {\n  var menuProps = _a.menuProps,\n    getOptionProps = _a.getOptionProps,\n    filteredOptions = _a.filteredOptions,\n    filteringValue = _a.filteringValue,\n    highlightType = _a.highlightType,\n    checkboxes = _a.checkboxes,\n    hasDropdownStatus = _a.hasDropdownStatus,\n    listBottom = _a.listBottom,\n    useInteractiveGroups = _a.useInteractiveGroups,\n    screenReaderContent = _a.screenReaderContent;\n  // update component, when it gets wider or narrower to reposition items\n  var _b = useContainerQuery(function (rect) {\n      return rect.width;\n    }, []),\n    width = _b[0],\n    menuMeasureRef = _b[1];\n  var menuRefObject = useRef(null);\n  var menuRef = useMergeRefs(menuMeasureRef, menuRefObject, menuProps.ref);\n  var _c = useVirtual({\n      size: filteredOptions.length,\n      parentRef: menuRefObject,\n      // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n      // when the height of any option could have changed:\n      // 1: because the component got resized (width property got updated)\n      // 2: because the option changed its content (filteringValue property controls the highlight and the visibility of hidden tags)\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      estimateSize: useCallback(function () {\n        return 31;\n      }, [width, filteringValue]),\n      overscan: 5\n    }),\n    virtualItems = _c.virtualItems,\n    totalSize = _c.totalSize,\n    scrollToIndex = _c.scrollToIndex;\n  useImperativeHandle(ref, function () {\n    return function (index) {\n      if (highlightType === 'keyboard') {\n        scrollToIndex(index);\n      }\n    };\n  }, [highlightType, scrollToIndex]);\n  var finalOptions = renderOptions({\n    options: virtualItems.map(function (_a) {\n      var index = _a.index;\n      return filteredOptions[index];\n    }),\n    getOptionProps: getOptionProps,\n    filteringValue: filteringValue,\n    highlightType: highlightType,\n    checkboxes: checkboxes,\n    hasDropdownStatus: hasDropdownStatus,\n    virtualItems: virtualItems,\n    useInteractiveGroups: useInteractiveGroups,\n    screenReaderContent: screenReaderContent,\n    ariaSetsize: filteredOptions.length\n  });\n  return React.createElement(OptionsList, __assign({}, menuProps, {\n    ref: menuRef\n  }), React.createElement(\"div\", {\n    \"aria-hidden\": \"true\",\n    key: \"total-size\",\n    className: styles['layout-strut'],\n    style: {\n      height: totalSize\n    }\n  }), finalOptions, listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n});\nvar VirtualListClosed = forwardRef(function (_a, ref) {\n  var menuProps = _a.menuProps,\n    listBottom = _a.listBottom;\n  useImperativeHandle(ref, function () {\n    return function () {};\n  }, []);\n  return React.createElement(OptionsList, __assign({}, menuProps, {\n    ref: menuProps.ref\n  }), listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n});\nexport default forwardRef(VirtualList);","map":{"version":3,"mappings":"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","names":["useMergeRefs","React","forwardRef","useCallback","useImperativeHandle","useRef","OptionsList","renderOptions","useVirtual","useContainerQuery","styles","VirtualList","props","ref","menuProps","open","VirtualListOpen","VirtualListClosed","_a","getOptionProps","filteredOptions","filteringValue","highlightType","checkboxes","hasDropdownStatus","listBottom","useInteractiveGroups","screenReaderContent","width","menuMeasureRef","menuRefObject","menuRef","size","length","parentRef","estimateSize","overscan","virtualItems","totalSize","scrollToIndex","index","finalOptions","options","map","ariaSetsize","key","className","style","height","role"],"sources":["/Users/dcastro/node_modules/src/select/parts/virtual-list.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport React, { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport OptionsList from '../../internal/components/options-list';\nimport { renderOptions } from '../utils/render-options';\nimport { useVirtual } from 'react-virtual';\nimport { SelectListProps } from './plain-list';\nimport { useContainerQuery } from '../../internal/hooks/container-queries';\n\nimport styles from './styles.css.js';\n\nconst VirtualList = (props: SelectListProps, ref: React.Ref<SelectListProps.SelectListRef>) => {\n  return props.menuProps.open ? <VirtualListOpen {...props} ref={ref} /> : <VirtualListClosed {...props} ref={ref} />;\n};\n\nconst VirtualListOpen = forwardRef(\n  (\n    {\n      menuProps,\n      getOptionProps,\n      filteredOptions,\n      filteringValue,\n      highlightType,\n      checkboxes,\n      hasDropdownStatus,\n      listBottom,\n      useInteractiveGroups,\n      screenReaderContent,\n    }: SelectListProps,\n    ref: React.Ref<SelectListProps.SelectListRef>\n  ) => {\n    // update component, when it gets wider or narrower to reposition items\n    const [width, menuMeasureRef] = useContainerQuery(rect => rect.width, []);\n    const menuRefObject = useRef(null);\n    const menuRef = useMergeRefs(menuMeasureRef, menuRefObject, menuProps.ref);\n\n    const { virtualItems, totalSize, scrollToIndex } = useVirtual({\n      size: filteredOptions.length,\n      parentRef: menuRefObject,\n      // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n      // when the height of any option could have changed:\n      // 1: because the component got resized (width property got updated)\n      // 2: because the option changed its content (filteringValue property controls the highlight and the visibility of hidden tags)\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      estimateSize: useCallback(() => 31, [width, filteringValue]),\n      overscan: 5,\n    });\n    useImperativeHandle(\n      ref,\n      () => (index: number) => {\n        if (highlightType === 'keyboard') {\n          scrollToIndex(index);\n        }\n      },\n      [highlightType, scrollToIndex]\n    );\n    const finalOptions = renderOptions({\n      options: virtualItems.map(({ index }) => filteredOptions[index]),\n      getOptionProps,\n      filteringValue,\n      highlightType,\n      checkboxes,\n      hasDropdownStatus,\n      virtualItems,\n      useInteractiveGroups,\n      screenReaderContent,\n      ariaSetsize: filteredOptions.length,\n    });\n    return (\n      <OptionsList {...menuProps} ref={menuRef}>\n        <div aria-hidden=\"true\" key=\"total-size\" className={styles['layout-strut']} style={{ height: totalSize }} />\n        {finalOptions}\n        {listBottom ? (\n          <li role=\"option\" className={styles['list-bottom']}>\n            {listBottom}\n          </li>\n        ) : null}\n      </OptionsList>\n    );\n  }\n);\n\nconst VirtualListClosed = forwardRef(\n  ({ menuProps, listBottom }: SelectListProps, ref: React.Ref<SelectListProps.SelectListRef>) => {\n    useImperativeHandle(ref, () => () => {}, []);\n    return (\n      <OptionsList {...menuProps} ref={menuProps.ref}>\n        {listBottom ? (\n          <li role=\"option\" className={styles['list-bottom']}>\n            {listBottom}\n          </li>\n        ) : null}\n      </OptionsList>\n    );\n  }\n);\n\nexport default forwardRef(VirtualList);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}