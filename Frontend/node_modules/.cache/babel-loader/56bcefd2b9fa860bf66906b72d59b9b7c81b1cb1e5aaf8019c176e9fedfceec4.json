{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport InternalLink from '../../../link/internal';\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport { fireNonCancelableEvent, fireCancelableEvent } from '../../events';\nimport { usePrevious } from '../../hooks/use-previous';\nimport styles from './styles.css.js';\nfunction DropdownStatus(_a) {\n  var children = _a.children;\n  return React.createElement(\"div\", {\n    className: styles.root,\n    \"aria-live\": \"polite\"\n  }, children);\n}\nexport var useDropdownStatus = function (_a) {\n  var statusType = _a.statusType,\n    empty = _a.empty,\n    loadingText = _a.loadingText,\n    finishedText = _a.finishedText,\n    errorText = _a.errorText,\n    recoveryText = _a.recoveryText,\n    isEmpty = _a.isEmpty,\n    isNoMatch = _a.isNoMatch,\n    noMatch = _a.noMatch,\n    onRecoveryClick = _a.onRecoveryClick,\n    recoveryProps = _a.recoveryProps;\n  var linkRef = useRef(null);\n  var focusRecoveryLink = function () {\n    var _a;\n    return (_a = linkRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  };\n  var previousStatusType = usePrevious(statusType);\n  var statusResult = {\n    isSticky: true,\n    content: null,\n    focusRecoveryLink: focusRecoveryLink\n  };\n  if (statusType === 'loading') {\n    statusResult.content = React.createElement(InternalStatusIndicator, {\n      type: 'loading'\n    }, loadingText);\n  } else if (statusType === 'error') {\n    statusResult.content = React.createElement(\"span\", {\n      ref: recoveryProps ? recoveryProps.ref : null,\n      onBlur: function (event) {\n        return fireCancelableEvent(recoveryProps === null || recoveryProps === void 0 ? void 0 : recoveryProps.onBlur, {\n          relatedTarget: event.relatedTarget\n        }, event);\n      }\n    }, React.createElement(InternalStatusIndicator, {\n      type: \"error\",\n      __animate: previousStatusType !== 'error'\n    }, errorText), ' ', recoveryText && React.createElement(InternalLink, __assign({}, recoveryProps, {\n      ref: linkRef,\n      onFollow: function () {\n        return fireNonCancelableEvent(onRecoveryClick);\n      },\n      variant: \"recovery\",\n      className: styles.recovery\n    }), recoveryText));\n  } else if (isEmpty && empty) {\n    statusResult.content = empty;\n  } else if (isNoMatch && noMatch) {\n    statusResult.content = noMatch;\n  } else if (statusType === 'finished' && finishedText) {\n    statusResult.content = finishedText;\n    statusResult.isSticky = false;\n  }\n  return statusResult;\n};\nexport default DropdownStatus;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AAErC,OAAOC,YAAY,MAAM,wBAAwB;AAGjD,OAAOC,uBAAuB,MAAM,oCAAoC;AACxE,SAAoCC,sBAAsB,EAAEC,mBAAmB,QAAQ,cAAc;AACrG,SAASC,WAAW,QAAQ,0BAA0B;AAGtD,OAAOC,MAAM,MAAM,iBAAiB;AAkBpC,SAASC,cAAc,CAACC,EAA2C;MAAzCC,QAAQ;EAChC,OACEV;IAAKW,SAAS,EAAEJ,MAAM,CAACK,IAAI;IAAA,aAAY;EAAQ,GAC5CF,QAAQ,CACL;AAEV;AAsBA,OAAO,IAAMG,iBAAiB,GAAsB,UAACJ,EAYpD;MAXCK,UAAU;IACVC,KAAK;IACLC,WAAW;IACXC,YAAY;IACZC,SAAS;IACTC,YAAY;IACZC,OAAO;IACPC,SAAS;IACTC,OAAO;IACPC,eAAe;IACfC,aAAa;EAEb,IAAMC,OAAO,GAAGxB,MAAM,CAAuB,IAAI,CAAC;EAClD,IAAMyB,iBAAiB,GAAG;IAAA;IAAM,oBAAO,CAACC,OAAO,0CAAEC,KAAK,EAAE;EAAA;EACxD,IAAMC,kBAAkB,GAAGvB,WAAW,CAACQ,UAAU,CAAC;EAClD,IAAMgB,YAAY,GAAyB;IAAEC,QAAQ,EAAE,IAAI;IAAEC,OAAO,EAAE,IAAI;IAAEN,iBAAiB;EAAA,CAAE;EAE/F,IAAIZ,UAAU,KAAK,SAAS,EAAE;IAC5BgB,YAAY,CAACE,OAAO,GAAGhC,oBAACG,uBAAuB;MAAC8B,IAAI,EAAE;IAAS,GAAGjB,WAAW,CAA2B;GACzG,MAAM,IAAIF,UAAU,KAAK,OAAO,EAAE;IACjCgB,YAAY,CAACE,OAAO,GAClBhC;MACEkC,GAAG,EAAEV,aAAa,GAAGA,aAAa,CAACU,GAAG,GAAG,IAAI;MAC7CC,MAAM,EAAE,eAAK;QAAI,0BAAmB,CAACX,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEW,MAAM,EAAE;UAAEC,aAAa,EAAEC,KAAK,CAACD;QAAa,CAAE,EAAEC,KAAK,CAAC;MAAzF;IAAyF,GAE1GrC,oBAACG,uBAAuB;MAAC8B,IAAI,EAAC,OAAO;MAACK,SAAS,EAAET,kBAAkB,KAAK;IAAO,GAC5EX,SAAS,CACc,EAAC,GAAG,EAC7BC,YAAY,IACXnB,oBAACE,YAAY,eACPsB,aAAa;MACjBU,GAAG,EAAET,OAAO;MACZc,QAAQ,EAAE;QAAM,6BAAsB,CAAChB,eAAe,CAAC;MAAvC,CAAuC;MACvDiB,OAAO,EAAC,UAAU;MAClB7B,SAAS,EAAEJ,MAAM,CAACkC;IAAQ,IAEzBtB,YAAY,CAEhB,CAEJ;GACF,MAAM,IAAIC,OAAO,IAAIL,KAAK,EAAE;IAC3Be,YAAY,CAACE,OAAO,GAAGjB,KAAK;GAC7B,MAAM,IAAIM,SAAS,IAAIC,OAAO,EAAE;IAC/BQ,YAAY,CAACE,OAAO,GAAGV,OAAO;GAC/B,MAAM,IAAIR,UAAU,KAAK,UAAU,IAAIG,YAAY,EAAE;IACpDa,YAAY,CAACE,OAAO,GAAGf,YAAY;IACnCa,YAAY,CAACC,QAAQ,GAAG,KAAK;;EAG/B,OAAOD,YAAY;AACrB,CAAC;AAED,eAAetB,cAAc","names":["React","useRef","InternalLink","InternalStatusIndicator","fireNonCancelableEvent","fireCancelableEvent","usePrevious","styles","DropdownStatus","_a","children","className","root","useDropdownStatus","statusType","empty","loadingText","finishedText","errorText","recoveryText","isEmpty","isNoMatch","noMatch","onRecoveryClick","recoveryProps","linkRef","focusRecoveryLink","current","focus","previousStatusType","statusResult","isSticky","content","type","ref","onBlur","relatedTarget","event","__animate","onFollow","variant","recovery"],"sources":["/Users/dcastro/node_modules/src/internal/components/dropdown-status/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport { LinkProps } from '../../../link/interfaces';\nimport InternalLink from '../../../link/internal';\nimport { RecoveryLinkProp } from '../../../select/utils/use-select';\n\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport { NonCancelableEventHandler, fireNonCancelableEvent, fireCancelableEvent } from '../../events';\nimport { usePrevious } from '../../hooks/use-previous';\n\nimport { DropdownStatusProps } from './interfaces';\nimport styles from './styles.css.js';\n\nexport { DropdownStatusProps };\n\nexport interface DropdownStatusPropsExtended extends DropdownStatusProps {\n  isEmpty?: boolean;\n  isNoMatch?: boolean;\n  noMatch?: React.ReactNode;\n  /**\n   * Called when the user clicks the recovery button placed at the\n   * bottom of the dropdown list in the error state. Use this to\n   * retry a failed request or provide another option for the user\n   * to recover from the error.\n   */\n  onRecoveryClick?: NonCancelableEventHandler;\n  recoveryProps?: RecoveryLinkProp;\n}\n\nfunction DropdownStatus({ children }: { children: React.ReactNode }) {\n  return (\n    <div className={styles.root} aria-live=\"polite\">\n      {children}\n    </div>\n  );\n}\n\ntype UseDropdownStatus = ({\n  statusType,\n  empty,\n  loadingText,\n  finishedText,\n  errorText,\n  recoveryText,\n  isEmpty,\n  isNoMatch,\n  noMatch,\n  onRecoveryClick,\n  recoveryProps,\n}: DropdownStatusPropsExtended) => DropdownStatusResult;\n\ninterface DropdownStatusResult {\n  isSticky: boolean;\n  content: React.ReactNode | null;\n  focusRecoveryLink: () => void;\n}\n\nexport const useDropdownStatus: UseDropdownStatus = ({\n  statusType,\n  empty,\n  loadingText,\n  finishedText,\n  errorText,\n  recoveryText,\n  isEmpty,\n  isNoMatch,\n  noMatch,\n  onRecoveryClick,\n  recoveryProps,\n}) => {\n  const linkRef = useRef<LinkProps.Ref | null>(null);\n  const focusRecoveryLink = () => linkRef.current?.focus();\n  const previousStatusType = usePrevious(statusType);\n  const statusResult: DropdownStatusResult = { isSticky: true, content: null, focusRecoveryLink };\n\n  if (statusType === 'loading') {\n    statusResult.content = <InternalStatusIndicator type={'loading'}>{loadingText}</InternalStatusIndicator>;\n  } else if (statusType === 'error') {\n    statusResult.content = (\n      <span\n        ref={recoveryProps ? recoveryProps.ref : null}\n        onBlur={event => fireCancelableEvent(recoveryProps?.onBlur, { relatedTarget: event.relatedTarget }, event)}\n      >\n        <InternalStatusIndicator type=\"error\" __animate={previousStatusType !== 'error'}>\n          {errorText}\n        </InternalStatusIndicator>{' '}\n        {recoveryText && (\n          <InternalLink\n            {...recoveryProps}\n            ref={linkRef}\n            onFollow={() => fireNonCancelableEvent(onRecoveryClick)}\n            variant=\"recovery\"\n            className={styles.recovery}\n          >\n            {recoveryText}\n          </InternalLink>\n        )}\n      </span>\n    );\n  } else if (isEmpty && empty) {\n    statusResult.content = empty;\n  } else if (isNoMatch && noMatch) {\n    statusResult.content = noMatch;\n  } else if (statusType === 'finished' && finishedText) {\n    statusResult.content = finishedText;\n    statusResult.isSticky = false;\n  }\n\n  return statusResult;\n};\n\nexport default DropdownStatus;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}