{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useRef } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport styles from './styles.css.js';\nimport { ExpandableSectionContainer } from './expandable-section-container';\nimport { ExpandableSectionHeader } from './expandable-section-header';\nexport default function InternalExpandableSection(_a) {\n  var controlledExpanded = _a.expanded,\n    defaultExpanded = _a.defaultExpanded,\n    onChange = _a.onChange,\n    _b = _a.variant,\n    variant = _b === void 0 ? 'default' : _b,\n    children = _a.children,\n    header = _a.header,\n    disableContentPaddings = _a.disableContentPaddings,\n    headerAriaLabel = _a.headerAriaLabel,\n    __internalRootRef = _a.__internalRootRef,\n    props = __rest(_a, [\"expanded\", \"defaultExpanded\", \"onChange\", \"variant\", \"children\", \"header\", \"disableContentPaddings\", \"headerAriaLabel\", \"__internalRootRef\"]);\n  var ref = useRef(null);\n  var controlId = useUniqueId();\n  var triggerControlId = \"\".concat(controlId, \"-trigger\");\n  var baseProps = getBaseProps(props);\n  var _c = useControllable(controlledExpanded, onChange, defaultExpanded, {\n      componentName: 'ExpandableSection',\n      controlledProp: 'expanded',\n      changeHandler: 'onChange'\n    }),\n    expanded = _c[0],\n    setExpanded = _c[1];\n  var onExpandChange = useCallback(function (expanded) {\n    setExpanded(expanded);\n    fireNonCancelableEvent(onChange, {\n      expanded: expanded\n    });\n  }, [onChange, setExpanded]);\n  var onClick = useCallback(function () {\n    onExpandChange(!expanded);\n  }, [onExpandChange, expanded]);\n  var onKeyUp = useCallback(function (event) {\n    var interactionKeys = [KeyCode.enter, KeyCode.space];\n    if (interactionKeys.indexOf(event.keyCode) !== -1) {\n      onExpandChange(!expanded);\n    }\n  }, [onExpandChange, expanded]);\n  var onKeyDown = useCallback(function (event) {\n    if (event.keyCode === KeyCode.space) {\n      // Prevent the page from scrolling when toggling the component with the space bar.\n      event.preventDefault();\n    }\n  }, []);\n  var triggerProps = {\n    ariaControls: controlId,\n    ariaLabel: headerAriaLabel,\n    ariaLabelledBy: headerAriaLabel ? undefined : triggerControlId,\n    onKeyUp: onKeyUp,\n    onKeyDown: onKeyDown,\n    onClick: onClick\n  };\n  return React.createElement(ExpandableSectionContainer, __assign({}, baseProps, {\n    expanded: expanded,\n    className: clsx(baseProps.className, styles.root),\n    variant: variant,\n    disableContentPaddings: disableContentPaddings,\n    header: React.createElement(ExpandableSectionHeader, __assign({\n      id: triggerControlId,\n      className: clsx(styles.header, styles[\"header-\".concat(variant)]),\n      variant: variant,\n      expanded: !!expanded\n    }, triggerProps), header),\n    __internalRootRef: __internalRootRef\n  }), React.createElement(CSSTransition, {\n    \"in\": expanded,\n    timeout: 30,\n    classNames: {\n      enter: styles['content-enter']\n    },\n    nodeRef: ref\n  }, React.createElement(\"div\", {\n    id: controlId,\n    ref: ref,\n    className: clsx(styles.content, styles[\"content-\".concat(variant)], expanded && styles['content-expanded']),\n    role: \"group\",\n    \"aria-label\": triggerProps.ariaLabel,\n    \"aria-labelledby\": triggerProps.ariaLabelledBy\n  }, children)));\n}","map":{"version":3,"mappings":"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","names":["React","useCallback","useRef","CSSTransition","clsx","getBaseProps","useControllable","useUniqueId","KeyCode","fireNonCancelableEvent","styles","ExpandableSectionContainer","ExpandableSectionHeader","InternalExpandableSection","_a","controlledExpanded","defaultExpanded","onChange","_b","variant","children","header","disableContentPaddings","headerAriaLabel","__internalRootRef","props","ref","controlId","triggerControlId","baseProps","componentName","controlledProp","changeHandler","expanded","setExpanded","onExpandChange","onClick","onKeyUp","event","interactionKeys","enter","space","indexOf","keyCode","onKeyDown","preventDefault","triggerProps","ariaControls","ariaLabel","ariaLabelledBy","undefined","className","root","id","timeout","classNames","nodeRef","content","role"],"sources":["/Users/dcastro/node_modules/src/expandable-section/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { KeyboardEvent, useCallback, useRef } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport clsx from 'clsx';\n\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\n\nimport { ExpandableSectionProps } from './interfaces';\n\nimport styles from './styles.css.js';\nimport { ExpandableSectionContainer } from './expandable-section-container';\nimport { ExpandableSectionHeader } from './expandable-section-header';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\n\ntype InternalExpandableSectionProps = ExpandableSectionProps & InternalBaseComponentProps;\n\nexport default function InternalExpandableSection({\n  expanded: controlledExpanded,\n  defaultExpanded,\n  onChange,\n  variant = 'default',\n  children,\n  header,\n  disableContentPaddings,\n  headerAriaLabel,\n  __internalRootRef,\n  ...props\n}: InternalExpandableSectionProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const controlId = useUniqueId();\n  const triggerControlId = `${controlId}-trigger`;\n\n  const baseProps = getBaseProps(props);\n  const [expanded, setExpanded] = useControllable(controlledExpanded, onChange, defaultExpanded, {\n    componentName: 'ExpandableSection',\n    controlledProp: 'expanded',\n    changeHandler: 'onChange',\n  });\n\n  const onExpandChange = useCallback(\n    (expanded: boolean) => {\n      setExpanded(expanded);\n      fireNonCancelableEvent(onChange, { expanded });\n    },\n    [onChange, setExpanded]\n  );\n\n  const onClick = useCallback(() => {\n    onExpandChange(!expanded);\n  }, [onExpandChange, expanded]);\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent<Element>) => {\n      const interactionKeys = [KeyCode.enter, KeyCode.space];\n\n      if (interactionKeys.indexOf(event.keyCode) !== -1) {\n        onExpandChange(!expanded);\n      }\n    },\n    [onExpandChange, expanded]\n  );\n\n  const onKeyDown = useCallback((event: KeyboardEvent<Element>) => {\n    if (event.keyCode === KeyCode.space) {\n      // Prevent the page from scrolling when toggling the component with the space bar.\n      event.preventDefault();\n    }\n  }, []);\n\n  const triggerProps = {\n    ariaControls: controlId,\n    ariaLabel: headerAriaLabel,\n    ariaLabelledBy: headerAriaLabel ? undefined : triggerControlId,\n    onKeyUp,\n    onKeyDown,\n    onClick,\n  };\n\n  return (\n    <ExpandableSectionContainer\n      {...baseProps}\n      expanded={expanded}\n      className={clsx(baseProps.className, styles.root)}\n      variant={variant}\n      disableContentPaddings={disableContentPaddings}\n      header={\n        <ExpandableSectionHeader\n          id={triggerControlId}\n          className={clsx(styles.header, styles[`header-${variant}`])}\n          variant={variant}\n          expanded={!!expanded}\n          {...triggerProps}\n        >\n          {header}\n        </ExpandableSectionHeader>\n      }\n      __internalRootRef={__internalRootRef}\n    >\n      <CSSTransition in={expanded} timeout={30} classNames={{ enter: styles['content-enter'] }} nodeRef={ref}>\n        <div\n          id={controlId}\n          ref={ref}\n          className={clsx(styles.content, styles[`content-${variant}`], expanded && styles['content-expanded'])}\n          role=\"group\"\n          aria-label={triggerProps.ariaLabel}\n          aria-labelledby={triggerProps.ariaLabelledBy}\n        >\n          {children}\n        </div>\n      </CSSTransition>\n    </ExpandableSectionContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}