{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef, useState, useCallback } from 'react';\nimport { useResizeObserver } from './use-resize-observer';\n/**\n * Attaches resize-observer to the referenced element and keeps last observation in state.\n * The hook allows to limit the amount of re-renders to only when the observed value changes.\n *\n * Examples:\n *    // Switching display mode under a given condition (only re-renders when mode changes):\n *    const [smallMode, ref] = useContainerQuery(entry => entry.contentBoxHeight <= smallModeHeight, [smallModeHeight]);\n *\n *    // Obtain observer entity (re-renders with each observation):\n *    const [entry, ref] = useContainerQuery(entry => entry);\n *\n *    // Using prevState to avoid unnecessary re-renders:\n *    const [value, ref] = useContainerQuery((entry, prevValue) => shouldUpdate(entry) ? getValue(entry) : prevValue);\n *\n * @param mapFn Function to convert ContainerQueryEntry to a custom type S\n * @param deps Dependency list to indicate when the mapFn changes\n * @returns A tuple of observation value and a reference to be attached to the target element.\n */\nexport function useContainerQuery(mapFn, deps) {\n  if (deps === void 0) {\n    deps = [];\n  }\n  var elementRef = useRef(null);\n  var _a = useState(null),\n    state = _a[0],\n    setState = _a[1];\n  // Update getElement when deps change to trigger new observation.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  var getElement = useCallback(function () {\n    return elementRef.current;\n  }, deps);\n  useResizeObserver(getElement, function (entry) {\n    return setState(function (prevState) {\n      return mapFn(entry, prevState);\n    });\n  });\n  return [state, elementRef];\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAAgBA,MAAM,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE5D,SAASC,iBAAiB,QAAQ,uBAAuB;AAEzD;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUC,iBAAiB,CAC/BC,KAAwD,EACxDC,IAA+B;EAA/B;IAAAA,SAA+B;EAAA;EAE/B,IAAMC,UAAU,GAAGP,MAAM,CAAc,IAAI,CAAC;EACtC,SAAoBC,QAAQ,CAAW,IAAI,CAAC;IAA3CO,KAAK;IAAEC,QAAQ,QAA4B;EAElD;EACA;EACA,IAAMC,UAAU,GAAGR,WAAW,CAAC;IAAM,iBAAU,CAACS,OAAO;EAAlB,CAAkB,EAAEL,IAAI,CAAC;EAE9DH,iBAAiB,CAACO,UAAU,EAAE,eAAK;IAAI,eAAQ,CAAC,mBAAS;MAAI,YAAK,CAACE,KAAK,EAAEC,SAAS,CAAC;IAAvB,CAAuB,CAAC;EAA9C,CAA8C,CAAC;EAEtF,OAAO,CAACL,KAAK,EAAED,UAAU,CAAC;AAC5B","names":["useRef","useState","useCallback","useResizeObserver","useContainerQuery","mapFn","deps","elementRef","state","setState","getElement","current","entry","prevState"],"sources":["/Users/dcastro/node_modules/src/internal/hooks/container-queries/use-container-query.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef, useState, useCallback } from 'react';\nimport { ContainerQueryEntry } from './interfaces';\nimport { useResizeObserver } from './use-resize-observer';\n\n/**\n * Attaches resize-observer to the referenced element and keeps last observation in state.\n * The hook allows to limit the amount of re-renders to only when the observed value changes.\n *\n * Examples:\n *    // Switching display mode under a given condition (only re-renders when mode changes):\n *    const [smallMode, ref] = useContainerQuery(entry => entry.contentBoxHeight <= smallModeHeight, [smallModeHeight]);\n *\n *    // Obtain observer entity (re-renders with each observation):\n *    const [entry, ref] = useContainerQuery(entry => entry);\n *\n *    // Using prevState to avoid unnecessary re-renders:\n *    const [value, ref] = useContainerQuery((entry, prevValue) => shouldUpdate(entry) ? getValue(entry) : prevValue);\n *\n * @param mapFn Function to convert ContainerQueryEntry to a custom type S\n * @param deps Dependency list to indicate when the mapFn changes\n * @returns A tuple of observation value and a reference to be attached to the target element.\n */\nexport function useContainerQuery<S>(\n  mapFn: (entry: ContainerQueryEntry, prev: null | S) => S,\n  deps: React.DependencyList = []\n): [null | S, React.Ref<any>] {\n  const elementRef = useRef<HTMLElement>(null);\n  const [state, setState] = useState<S | null>(null);\n\n  // Update getElement when deps change to trigger new observation.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const getElement = useCallback(() => elementRef.current, deps);\n\n  useResizeObserver(getElement, entry => setState(prevState => mapFn(entry, prevState)));\n\n  return [state, elementRef];\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}