{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport Legend from '../internal/components/chart-legend';\nimport Filter from '../internal/components/chart-filter';\nimport InternalSpaceBetween from '../space-between/internal';\nimport InternalBox from '../box/internal';\nimport InternalPieChart from './pie-chart';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport createCategoryColorScale from '../internal/utils/create-category-color-scale';\nimport useContainerWidth from '../internal/utils/use-container-width';\nimport { nodeContains } from '../internal/utils/dom';\nvar PieChart = function PieChart(_a) {\n  var _b;\n  var _c = _a.variant,\n    variant = _c === void 0 ? 'pie' : _c,\n    _d = _a.size,\n    size = _d === void 0 ? 'medium' : _d,\n    _e = _a.hideTitles,\n    hideTitles = _e === void 0 ? false : _e,\n    _f = _a.hideDescriptions,\n    hideDescriptions = _f === void 0 ? false : _f,\n    _g = _a.hideLegend,\n    hideLegend = _g === void 0 ? false : _g,\n    _h = _a.hideFilter,\n    hideFilter = _h === void 0 ? false : _h,\n    _j = _a.statusType,\n    statusType = _j === void 0 ? 'finished' : _j,\n    _k = _a.data,\n    externalData = _k === void 0 ? [] : _k,\n    _l = _a.i18nStrings,\n    i18nStrings = _l === void 0 ? {} : _l,\n    controlledHighlightedSegment = _a.highlightedSegment,\n    controlledVisibleSegments = _a.visibleSegments,\n    controlledOnHighlightChange = _a.onHighlightChange,\n    onFilterChange = _a.onFilterChange,\n    additionalFilters = _a.additionalFilters,\n    legendTitle = _a.legendTitle,\n    _m = _a.detailPopoverSize,\n    detailPopoverSize = _m === void 0 ? 'medium' : _m,\n    props = __rest(_a, [\"variant\", \"size\", \"hideTitles\", \"hideDescriptions\", \"hideLegend\", \"hideFilter\", \"statusType\", \"data\", \"i18nStrings\", \"highlightedSegment\", \"visibleSegments\", \"onHighlightChange\", \"onFilterChange\", \"additionalFilters\", \"legendTitle\", \"detailPopoverSize\"]);\n  var _o = useBaseComponent('PieChart').__internalRootRef,\n    __internalRootRef = _o === void 0 ? null : _o;\n  var baseProps = getBaseProps(props);\n  var isEmpty = !externalData || externalData.length === 0;\n  var containerAttr = __assign(__assign({}, baseProps), {\n    className: clsx(baseProps.className, styles.root)\n  });\n  var containerRef = useRef(null);\n  var _p = useContainerWidth(),\n    containerWidth = _p[0],\n    measureRef = _p[1];\n  var data = useMemo(function () {\n    var colors = createCategoryColorScale(externalData, undefined, function (it) {\n      return it.color || null;\n    });\n    return externalData.map(function (datum, i) {\n      return {\n        index: i,\n        color: colors[i],\n        datum: datum\n      };\n    });\n  }, [externalData]);\n  var _q = useControllable(controlledHighlightedSegment, controlledOnHighlightChange, null, {\n      componentName: 'PieChart',\n      controlledProp: 'highlightedSegment',\n      changeHandler: 'onHighlightChange'\n    }),\n    _r = _q[0],\n    highlightedSegment = _r === void 0 ? null : _r,\n    setHighlightedSegment = _q[1];\n  var _s = useState(highlightedSegment),\n    legendSegment = _s[0],\n    setLegendSegment = _s[1];\n  useEffect(function () {\n    setLegendSegment(controlledHighlightedSegment || null);\n  }, [controlledHighlightedSegment]);\n  var _t = useControllable(controlledVisibleSegments, onFilterChange, externalData, {\n      componentName: 'PieChart',\n      controlledProp: 'visibleSegments',\n      changeHandler: 'onFilterChange'\n    }),\n    visibleSegments = _t[0],\n    setVisibleSegments = _t[1];\n  var _u = useState(null),\n    pinnedSegment = _u[0],\n    setPinnedSegment = _u[1];\n  var visibleData = useMemo(function () {\n    return data.filter(function (d) {\n      return (visibleSegments === null || visibleSegments === void 0 ? void 0 : visibleSegments.indexOf(d.datum)) !== -1;\n    });\n  }, [data, visibleSegments]);\n  var filterItems = data === null || data === void 0 ? void 0 : data.map(function (data) {\n    return {\n      label: data.datum.title,\n      color: data.color,\n      type: 'rectangle',\n      datum: data.datum\n    };\n  });\n  var legendItems = filterItems.filter(function (d) {\n    return (visibleSegments === null || visibleSegments === void 0 ? void 0 : visibleSegments.indexOf(d.datum)) !== -1;\n  });\n  var filterChange = useCallback(function (selectedSeries) {\n    setVisibleSegments(selectedSeries);\n    fireNonCancelableEvent(onFilterChange, {\n      visibleSegments: selectedSeries\n    });\n  }, [setVisibleSegments, onFilterChange]);\n  var onHighlightChange = useCallback(function (segment) {\n    if (pinnedSegment !== null) {\n      return;\n    }\n    setLegendSegment(segment);\n    setHighlightedSegment(segment);\n    fireNonCancelableEvent(controlledOnHighlightChange, {\n      highlightedSegment: segment\n    });\n  }, [pinnedSegment, controlledOnHighlightChange, setHighlightedSegment]);\n  var onBlur = function (event) {\n    if (event.relatedTarget && !nodeContains(containerRef.current, event.relatedTarget)) {\n      highlightedSegment && onHighlightChange(null);\n      setLegendSegment(null);\n    }\n  };\n  var mergedRef = useMergeRefs(containerRef, measureRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, containerAttr, {\n    ref: mergedRef,\n    onBlur: onBlur\n  }), statusType === 'finished' && !isEmpty && React.createElement(InternalBox, {\n    className: styles['filter-container'],\n    margin: {\n      bottom: 'l'\n    }\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"l\",\n    direction: \"horizontal\",\n    className: clsx((_b = {}, _b[styles['has-default-filter']] = !hideFilter, _b))\n  }, !hideFilter && React.createElement(Filter, {\n    series: filterItems,\n    onChange: filterChange,\n    selectedSeries: visibleSegments,\n    i18nStrings: i18nStrings\n  }), additionalFilters)), React.createElement(InternalPieChart, __assign({}, props, {\n    variant: variant,\n    size: size,\n    data: externalData,\n    visibleData: visibleData,\n    width: containerWidth,\n    statusType: statusType,\n    hideTitles: hideTitles,\n    hideDescriptions: hideDescriptions,\n    hideLegend: hideLegend,\n    hideFilter: hideFilter,\n    additionalFilters: additionalFilters,\n    i18nStrings: i18nStrings,\n    onHighlightChange: onHighlightChange,\n    highlightedSegment: highlightedSegment,\n    legendSegment: legendSegment,\n    pinnedSegment: pinnedSegment,\n    setPinnedSegment: setPinnedSegment,\n    detailPopoverSize: detailPopoverSize\n  })), !hideLegend && !isEmpty && statusType === 'finished' && React.createElement(InternalBox, {\n    margin: {\n      top: 'm'\n    }\n  }, React.createElement(Legend, {\n    series: legendItems,\n    highlightedSeries: legendSegment,\n    legendTitle: legendTitle,\n    ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.legendAriaLabel,\n    onHighlightChange: onHighlightChange,\n    plotContainerRef: containerRef\n  })));\n};\napplyDisplayName(PieChart, 'PieChart');\nexport default PieChart;","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useMemo","useRef","useState","clsx","getBaseProps","useControllable","fireNonCancelableEvent","Legend","Filter","InternalSpaceBetween","InternalBox","InternalPieChart","styles","applyDisplayName","useBaseComponent","useMergeRefs","createCategoryColorScale","useContainerWidth","nodeContains","PieChart","_a","variant","_d","size","_e","hideTitles","_f","hideDescriptions","_g","hideLegend","_h","hideFilter","_j","statusType","_k","externalData","_l","i18nStrings","controlledHighlightedSegment","controlledVisibleSegments","controlledOnHighlightChange","onFilterChange","additionalFilters","legendTitle","_m","detailPopoverSize","props","__internalRootRef","baseProps","isEmpty","length","containerAttr","className","root","containerRef","containerWidth","measureRef","data","colors","undefined","color","map","datum","i","index","componentName","controlledProp","changeHandler","_r","highlightedSegment","setHighlightedSegment","legendSegment","setLegendSegment","visibleSegments","setVisibleSegments","pinnedSegment","setPinnedSegment","visibleData","filter","indexOf","d","filterItems","label","title","type","legendItems","filterChange","selectedSeries","onHighlightChange","segment","onBlur","event","relatedTarget","current","mergedRef","ref","margin","bottom","direction","_b","series","onChange","width","top","highlightedSeries","ariaLabel","legendAriaLabel","plotContainerRef"],"sources":["/Users/dcastro/node_modules/src/pie-chart/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport Legend, { ChartLegendProps } from '../internal/components/chart-legend';\nimport Filter, { ChartFilterProps } from '../internal/components/chart-filter';\nimport InternalSpaceBetween from '../space-between/internal';\nimport InternalBox from '../box/internal';\n\nimport InternalPieChart, { InternalChartDatum } from './pie-chart';\nimport { PieChartProps } from './interfaces';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport createCategoryColorScale from '../internal/utils/create-category-color-scale';\nimport useContainerWidth from '../internal/utils/use-container-width';\nimport { nodeContains } from '../internal/utils/dom';\n\nexport { PieChartProps };\n\nconst PieChart = function PieChart<T extends PieChartProps.Datum = PieChartProps.Datum>({\n  variant = 'pie',\n  size = 'medium',\n  hideTitles = false,\n  hideDescriptions = false,\n  hideLegend = false,\n  hideFilter = false,\n  statusType = 'finished',\n  data: externalData = [],\n  i18nStrings = {},\n  highlightedSegment: controlledHighlightedSegment,\n  visibleSegments: controlledVisibleSegments,\n  onHighlightChange: controlledOnHighlightChange,\n  onFilterChange,\n  additionalFilters,\n  legendTitle,\n  detailPopoverSize = 'medium',\n  ...props\n}: PieChartProps<T>) {\n  const { __internalRootRef = null } = useBaseComponent('PieChart');\n  const baseProps = getBaseProps(props);\n  const isEmpty = !externalData || externalData.length === 0;\n  const containerAttr = {\n    ...baseProps,\n    className: clsx(baseProps.className, styles.root),\n  };\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [containerWidth, measureRef] = useContainerWidth();\n\n  const data: ReadonlyArray<InternalChartDatum<T>> = useMemo(() => {\n    const colors = createCategoryColorScale(externalData, undefined, it => it.color || null);\n\n    return externalData.map((datum, i) => ({\n      index: i,\n      color: colors[i],\n      datum,\n    }));\n  }, [externalData]);\n\n  const [highlightedSegment = null, setHighlightedSegment] = useControllable(\n    controlledHighlightedSegment,\n    controlledOnHighlightChange,\n    null,\n    {\n      componentName: 'PieChart',\n      controlledProp: 'highlightedSegment',\n      changeHandler: 'onHighlightChange',\n    }\n  );\n  const [legendSegment, setLegendSegment] = useState<null | T>(highlightedSegment);\n  useEffect(() => {\n    setLegendSegment(controlledHighlightedSegment || null);\n  }, [controlledHighlightedSegment]);\n\n  const [visibleSegments, setVisibleSegments] = useControllable(\n    controlledVisibleSegments,\n    onFilterChange,\n    externalData,\n    {\n      componentName: 'PieChart',\n      controlledProp: 'visibleSegments',\n      changeHandler: 'onFilterChange',\n    }\n  );\n\n  const [pinnedSegment, setPinnedSegment] = useState<T | null>(null);\n\n  const visibleData = useMemo(\n    () => data.filter(d => visibleSegments?.indexOf(d.datum) !== -1),\n    [data, visibleSegments]\n  );\n\n  const filterItems: ChartFilterProps<T>['series'] = data?.map(data => ({\n    label: data.datum.title,\n    color: data.color,\n    type: 'rectangle',\n    datum: data.datum,\n  }));\n\n  const legendItems: ChartLegendProps<T>['series'] = filterItems.filter(d => visibleSegments?.indexOf(d.datum) !== -1);\n\n  const filterChange = useCallback(\n    (selectedSeries: ReadonlyArray<T>) => {\n      setVisibleSegments(selectedSeries);\n      fireNonCancelableEvent(onFilterChange, {\n        visibleSegments: selectedSeries,\n      });\n    },\n    [setVisibleSegments, onFilterChange]\n  );\n\n  const onHighlightChange = useCallback(\n    (segment: T | null) => {\n      if (pinnedSegment !== null) {\n        return;\n      }\n      setLegendSegment(segment);\n      setHighlightedSegment(segment);\n      fireNonCancelableEvent(controlledOnHighlightChange, { highlightedSegment: segment });\n    },\n    [pinnedSegment, controlledOnHighlightChange, setHighlightedSegment]\n  );\n\n  const onBlur = (event: React.FocusEvent) => {\n    if (event.relatedTarget && !nodeContains(containerRef.current, event.relatedTarget)) {\n      highlightedSegment && onHighlightChange(null);\n      setLegendSegment(null);\n    }\n  };\n\n  const mergedRef = useMergeRefs(containerRef, measureRef, __internalRootRef);\n\n  return (\n    <div {...containerAttr} ref={mergedRef} onBlur={onBlur}>\n      {statusType === 'finished' && !isEmpty && (\n        <InternalBox className={styles['filter-container']} margin={{ bottom: 'l' }}>\n          <InternalSpaceBetween\n            size=\"l\"\n            direction=\"horizontal\"\n            className={clsx({\n              [styles['has-default-filter']]: !hideFilter,\n            })}\n          >\n            {!hideFilter && (\n              <Filter\n                series={filterItems}\n                onChange={filterChange}\n                selectedSeries={visibleSegments}\n                i18nStrings={i18nStrings}\n              />\n            )}\n            {additionalFilters}\n          </InternalSpaceBetween>\n        </InternalBox>\n      )}\n\n      <InternalPieChart\n        {...props}\n        variant={variant}\n        size={size}\n        data={externalData}\n        visibleData={visibleData}\n        width={containerWidth}\n        statusType={statusType}\n        hideTitles={hideTitles}\n        hideDescriptions={hideDescriptions}\n        hideLegend={hideLegend}\n        hideFilter={hideFilter}\n        additionalFilters={additionalFilters}\n        i18nStrings={i18nStrings}\n        onHighlightChange={onHighlightChange}\n        highlightedSegment={highlightedSegment}\n        legendSegment={legendSegment}\n        pinnedSegment={pinnedSegment}\n        setPinnedSegment={setPinnedSegment}\n        detailPopoverSize={detailPopoverSize}\n      />\n\n      {!hideLegend && !isEmpty && statusType === 'finished' && (\n        <InternalBox margin={{ top: 'm' }}>\n          <Legend<T>\n            series={legendItems}\n            highlightedSeries={legendSegment}\n            legendTitle={legendTitle}\n            ariaLabel={i18nStrings?.legendAriaLabel}\n            onHighlightChange={onHighlightChange}\n            plotContainerRef={containerRef}\n          />\n        </InternalBox>\n      )}\n    </div>\n  );\n};\n\napplyDisplayName(PieChart, 'PieChart');\nexport default PieChart;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}