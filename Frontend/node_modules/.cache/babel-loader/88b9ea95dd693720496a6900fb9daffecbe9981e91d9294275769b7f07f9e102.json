{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { useStableEventHandler } from '../../internal/hooks/use-stable-event-handler';\nimport { makeCancellable, PromiseCancelledSignal } from '../../internal/utils/promises';\nimport { extractBucketName, validate } from './validation';\nexport function useVersionsFetch(fetchVersions) {\n  var _a = useState(false),\n    loading = _a[0],\n    setLoading = _a[1];\n  var _b = useState(''),\n    lastFetchedValue = _b[0],\n    setLastFetched = _b[1];\n  var _c = useState([]),\n    versions = _c[0],\n    setVersions = _c[1];\n  var loadVersions = function (uri) {\n    if (uri === lastFetchedValue) {\n      return;\n    }\n    setLastFetched(uri);\n    var errorCode = validate(uri);\n    var _a = extractBucketName(uri),\n      bucketName = _a[0],\n      prefix = _a[1];\n    if (errorCode || !bucketName || !prefix || prefix.slice(-1) === '/') {\n      return;\n    }\n    setLoading(true);\n    var result = makeCancellable(fetchVersions(bucketName, prefix));\n    result.promise.then(function (versions) {\n      setLoading(false);\n      setVersions(versions.map(function (version) {\n        return {\n          value: version.VersionId,\n          label: version.LastModified\n        };\n      }));\n    }, function (err) {\n      if (!(err instanceof PromiseCancelledSignal)) {\n        setLoading(false);\n      }\n    });\n    return result;\n  };\n  return {\n    loading: loading,\n    versions: versions,\n    resetVersions: function () {\n      return setVersions([]);\n    },\n    // this function is a dependency of useEffect\n    loadVersions: useStableEventHandler(loadVersions)\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,qBAAqB,QAAQ,+CAA+C;AACrF,SAASC,eAAe,EAAEC,sBAAsB,QAAQ,+BAA+B;AAEvF,SAASC,iBAAiB,EAAEC,QAAQ,QAAQ,cAAc;AAG1D,OAAM,SAAUC,gBAAgB,CAACC,aAAuD;EAChF,SAAwBP,QAAQ,CAAC,KAAK,CAAC;IAAtCQ,OAAO;IAAEC,UAAU,QAAmB;EACvC,SAAqCT,QAAQ,CAAC,EAAE,CAAC;IAAhDU,gBAAgB;IAAEC,cAAc,QAAgB;EACjD,SAA0BX,QAAQ,CAA4B,EAAE,CAAC;IAAhEY,QAAQ;IAAEC,WAAW,QAA2C;EAEvE,IAAMC,YAAY,GAAG,UAACC,GAAW;IAC/B,IAAIA,GAAG,KAAKL,gBAAgB,EAAE;MAC5B;;IAEFC,cAAc,CAACI,GAAG,CAAC;IACnB,IAAMC,SAAS,GAAGX,QAAQ,CAACU,GAAG,CAAC;IACzB,SAAuBX,iBAAiB,CAACW,GAAG,CAAC;MAA5CE,UAAU;MAAEC,MAAM,QAA0B;IACnD,IAAIF,SAAS,IAAI,CAACC,UAAU,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACnE;;IAEFV,UAAU,CAAC,IAAI,CAAC;IAChB,IAAMW,MAAM,GAAGlB,eAAe,CAACK,aAAa,CAACU,UAAU,EAAEC,MAAM,CAAC,CAAC;IACjEE,MAAM,CAACC,OAAO,CAACC,IAAI,CACjB,kBAAQ;MACNb,UAAU,CAAC,KAAK,CAAC;MACjBI,WAAW,CACTD,QAAQ,CAACW,GAAG,CAAC,iBAAO;QAAI,OAAC;UACvBC,KAAK,EAAEC,OAAO,CAACC,SAAS;UACxBC,KAAK,EAAEF,OAAO,CAACG;SAChB;MAHuB,CAGtB,CAAC,CACJ;IACH,CAAC,EACD,aAAG;MACD,IAAI,EAAEC,GAAG,YAAY1B,sBAAsB,CAAC,EAAE;QAC5CM,UAAU,CAAC,KAAK,CAAC;;IAErB,CAAC,CACF;IACD,OAAOW,MAAM;EACf,CAAC;EAED,OAAO;IACLZ,OAAO;IACPI,QAAQ;IACRkB,aAAa,EAAE;MAAM,kBAAW,CAAC,EAAE,CAAC;IAAf,CAAe;IACpC;IACAhB,YAAY,EAAEb,qBAAqB,CAACa,YAAY;GACjD;AACH","names":["useState","useStableEventHandler","makeCancellable","PromiseCancelledSignal","extractBucketName","validate","useVersionsFetch","fetchVersions","loading","setLoading","lastFetchedValue","setLastFetched","versions","setVersions","loadVersions","uri","errorCode","bucketName","prefix","slice","result","promise","then","map","value","version","VersionId","label","LastModified","err","resetVersions"],"sources":["/Users/dcastro/node_modules/src/s3-resource-selector/s3-in-context/use-versions-fetch.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { useStableEventHandler } from '../../internal/hooks/use-stable-event-handler';\nimport { makeCancellable, PromiseCancelledSignal } from '../../internal/utils/promises';\nimport { SelectProps } from '../../select/interfaces';\nimport { extractBucketName, validate } from './validation';\nimport { S3ResourceSelectorProps } from '../interfaces';\n\nexport function useVersionsFetch(fetchVersions: S3ResourceSelectorProps['fetchVersions']) {\n  const [loading, setLoading] = useState(false);\n  const [lastFetchedValue, setLastFetched] = useState('');\n  const [versions, setVersions] = useState<Array<SelectProps.Option>>([]);\n\n  const loadVersions = (uri: string) => {\n    if (uri === lastFetchedValue) {\n      return;\n    }\n    setLastFetched(uri);\n    const errorCode = validate(uri);\n    const [bucketName, prefix] = extractBucketName(uri);\n    if (errorCode || !bucketName || !prefix || prefix.slice(-1) === '/') {\n      return;\n    }\n    setLoading(true);\n    const result = makeCancellable(fetchVersions(bucketName, prefix));\n    result.promise.then(\n      versions => {\n        setLoading(false);\n        setVersions(\n          versions.map(version => ({\n            value: version.VersionId,\n            label: version.LastModified,\n          }))\n        );\n      },\n      err => {\n        if (!(err instanceof PromiseCancelledSignal)) {\n          setLoading(false);\n        }\n      }\n    );\n    return result;\n  };\n\n  return {\n    loading,\n    versions,\n    resetVersions: () => setVersions([]),\n    // this function is a dependency of useEffect\n    loadVersions: useStableEventHandler(loadVersions),\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}