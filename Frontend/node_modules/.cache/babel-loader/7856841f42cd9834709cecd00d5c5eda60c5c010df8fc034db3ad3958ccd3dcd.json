{"ast":null,"code":"import { useContainerQuery } from './use-container-query';\nimport { getMatchingBreakpoint } from '../../breakpoints';\n/**\n * Re-renders the component when the breakpoint for the component changes. Scopes the re-renders to the specific\n * breakpoints you want to break at. \"default\" is always included as a fallback, so [\"xs\"] would trigger for\n * \"default\" and \"xs\".\n *\n * @param triggers The relevant breakpoints to trigger for.\n */\nexport function useContainerBreakpoints(triggers) {\n  // triggers.join() gives us a stable value to use for the dependencies argument\n  var triggersDep = triggers === null || triggers === void 0 ? void 0 : triggers.join();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useContainerQuery(function (rect) {\n    return getMatchingBreakpoint(rect.width, triggers);\n  }, [triggersDep]);\n}","map":{"version":3,"mappings":"AAGA,SAASA,iBAAiB,QAAQ,uBAAuB;AACzD,SAAqBC,qBAAqB,QAAQ,mBAAmB;AAErE;;;;;;;AAOA,OAAM,SAAUC,uBAAuB,CACrCC,QAAY;EAEZ;EACA,IAAMC,WAAW,GAAGD,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,IAAI,EAAE;EACpC;EACA,OAAOL,iBAAiB,CAAC,cAAI;IAAI,4BAAqB,CAACM,IAAI,CAACC,KAAK,EAAEJ,QAAQ,CAAC;EAA3C,CAA2C,EAAE,CAACC,WAAW,CAAC,CAAC;AAC9F","names":["useContainerQuery","getMatchingBreakpoint","useContainerBreakpoints","triggers","triggersDep","join","rect","width"],"sources":["/Users/dcastro/node_modules/src/internal/hooks/container-queries/use-container-breakpoints.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { useContainerQuery } from './use-container-query';\nimport { Breakpoint, getMatchingBreakpoint } from '../../breakpoints';\n\n/**\n * Re-renders the component when the breakpoint for the component changes. Scopes the re-renders to the specific\n * breakpoints you want to break at. \"default\" is always included as a fallback, so [\"xs\"] would trigger for\n * \"default\" and \"xs\".\n *\n * @param triggers The relevant breakpoints to trigger for.\n */\nexport function useContainerBreakpoints<T extends readonly Breakpoint[]>(\n  triggers?: T\n): [T[number] | 'default' | null, React.Ref<any>] {\n  // triggers.join() gives us a stable value to use for the dependencies argument\n  const triggersDep = triggers?.join();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useContainerQuery(rect => getMatchingBreakpoint(rect.width, triggers), [triggersDep]);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}