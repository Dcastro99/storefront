{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { setTimeOffset } from './time-offset';\n/**\n * This function fills in a start and end time if they are missing.\n */\nfunction fillMissingTime(value) {\n  if (!value) {\n    return value;\n  }\n  var _a = value.startDate.split('T'),\n    startDate = _a[0],\n    startTime = _a[1];\n  var _b = value.endDate.split('T'),\n    endDate = _b[0],\n    endTime = _b[1];\n  return __assign(__assign({}, value), {\n    startDate: startTime ? value.startDate : \"\".concat(startDate, \"T00:00:00\"),\n    endDate: endTime ? value.endDate : \"\".concat(endDate, \"T23:59:59\")\n  });\n}\nexport function formatValue(value, _a) {\n  var timeOffset = _a.timeOffset,\n    dateOnly = _a.dateOnly;\n  if (!value || value.type === 'relative') {\n    return value;\n  }\n  if (dateOnly) {\n    return {\n      type: 'absolute',\n      startDate: value.startDate.split('T')[0],\n      endDate: value.endDate.split('T')[0]\n    };\n  }\n  return setTimeOffset(value, timeOffset);\n}\nfunction getDefaultMode(value, relativeOptions, rangeSelectorMode) {\n  if (value && value.type) {\n    return value.type;\n  }\n  if (rangeSelectorMode === 'relative-only') {\n    return 'relative';\n  }\n  if (rangeSelectorMode === 'absolute-only') {\n    return 'absolute';\n  }\n  return relativeOptions.length > 0 ? 'relative' : 'absolute';\n}\nexport function useDateRangePicker(_a) {\n  var value = _a.value,\n    relativeOptions = _a.relativeOptions,\n    rangeSelectorMode = _a.rangeSelectorMode;\n  var _b = useState(getDefaultMode(value, relativeOptions, rangeSelectorMode)),\n    rangeSelectionMode = _b[0],\n    setRangeSelectionMode = _b[1];\n  var _c = useState((value === null || value === void 0 ? void 0 : value.type) === 'absolute' ? value : null),\n    selectedAbsoluteRange = _c[0],\n    setSelectedAbsoluteRange = _c[1];\n  var _d = useState((value === null || value === void 0 ? void 0 : value.type) === 'relative' ? value : null),\n    selectedRelativeRange = _d[0],\n    setSelectedRelativeRange = _d[1];\n  return {\n    fillMissingTime: fillMissingTime,\n    rangeSelectionMode: rangeSelectionMode,\n    setRangeSelectionMode: setRangeSelectionMode,\n    selectedAbsoluteRange: selectedAbsoluteRange,\n    setSelectedAbsoluteRange: setSelectedAbsoluteRange,\n    selectedRelativeRange: selectedRelativeRange,\n    setSelectedRelativeRange: setSelectedRelativeRange\n  };\n}","map":{"version":3,"mappings":";AAAA;AACA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,SAASC,aAAa,QAAQ,eAAe;AAE7C;;;AAGA,SAASC,eAAe,CAACC,KAAgD;EACvE,IAAI,CAACA,KAAK,EAAE;IACV,OAAOA,KAAK;;EAER,SAAyBA,KAAK,CAACC,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC;IAAlDD,SAAS;IAAEE,SAAS,QAA8B;EACnD,SAAqBH,KAAK,CAACI,OAAO,CAACF,KAAK,CAAC,GAAG,CAAC;IAA5CE,OAAO;IAAEC,OAAO,QAA4B;EACnD,6BACKL,KAAK;IACRC,SAAS,EAAEE,SAAS,GAAGH,KAAK,CAACC,SAAS,GAAG,UAAGA,SAAS,cAAW;IAChEG,OAAO,EAAEC,OAAO,GAAGL,KAAK,CAACI,OAAO,GAAG,UAAGA,OAAO;EAAW;AAE5D;AAEA,OAAM,SAAUE,WAAW,CACzBN,KAAwC,EACxCO,EAAqG;MAAnGC,UAAU;IAAEC,QAAQ;EAEtB,IAAI,CAACT,KAAK,IAAIA,KAAK,CAACU,IAAI,KAAK,UAAU,EAAE;IACvC,OAAOV,KAAK;;EAEd,IAAIS,QAAQ,EAAE;IACZ,OAAO;MACLC,IAAI,EAAE,UAAU;MAChBT,SAAS,EAAED,KAAK,CAACC,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACxCE,OAAO,EAAEJ,KAAK,CAACI,OAAO,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KACpC;;EAEH,OAAOJ,aAAa,CAACE,KAAK,EAAEQ,UAAU,CAAC;AACzC;AAEA,SAASG,cAAc,CACrBX,KAAwC,EACxCY,eAA+D,EAC/DC,iBAAyD;EAEzD,IAAIb,KAAK,IAAIA,KAAK,CAACU,IAAI,EAAE;IACvB,OAAOV,KAAK,CAACU,IAAI;;EAEnB,IAAIG,iBAAiB,KAAK,eAAe,EAAE;IACzC,OAAO,UAAU;;EAEnB,IAAIA,iBAAiB,KAAK,eAAe,EAAE;IACzC,OAAO,UAAU;;EAEnB,OAAOD,eAAe,CAACE,MAAM,GAAG,CAAC,GAAG,UAAU,GAAG,UAAU;AAC7D;AAEA,OAAM,SAAUC,kBAAkB,CAACR,EAAsE;MAApEP,KAAK;IAAEY,eAAe;IAAEC,iBAAiB;EACtE,SAA8ChB,QAAQ,CAC1Dc,cAAc,CAACX,KAAK,EAAEY,eAAe,EAAEC,iBAAiB,CAAC,CAC1D;IAFMG,kBAAkB;IAAEC,qBAAqB,QAE/C;EAEK,SAAoDpB,QAAQ,CAChE,MAAK,aAALG,KAAK,uBAALA,KAAK,CAAEU,IAAI,MAAK,UAAU,GAAGV,KAAK,GAAG,IAAI,CAC1C;IAFMkB,qBAAqB;IAAEC,wBAAwB,QAErD;EAEK,SAAoDtB,QAAQ,CAChE,MAAK,aAALG,KAAK,uBAALA,KAAK,CAAEU,IAAI,MAAK,UAAU,GAAGV,KAAK,GAAG,IAAI,CAC1C;IAFMoB,qBAAqB;IAAEC,wBAAwB,QAErD;EAED,OAAO;IACLtB,eAAe;IACfiB,kBAAkB;IAClBC,qBAAqB;IACrBC,qBAAqB;IACrBC,wBAAwB;IACxBC,qBAAqB;IACrBC,wBAAwB;GACzB;AACH","names":["useState","setTimeOffset","fillMissingTime","value","startDate","split","startTime","endDate","endTime","formatValue","_a","timeOffset","dateOnly","type","getDefaultMode","relativeOptions","rangeSelectorMode","length","useDateRangePicker","rangeSelectionMode","setRangeSelectionMode","selectedAbsoluteRange","setSelectedAbsoluteRange","selectedRelativeRange","setSelectedRelativeRange"],"sources":["/Users/dcastro/node_modules/src/date-range-picker/use-date-range-picker.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { DateRangePickerProps } from './interfaces';\nimport { setTimeOffset } from './time-offset';\n\n/**\n * This function fills in a start and end time if they are missing.\n */\nfunction fillMissingTime(value: DateRangePickerProps.AbsoluteValue | null) {\n  if (!value) {\n    return value;\n  }\n  const [startDate, startTime] = value.startDate.split('T');\n  const [endDate, endTime] = value.endDate.split('T');\n  return {\n    ...value,\n    startDate: startTime ? value.startDate : `${startDate}T00:00:00`,\n    endDate: endTime ? value.endDate : `${endDate}T23:59:59`,\n  };\n}\n\nexport function formatValue(\n  value: null | DateRangePickerProps.Value,\n  { timeOffset, dateOnly }: { timeOffset: { startDate?: number; endDate?: number }; dateOnly: boolean }\n): null | DateRangePickerProps.Value {\n  if (!value || value.type === 'relative') {\n    return value;\n  }\n  if (dateOnly) {\n    return {\n      type: 'absolute',\n      startDate: value.startDate.split('T')[0],\n      endDate: value.endDate.split('T')[0],\n    };\n  }\n  return setTimeOffset(value, timeOffset);\n}\n\nfunction getDefaultMode(\n  value: null | DateRangePickerProps.Value,\n  relativeOptions: readonly DateRangePickerProps.RelativeOption[],\n  rangeSelectorMode: DateRangePickerProps.RangeSelectorMode\n) {\n  if (value && value.type) {\n    return value.type;\n  }\n  if (rangeSelectorMode === 'relative-only') {\n    return 'relative';\n  }\n  if (rangeSelectorMode === 'absolute-only') {\n    return 'absolute';\n  }\n  return relativeOptions.length > 0 ? 'relative' : 'absolute';\n}\n\nexport function useDateRangePicker({ value, relativeOptions, rangeSelectorMode }: UseDateRangePickerProps) {\n  const [rangeSelectionMode, setRangeSelectionMode] = useState<'absolute' | 'relative'>(\n    getDefaultMode(value, relativeOptions, rangeSelectorMode)\n  );\n\n  const [selectedAbsoluteRange, setSelectedAbsoluteRange] = useState<DateRangePickerProps.AbsoluteValue | null>(\n    value?.type === 'absolute' ? value : null\n  );\n\n  const [selectedRelativeRange, setSelectedRelativeRange] = useState<DateRangePickerProps.RelativeValue | null>(\n    value?.type === 'relative' ? value : null\n  );\n\n  return {\n    fillMissingTime,\n    rangeSelectionMode,\n    setRangeSelectionMode,\n    selectedAbsoluteRange,\n    setSelectedAbsoluteRange,\n    selectedRelativeRange,\n    setSelectedRelativeRange,\n  };\n}\n\nexport interface UseDateRangePickerProps {\n  value: null | DateRangePickerProps.Value;\n  relativeOptions: ReadonlyArray<DateRangePickerProps.RelativeOption>;\n  rangeSelectorMode: DateRangePickerProps.RangeSelectorMode;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}