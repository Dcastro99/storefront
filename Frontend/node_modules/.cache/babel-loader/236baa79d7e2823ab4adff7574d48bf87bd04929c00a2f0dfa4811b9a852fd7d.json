{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport clsx from 'clsx';\nimport ButtonTrigger from '../../internal/components/button-trigger';\nimport styles from './styles.css.js';\nimport Option from '../../internal/components/option';\nimport { generateUniqueId } from '../../internal/hooks/use-unique-id';\nvar Trigger = React.forwardRef(function (_a, ref) {\n  var ariaLabelledby = _a.ariaLabelledby,\n    ariaDescribedby = _a.ariaDescribedby,\n    controlId = _a.controlId,\n    invalid = _a.invalid,\n    triggerProps = _a.triggerProps,\n    selectedOption = _a.selectedOption,\n    triggerVariant = _a.triggerVariant,\n    inFilteringToken = _a.inFilteringToken,\n    isOpen = _a.isOpen,\n    placeholder = _a.placeholder,\n    disabled = _a.disabled,\n    ariaLabel = _a.ariaLabel;\n  var id = useMemo(function () {\n    return controlId !== null && controlId !== void 0 ? controlId : generateUniqueId();\n  }, [controlId]);\n  var triggerContent = null;\n  if (!selectedOption) {\n    triggerContent = React.createElement(\"span\", {\n      \"aria-disabled\": \"true\",\n      className: clsx(styles.placeholder, styles.trigger),\n      id: triggerProps.ariaLabelledby\n    }, placeholder);\n  } else if (triggerVariant === 'option') {\n    triggerContent = React.createElement(Option, {\n      id: triggerProps.ariaLabelledby,\n      option: __assign(__assign({}, selectedOption), {\n        disabled: disabled\n      }),\n      triggerVariant: true\n    });\n  } else {\n    triggerContent = React.createElement(\"span\", {\n      id: triggerProps.ariaLabelledby,\n      className: styles.trigger\n    }, selectedOption.label || selectedOption.value);\n  }\n  var mergedRef = useMergeRefs(triggerProps.ref, ref);\n  return React.createElement(ButtonTrigger, __assign({}, triggerProps, {\n    id: id,\n    ref: mergedRef,\n    pressed: isOpen,\n    disabled: disabled,\n    invalid: invalid,\n    inFilteringToken: inFilteringToken,\n    ariaLabel: ariaLabel,\n    ariaDescribedby: ariaDescribedby,\n    ariaLabelledby: [ariaLabelledby, triggerProps.ariaLabelledby].filter(function (label) {\n      return !!label;\n    }).join(' ')\n  }), triggerContent);\n});\nexport default Trigger;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,SAASC,YAAY,QAAQ,qCAAqC;AAClE,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,aAAa,MAAM,0CAA0C;AAEpE,OAAOC,MAAM,MAAM,iBAAiB;AAGpC,OAAOC,MAAM,MAAM,kCAAkC;AACrD,SAASC,gBAAgB,QAAQ,oCAAoC;AAcrE,IAAMC,OAAO,GAAGR,KAAK,CAACS,UAAU,CAC9B,UACEC,EAae,EACfC,GAAiC;MAb/BC,cAAc;IACdC,eAAe;IACfC,SAAS;IACTC,OAAO;IACPC,YAAY;IACZC,cAAc;IACdC,cAAc;IACdC,gBAAgB;IAChBC,MAAM;IACNC,WAAW;IACXC,QAAQ;IACRC,SAAS;EAIX,IAAMC,EAAE,GAAGvB,OAAO,CAAC;IAAM,gBAAS,aAATa,SAAS,cAATA,SAAS,GAAIP,gBAAgB,EAAE;EAA/B,CAA+B,EAAE,CAACO,SAAS,CAAC,CAAC;EAEtE,IAAIW,cAAc,GAAG,IAAI;EACzB,IAAI,CAACR,cAAc,EAAE;IACnBQ,cAAc,GACZzB;MAAA,iBACgB,MAAM;MACpB0B,SAAS,EAAEvB,IAAI,CAACE,MAAM,CAACgB,WAAW,EAAEhB,MAAM,CAACsB,OAAO,CAAC;MACnDH,EAAE,EAAER,YAAY,CAACJ;IAAc,GAE9BS,WAAW,CAEf;GACF,MAAM,IAAIH,cAAc,KAAK,QAAQ,EAAE;IACtCO,cAAc,GACZzB,oBAACM,MAAM;MAACkB,EAAE,EAAER,YAAY,CAACJ,cAAc;MAAEgB,MAAM,wBAAOX,cAAc;QAAEK,QAAQ;MAAA;MAAIJ,cAAc,EAAE;IAAI,EACvG;GACF,MAAM;IACLO,cAAc,GACZzB;MAAMwB,EAAE,EAAER,YAAY,CAACJ,cAAc;MAAEc,SAAS,EAAErB,MAAM,CAACsB;IAAO,GAC7DV,cAAc,CAACY,KAAK,IAAIZ,cAAc,CAACa,KAAK,CAEhD;;EAGH,IAAMC,SAAS,GAAG7B,YAAY,CAACc,YAAY,CAACL,GAAG,EAAEA,GAAG,CAAC;EAErD,OACEX,oBAACI,aAAa,eACRY,YAAY;IAChBQ,EAAE,EAAEA,EAAE;IACNb,GAAG,EAAEoB,SAAS;IACdC,OAAO,EAAEZ,MAAM;IACfE,QAAQ,EAAEA,QAAQ;IAClBP,OAAO,EAAEA,OAAO;IAChBI,gBAAgB,EAAEA,gBAAgB;IAClCI,SAAS,EAAEA,SAAS;IACpBV,eAAe,EAAEA,eAAe;IAChCD,cAAc,EAAE,CAACA,cAAc,EAAEI,YAAY,CAACJ,cAAc,CAAC,CAACqB,MAAM,CAAC,eAAK;MAAI,QAAC,CAACJ,KAAK;IAAP,CAAO,CAAC,CAACK,IAAI,CAAC,GAAG;EAAC,IAE/FT,cAAc,CACD;AAEpB,CAAC,CACF;AAED,eAAejB,OAAO","names":["React","useMemo","useMergeRefs","clsx","ButtonTrigger","styles","Option","generateUniqueId","Trigger","forwardRef","_a","ref","ariaLabelledby","ariaDescribedby","controlId","invalid","triggerProps","selectedOption","triggerVariant","inFilteringToken","isOpen","placeholder","disabled","ariaLabel","id","triggerContent","className","trigger","option","label","value","mergedRef","pressed","filter","join"],"sources":["/Users/dcastro/node_modules/src/select/parts/trigger.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport clsx from 'clsx';\nimport ButtonTrigger from '../../internal/components/button-trigger';\nimport { SelectProps } from '../interfaces';\nimport styles from './styles.css.js';\nimport { OptionDefinition } from '../../internal/components/option/interfaces';\nimport { FormFieldValidationControlProps } from '../../internal/context/form-field-context';\nimport Option from '../../internal/components/option';\nimport { generateUniqueId } from '../../internal/hooks/use-unique-id';\nimport { SelectTriggerProps } from '../utils/use-select';\n\nexport interface TriggerProps extends FormFieldValidationControlProps {\n  placeholder: string | undefined;\n  disabled: boolean | undefined;\n  ariaLabel: string | undefined;\n  triggerProps: SelectTriggerProps;\n  selectedOption: OptionDefinition | null;\n  isOpen?: boolean;\n  triggerVariant?: SelectProps.TriggerVariant;\n  inFilteringToken?: boolean;\n}\n\nconst Trigger = React.forwardRef(\n  (\n    {\n      ariaLabelledby,\n      ariaDescribedby,\n      controlId,\n      invalid,\n      triggerProps,\n      selectedOption,\n      triggerVariant,\n      inFilteringToken,\n      isOpen,\n      placeholder,\n      disabled,\n      ariaLabel,\n    }: TriggerProps,\n    ref: React.Ref<HTMLButtonElement>\n  ) => {\n    const id = useMemo(() => controlId ?? generateUniqueId(), [controlId]);\n\n    let triggerContent = null;\n    if (!selectedOption) {\n      triggerContent = (\n        <span\n          aria-disabled=\"true\"\n          className={clsx(styles.placeholder, styles.trigger)}\n          id={triggerProps.ariaLabelledby}\n        >\n          {placeholder}\n        </span>\n      );\n    } else if (triggerVariant === 'option') {\n      triggerContent = (\n        <Option id={triggerProps.ariaLabelledby} option={{ ...selectedOption, disabled }} triggerVariant={true} />\n      );\n    } else {\n      triggerContent = (\n        <span id={triggerProps.ariaLabelledby} className={styles.trigger}>\n          {selectedOption.label || selectedOption.value}\n        </span>\n      );\n    }\n\n    const mergedRef = useMergeRefs(triggerProps.ref, ref);\n\n    return (\n      <ButtonTrigger\n        {...triggerProps}\n        id={id}\n        ref={mergedRef}\n        pressed={isOpen}\n        disabled={disabled}\n        invalid={invalid}\n        inFilteringToken={inFilteringToken}\n        ariaLabel={ariaLabel}\n        ariaDescribedby={ariaDescribedby}\n        ariaLabelledby={[ariaLabelledby, triggerProps.ariaLabelledby].filter(label => !!label).join(' ')}\n      >\n        {triggerContent}\n      </ButtonTrigger>\n    );\n  }\n);\n\nexport default Trigger;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}