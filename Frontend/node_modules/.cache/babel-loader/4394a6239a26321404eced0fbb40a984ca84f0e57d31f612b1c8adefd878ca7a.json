{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { TabButton } from './tab-button';\nimport { InternalButton } from '../button/internal';\nimport { useContainerQuery } from '../internal/hooks/container-queries/use-container-query';\nfunction InternalStatusBar(_a) {\n  var _b, _c;\n  var languageLabel = _a.languageLabel,\n    cursorPosition = _a.cursorPosition,\n    paneStatus = _a.paneStatus,\n    onErrorPaneToggle = _a.onErrorPaneToggle,\n    onWarningPaneToggle = _a.onWarningPaneToggle,\n    onTabFocus = _a.onTabFocus,\n    onTabBlur = _a.onTabBlur,\n    errorsTabRef = _a.errorsTabRef,\n    warningsTabRef = _a.warningsTabRef,\n    isTabFocused = _a.isTabFocused,\n    paneId = _a.paneId,\n    onPreferencesOpen = _a.onPreferencesOpen,\n    i18nStrings = _a.i18nStrings,\n    errorCount = _a.errorCount,\n    warningCount = _a.warningCount,\n    leftBarRef = _a.leftBarRef,\n    isVirtual = _a.isVirtual,\n    minifyCounters = _a.minifyCounters,\n    isRefresh = _a.isRefresh;\n  var errorText = \"\".concat(i18nStrings.errorsTab, \": \").concat(errorCount);\n  var warningText = \"\".concat(i18nStrings.warningsTab, \": \").concat(warningCount);\n  // Virtual status bar is inaccessible for screen readers and keyboard interactions.\n  return React.createElement(\"div\", {\n    className: clsx(styles['status-bar'], (_b = {}, _b[styles['status-bar-with-hidden-pane']] = paneStatus === 'hidden', _b[styles['status-bar-virtual']] = isVirtual, _b)),\n    \"aria-hidden\": isVirtual\n  }, React.createElement(\"div\", {\n    className: clsx(styles['status-bar__left'], (_c = {}, _c[styles['status-bar__left-virtual']] = isVirtual, _c)),\n    ref: leftBarRef\n  }, React.createElement(\"span\", {\n    className: styles['status-bar__language-mode']\n  }, languageLabel), React.createElement(\"span\", {\n    className: styles['status-bar__cursor-position']\n  }, cursorPosition), React.createElement(\"div\", {\n    role: \"tablist\"\n  }, React.createElement(TabButton, {\n    text: minifyCounters ? \" \".concat(errorCount) : errorText,\n    className: styles['tab-button--errors'],\n    iconName: \"status-negative\",\n    disabled: errorCount === 0 || isVirtual,\n    active: paneStatus === 'error',\n    onClick: onErrorPaneToggle,\n    onFocus: onTabFocus,\n    onBlur: onTabBlur,\n    ref: errorsTabRef,\n    ariaLabel: errorText,\n    paneId: paneId,\n    isRefresh: isRefresh\n  }), React.createElement(\"span\", {\n    className: styles['tab-button--divider']\n  }), React.createElement(TabButton, {\n    text: minifyCounters ? \" \".concat(warningCount) : warningText,\n    className: styles['tab-button--warnings'],\n    iconName: \"status-warning\",\n    disabled: warningCount === 0 || isVirtual,\n    active: paneStatus === 'warning',\n    onClick: onWarningPaneToggle,\n    onFocus: onTabFocus,\n    onBlur: onTabBlur,\n    ref: warningsTabRef,\n    tabIndex: paneStatus === 'error' && isTabFocused ? -1 : undefined,\n    ariaHidden: paneStatus === 'error' && isTabFocused ? true : undefined,\n    ariaLabel: warningText,\n    paneId: paneId,\n    isRefresh: isRefresh\n  }))), React.createElement(\"div\", {\n    className: styles['status-bar__right']\n  }, React.createElement(\"div\", {\n    className: styles['status-bar__cog-button']\n  }, React.createElement(InternalButton, {\n    disabled: isVirtual,\n    formAction: \"none\",\n    variant: \"icon\",\n    iconName: \"settings\",\n    iconAlt: \"Settings\",\n    ariaLabel: i18nStrings.preferencesButtonAriaLabel,\n    onClick: onPreferencesOpen,\n    __nativeAttributes: {\n      tabIndex: paneStatus !== 'hidden' && isTabFocused ? -1 : undefined,\n      'aria-hidden': paneStatus !== 'hidden' && isTabFocused ? true : undefined\n    }\n  }))));\n}\nexport var StatusBar = function (props) {\n  // create a virtual status bar, in order to calculate the width with full tab button text\n  // and decide if tab button text needs to be reduced\n  var _a = useContainerQuery(function (rect) {\n      return rect.width;\n    }),\n    realWidth = _a[0],\n    statusLeftBarRef = _a[1];\n  var _b = useContainerQuery(function (rect) {\n      return rect.width;\n    }),\n    virtualWidth = _b[0],\n    virtualStatusLeftBarRef = _b[1];\n  var minifyCounters = virtualWidth !== null && realWidth !== null && virtualWidth > realWidth;\n  return React.createElement(React.Fragment, null, React.createElement(InternalStatusBar, __assign({\n    isVirtual: false\n  }, props, {\n    leftBarRef: statusLeftBarRef,\n    minifyCounters: minifyCounters\n  })), React.createElement(InternalStatusBar, __assign({\n    isVirtual: true\n  }, props, {\n    leftBarRef: virtualStatusLeftBarRef,\n    minifyCounters: false\n  })));\n};","map":{"version":3,"mappings":"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","names":["React","clsx","styles","TabButton","InternalButton","useContainerQuery","InternalStatusBar","_a","languageLabel","cursorPosition","paneStatus","onErrorPaneToggle","onWarningPaneToggle","onTabFocus","onTabBlur","errorsTabRef","warningsTabRef","isTabFocused","paneId","onPreferencesOpen","i18nStrings","errorCount","warningCount","leftBarRef","isVirtual","minifyCounters","isRefresh","errorText","errorsTab","warningText","warningsTab","className","_b","_c","ref","role","text","iconName","disabled","active","onClick","onFocus","onBlur","ariaLabel","tabIndex","undefined","ariaHidden","formAction","variant","iconAlt","preferencesButtonAriaLabel","__nativeAttributes","StatusBar","props","width","realWidth","statusLeftBarRef","virtualWidth","virtualStatusLeftBarRef"],"sources":["/Users/dcastro/node_modules/src/code-editor/status-bar.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { TabButton } from './tab-button';\nimport { InternalButton } from '../button/internal';\nimport { useContainerQuery } from '../internal/hooks/container-queries/use-container-query';\nimport { CodeEditorProps } from './interfaces';\n\ninterface StatusBarProps {\n  languageLabel: string;\n  cursorPosition: string;\n  paneStatus: string;\n  errorsTabRef: React.RefObject<HTMLButtonElement>;\n  warningsTabRef: React.RefObject<HTMLButtonElement>;\n  isTabFocused: boolean;\n  paneId: string;\n  i18nStrings: CodeEditorProps.I18nStrings;\n  errorCount: number;\n  warningCount: number;\n  isRefresh: boolean;\n\n  onErrorPaneToggle: () => void;\n  onWarningPaneToggle: () => void;\n  onTabFocus?: React.FocusEventHandler<HTMLButtonElement>;\n  onTabBlur?: React.FocusEventHandler<HTMLButtonElement>;\n  onPreferencesOpen: () => void;\n  onHeightChange?: (height: number | null) => void;\n}\n\ntype InternalStatusBarProps = StatusBarProps & {\n  leftBarRef: React.Ref<HTMLDivElement>;\n  isVirtual: boolean;\n  minifyCounters: boolean;\n};\n\nfunction InternalStatusBar({\n  languageLabel,\n  cursorPosition,\n  paneStatus,\n  onErrorPaneToggle,\n  onWarningPaneToggle,\n  onTabFocus,\n  onTabBlur,\n  errorsTabRef,\n  warningsTabRef,\n  isTabFocused,\n  paneId,\n  onPreferencesOpen,\n  i18nStrings,\n  errorCount,\n  warningCount,\n  leftBarRef,\n  isVirtual,\n  minifyCounters,\n  isRefresh,\n}: InternalStatusBarProps) {\n  const errorText = `${i18nStrings.errorsTab}: ${errorCount}`;\n  const warningText = `${i18nStrings.warningsTab}: ${warningCount}`;\n\n  // Virtual status bar is inaccessible for screen readers and keyboard interactions.\n\n  return (\n    <div\n      className={clsx(styles['status-bar'], {\n        [styles['status-bar-with-hidden-pane']]: paneStatus === 'hidden',\n        [styles['status-bar-virtual']]: isVirtual,\n      })}\n      aria-hidden={isVirtual}\n    >\n      <div\n        className={clsx(styles['status-bar__left'], {\n          [styles['status-bar__left-virtual']]: isVirtual,\n        })}\n        ref={leftBarRef}\n      >\n        <span className={styles['status-bar__language-mode']}>{languageLabel}</span>\n        <span className={styles['status-bar__cursor-position']}>{cursorPosition}</span>\n\n        <div role=\"tablist\">\n          <TabButton\n            text={minifyCounters ? ` ${errorCount}` : errorText}\n            className={styles['tab-button--errors']}\n            iconName=\"status-negative\"\n            disabled={errorCount === 0 || isVirtual}\n            active={paneStatus === 'error'}\n            onClick={onErrorPaneToggle}\n            onFocus={onTabFocus}\n            onBlur={onTabBlur}\n            ref={errorsTabRef}\n            ariaLabel={errorText}\n            paneId={paneId}\n            isRefresh={isRefresh}\n          />\n          <span className={styles['tab-button--divider']}></span>\n          <TabButton\n            text={minifyCounters ? ` ${warningCount}` : warningText}\n            className={styles['tab-button--warnings']}\n            iconName=\"status-warning\"\n            disabled={warningCount === 0 || isVirtual}\n            active={paneStatus === 'warning'}\n            onClick={onWarningPaneToggle}\n            onFocus={onTabFocus}\n            onBlur={onTabBlur}\n            ref={warningsTabRef}\n            tabIndex={paneStatus === 'error' && isTabFocused ? -1 : undefined}\n            ariaHidden={paneStatus === 'error' && isTabFocused ? true : undefined}\n            ariaLabel={warningText}\n            paneId={paneId}\n            isRefresh={isRefresh}\n          />\n        </div>\n      </div>\n\n      <div className={styles['status-bar__right']}>\n        <div className={styles['status-bar__cog-button']}>\n          <InternalButton\n            disabled={isVirtual}\n            formAction=\"none\"\n            variant=\"icon\"\n            iconName=\"settings\"\n            iconAlt=\"Settings\"\n            ariaLabel={i18nStrings.preferencesButtonAriaLabel}\n            onClick={onPreferencesOpen}\n            __nativeAttributes={{\n              tabIndex: paneStatus !== 'hidden' && isTabFocused ? -1 : undefined,\n              'aria-hidden': paneStatus !== 'hidden' && isTabFocused ? true : undefined,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport const StatusBar = (props: StatusBarProps) => {\n  // create a virtual status bar, in order to calculate the width with full tab button text\n  // and decide if tab button text needs to be reduced\n  const [realWidth, statusLeftBarRef] = useContainerQuery(rect => rect.width);\n  const [virtualWidth, virtualStatusLeftBarRef] = useContainerQuery(rect => rect.width);\n\n  const minifyCounters = virtualWidth !== null && realWidth !== null && virtualWidth > realWidth;\n\n  return (\n    <>\n      <InternalStatusBar isVirtual={false} {...props} leftBarRef={statusLeftBarRef} minifyCounters={minifyCounters} />\n      <InternalStatusBar isVirtual={true} {...props} leftBarRef={virtualStatusLeftBarRef} minifyCounters={false} />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}