{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport Calendar from './calendar';\nimport { InternalButton } from '../button/internal';\nimport FocusLock from '../internal/components/focus-lock';\nimport InternalBox from '../box/internal';\nimport SpaceBetween from '../space-between/index.js';\nimport styles from './styles.css.js';\nimport RelativeRangePicker from './relative-range';\nimport ModeSwitcher from './mode-switcher';\nimport clsx from 'clsx';\nimport InternalAlert from '../alert/internal';\nimport LiveRegion from '../internal/components/live-region';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { useDateRangePicker } from './use-date-range-picker';\nexport var VALID_RANGE = {\n  valid: true\n};\nexport function DateRangePickerDropdown(_a) {\n  var _b, _c;\n  var _d = _a.locale,\n    locale = _d === void 0 ? '' : _d,\n    startOfWeek = _a.startOfWeek,\n    isDateEnabled = _a.isDateEnabled,\n    isValidRange = _a.isValidRange,\n    value = _a.value,\n    clearValue = _a.onClear,\n    applyValue = _a.onApply,\n    onDropdownClose = _a.onDropdownClose,\n    relativeOptions = _a.relativeOptions,\n    showClearButton = _a.showClearButton,\n    isSingleGrid = _a.isSingleGrid,\n    i18nStrings = _a.i18nStrings,\n    dateOnly = _a.dateOnly,\n    timeInputFormat = _a.timeInputFormat,\n    rangeSelectorMode = _a.rangeSelectorMode,\n    ariaLabelledby = _a.ariaLabelledby,\n    ariaDescribedby = _a.ariaDescribedby;\n  var _e = useDateRangePicker({\n      value: value,\n      relativeOptions: relativeOptions,\n      rangeSelectorMode: rangeSelectorMode\n    }),\n    fillMissingTime = _e.fillMissingTime,\n    rangeSelectionMode = _e.rangeSelectionMode,\n    setRangeSelectionMode = _e.setRangeSelectionMode,\n    selectedAbsoluteRange = _e.selectedAbsoluteRange,\n    setSelectedAbsoluteRange = _e.setSelectedAbsoluteRange,\n    selectedRelativeRange = _e.selectedRelativeRange,\n    setSelectedRelativeRange = _e.setSelectedRelativeRange;\n  var focusVisible = useFocusVisible();\n  var scrollableContainerRef = useRef(null);\n  var applyButtonRef = useRef(null);\n  var _f = useState(false),\n    applyClicked = _f[0],\n    setApplyClicked = _f[1];\n  var _g = useState(VALID_RANGE),\n    validationResult = _g[0],\n    setValidationResult = _g[1];\n  var closeDropdown = function () {\n    setApplyClicked(false);\n    onDropdownClose();\n  };\n  var onClear = function () {\n    closeDropdown();\n    clearValue();\n  };\n  var onApply = function () {\n    var newValue = rangeSelectionMode === 'relative' ? selectedRelativeRange : fillMissingTime(selectedAbsoluteRange);\n    var newValidationResult = applyValue(newValue);\n    if (newValidationResult.valid === false) {\n      setApplyClicked(true);\n      setValidationResult(newValidationResult);\n    } else {\n      setApplyClicked(false);\n      closeDropdown();\n    }\n  };\n  useEffect(function () {\n    if (applyClicked) {\n      var visibleRange = rangeSelectionMode === 'relative' ? selectedRelativeRange : fillMissingTime(selectedAbsoluteRange);\n      var newValidationResult = isValidRange(visibleRange);\n      setValidationResult(newValidationResult || VALID_RANGE);\n    }\n  }, [applyClicked, isValidRange, rangeSelectionMode, selectedRelativeRange, selectedAbsoluteRange, fillMissingTime, setValidationResult]);\n  var focusRefs = {\n    \"default\": useRef(null),\n    'absolute-only': useRef(null),\n    'relative-only': useRef(null)\n  };\n  useEffect(function () {\n    var _a;\n    return (_a = scrollableContainerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  }, [scrollableContainerRef]);\n  return React.createElement(React.Fragment, null, React.createElement(FocusLock, {\n    autoFocus: true\n  }, React.createElement(\"div\", __assign({}, focusVisible, {\n    ref: scrollableContainerRef,\n    className: styles.dropdown,\n    tabIndex: 0,\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    \"aria-label\": i18nStrings.ariaLabel,\n    \"aria-labelledby\": ariaLabelledby !== null && ariaLabelledby !== void 0 ? ariaLabelledby : i18nStrings.ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby !== null && ariaDescribedby !== void 0 ? ariaDescribedby : i18nStrings.ariaDescribedby\n  }), React.createElement(\"div\", {\n    className: clsx(styles['dropdown-content'], (_b = {}, _b[styles['one-grid']] = isSingleGrid, _b))\n  }, React.createElement(SpaceBetween, {\n    size: \"l\"\n  }, React.createElement(InternalBox, {\n    padding: {\n      top: 'm',\n      horizontal: 'l'\n    }\n  }, React.createElement(SpaceBetween, {\n    direction: \"vertical\",\n    size: \"s\"\n  }, rangeSelectorMode === 'default' && React.createElement(ModeSwitcher, {\n    ref: focusRefs[\"default\"],\n    mode: rangeSelectionMode,\n    onChange: function (mode) {\n      setRangeSelectionMode(mode);\n      setApplyClicked(false);\n      setValidationResult(VALID_RANGE);\n    },\n    i18nStrings: i18nStrings\n  }), rangeSelectionMode === 'absolute' && React.createElement(Calendar, {\n    ref: focusRefs['absolute-only'],\n    isSingleGrid: isSingleGrid,\n    initialEndDate: selectedAbsoluteRange === null || selectedAbsoluteRange === void 0 ? void 0 : selectedAbsoluteRange.endDate,\n    initialStartDate: selectedAbsoluteRange === null || selectedAbsoluteRange === void 0 ? void 0 : selectedAbsoluteRange.startDate,\n    locale: locale,\n    startOfWeek: startOfWeek,\n    isDateEnabled: isDateEnabled,\n    i18nStrings: i18nStrings,\n    onSelectDateRange: setSelectedAbsoluteRange,\n    dateOnly: dateOnly,\n    timeInputFormat: timeInputFormat\n  }), rangeSelectionMode === 'relative' && React.createElement(RelativeRangePicker, {\n    ref: focusRefs['relative-only'],\n    isSingleGrid: isSingleGrid,\n    options: relativeOptions,\n    dateOnly: dateOnly,\n    initialSelection: selectedRelativeRange,\n    onChange: function (range) {\n      return setSelectedRelativeRange(range);\n    },\n    i18nStrings: i18nStrings\n  })), React.createElement(InternalBox, {\n    className: styles['validation-section'],\n    margin: !validationResult.valid ? {\n      top: 's'\n    } : undefined\n  }, !validationResult.valid && React.createElement(React.Fragment, null, React.createElement(InternalAlert, {\n    type: \"error\",\n    statusIconAriaLabel: i18nStrings.errorIconAriaLabel\n  }, React.createElement(\"span\", {\n    className: styles['validation-error']\n  }, validationResult.errorMessage)), React.createElement(LiveRegion, null, validationResult.errorMessage)))), React.createElement(\"div\", {\n    className: clsx(styles.footer, (_c = {}, _c[styles['one-grid']] = isSingleGrid, _c[styles['has-clear-button']] = showClearButton, _c))\n  }, showClearButton && React.createElement(\"div\", {\n    className: styles['footer-button-wrapper']\n  }, React.createElement(InternalButton, {\n    onClick: onClear,\n    className: styles['clear-button'],\n    variant: \"link\",\n    formAction: \"none\"\n  }, i18nStrings.clearButtonLabel)), React.createElement(\"div\", {\n    className: styles['footer-button-wrapper']\n  }, React.createElement(SpaceBetween, {\n    size: \"xs\",\n    direction: \"horizontal\"\n  }, React.createElement(InternalButton, {\n    onClick: closeDropdown,\n    className: styles['cancel-button'],\n    variant: \"link\",\n    formAction: \"none\"\n  }, i18nStrings.cancelButtonLabel), React.createElement(InternalButton, {\n    onClick: onApply,\n    className: styles['apply-button'],\n    ref: applyButtonRef,\n    formAction: \"none\"\n  }, i18nStrings.applyButtonLabel)))))))));\n}","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAE1D,OAAOC,QAAQ,MAAM,YAAY;AAEjC,SAASC,cAAc,QAAQ,oBAAoB;AACnD,OAAOC,SAAS,MAAM,mCAAmC;AACzD,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAOC,YAAY,MAAM,2BAA2B;AAEpD,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,mBAAmB,MAAM,kBAAkB;AAClD,OAAOC,YAAY,MAAM,iBAAiB;AAC1C,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,aAAa,MAAM,mBAAmB;AAC7C,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,eAAe,MAAM,iCAAiC;AAC7D,SAASC,kBAAkB,QAAQ,yBAAyB;AAE5D,OAAO,IAAMC,WAAW,GAA0C;EAAEC,KAAK,EAAE;AAAI,CAAE;AA0BjF,OAAM,SAAUC,uBAAuB,CAACC,EAkBT;;MAjB7BC,cAAW;IAAXC,MAAM,mBAAG,EAAE;IACXC,WAAW;IACXC,aAAa;IACbC,YAAY;IACZC,KAAK;IACIC,UAAU;IACVC,UAAU;IACnBC,eAAe;IACfC,eAAe;IACfC,eAAe;IACfC,YAAY;IACZC,WAAW;IACXC,QAAQ;IACRC,eAAe;IACfC,iBAAiB;IACjBC,cAAc;IACdC,eAAe;EAET,SAQFtB,kBAAkB,CAAC;MACrBU,KAAK;MACLI,eAAe;MACfM,iBAAiB;KAClB,CAAC;IAXAG,eAAe;IACfC,kBAAkB;IAClBC,qBAAqB;IACrBC,qBAAqB;IACrBC,wBAAwB;IACxBC,qBAAqB;IACrBC,wBAAwB,8BAKxB;EAEF,IAAMC,YAAY,GAAG/B,eAAe,EAAE;EACtC,IAAMgC,sBAAsB,GAAG7C,MAAM,CAAwB,IAAI,CAAC;EAClE,IAAM8C,cAAc,GAAG9C,MAAM,CAAkB,IAAI,CAAC;EAE9C,SAAkCC,QAAQ,CAAU,KAAK,CAAC;IAAzD8C,YAAY;IAAEC,eAAe,QAA4B;EAE1D,SAA0C/C,QAAQ,CAEtDc,WAAW,CAAC;IAFPkC,gBAAgB;IAAEC,mBAAmB,QAE9B;EAEd,IAAMC,aAAa,GAAG;IACpBH,eAAe,CAAC,KAAK,CAAC;IACtBrB,eAAe,EAAE;EACnB,CAAC;EAED,IAAMyB,OAAO,GAAG;IACdD,aAAa,EAAE;IACf1B,UAAU,EAAE;EACd,CAAC;EAED,IAAM4B,OAAO,GAAG;IACd,IAAMC,QAAQ,GAAGhB,kBAAkB,KAAK,UAAU,GAAGI,qBAAqB,GAAGL,eAAe,CAACG,qBAAqB,CAAC;IACnH,IAAMe,mBAAmB,GAAG7B,UAAU,CAAC4B,QAAQ,CAAC;IAChD,IAAIC,mBAAmB,CAACvC,KAAK,KAAK,KAAK,EAAE;MACvCgC,eAAe,CAAC,IAAI,CAAC;MACrBE,mBAAmB,CAACK,mBAAmB,CAAC;KACzC,MAAM;MACLP,eAAe,CAAC,KAAK,CAAC;MACtBG,aAAa,EAAE;;EAEnB,CAAC;EAEDpD,SAAS,CAAC;IACR,IAAIgD,YAAY,EAAE;MAChB,IAAMS,YAAY,GAChBlB,kBAAkB,KAAK,UAAU,GAAGI,qBAAqB,GAAGL,eAAe,CAACG,qBAAqB,CAAC;MAEpG,IAAMe,mBAAmB,GAAGhC,YAAY,CAACiC,YAAY,CAAC;MACtDN,mBAAmB,CAACK,mBAAmB,IAAIxC,WAAW,CAAC;;EAE3D,CAAC,EAAE,CACDgC,YAAY,EACZxB,YAAY,EACZe,kBAAkB,EAClBI,qBAAqB,EACrBF,qBAAqB,EACrBH,eAAe,EACfa,mBAAmB,CACpB,CAAC;EAEF,IAAMO,SAAS,GAAG;IAChB,SAAO,EAAEzD,MAAM,CAAY,IAAI,CAAC;IAChC,eAAe,EAAEA,MAAM,CAAY,IAAI,CAAC;IACxC,eAAe,EAAEA,MAAM,CAAY,IAAI;GACxC;EAEDD,SAAS,CAAC;IAAA;IAAM,mCAAsB,CAAC2D,OAAO,0CAAEC,KAAK,EAAE;EAAA,GAAE,CAACd,sBAAsB,CAAC,CAAC;EAElF,OACE/C,0CACEA,oBAACM,SAAS;IAACwD,SAAS,EAAE;EAAI,GACxB9D,wCACM8C,YAAY;IAChBiB,GAAG,EAAEhB,sBAAsB;IAC3BiB,SAAS,EAAEvD,MAAM,CAACwD,QAAQ;IAC1BC,QAAQ,EAAE,CAAC;IACXC,IAAI,EAAC,QAAQ;IAAA,cACF,MAAM;IAAA,cACLlC,WAAW,CAACmC,SAAS;IAAA,mBAChB/B,cAAc,aAAdA,cAAc,cAAdA,cAAc,GAAIJ,WAAW,CAACI,cAAc;IAAA,oBAC3CC,eAAe,aAAfA,eAAe,cAAfA,eAAe,GAAIL,WAAW,CAACK;EAAe,IAEhEtC;IACEgE,SAAS,EAAEpD,IAAI,CAACH,MAAM,CAAC,kBAAkB,CAAC,YACxC4D,GAAC5D,MAAM,CAAC,UAAU,CAAC,IAAGuB,YAAY;EAClC,GAEFhC,oBAACQ,YAAY;IAAC8D,IAAI,EAAC;EAAG,GACpBtE,oBAACO,WAAW;IAACgE,OAAO,EAAE;MAAEC,GAAG,EAAE,GAAG;MAAEC,UAAU,EAAE;IAAG;EAAE,GACjDzE,oBAACQ,YAAY;IAACkE,SAAS,EAAC,UAAU;IAACJ,IAAI,EAAC;EAAG,GACxClC,iBAAiB,KAAK,SAAS,IAC9BpC,oBAACW,YAAY;IACXoD,GAAG,EAAEJ,SAAS,CAAC,SAAO;IACtBgB,IAAI,EAAEnC,kBAAkB;IACxBoC,QAAQ,EAAE,UAACD,IAA6B;MACtClC,qBAAqB,CAACkC,IAAI,CAAC;MAC3BzB,eAAe,CAAC,KAAK,CAAC;MACtBE,mBAAmB,CAACnC,WAAW,CAAC;IAClC,CAAC;IACDgB,WAAW,EAAEA;EAAW,EAE3B,EAEAO,kBAAkB,KAAK,UAAU,IAChCxC,oBAACI,QAAQ;IACP2D,GAAG,EAAEJ,SAAS,CAAC,eAAe,CAAC;IAC/B3B,YAAY,EAAEA,YAAY;IAC1B6C,cAAc,EAAEnC,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEoC,OAAO;IAC9CC,gBAAgB,EAAErC,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEsC,SAAS;IAClD1D,MAAM,EAAEA,MAAM;IACdC,WAAW,EAAEA,WAAW;IACxBC,aAAa,EAAEA,aAAa;IAC5BS,WAAW,EAAEA,WAAW;IACxBgD,iBAAiB,EAAEtC,wBAAwB;IAC3CT,QAAQ,EAAEA,QAAQ;IAClBC,eAAe,EAAEA;EAAe,EAEnC,EAEAK,kBAAkB,KAAK,UAAU,IAChCxC,oBAACU,mBAAmB;IAClBqD,GAAG,EAAEJ,SAAS,CAAC,eAAe,CAAC;IAC/B3B,YAAY,EAAEA,YAAY;IAC1BkD,OAAO,EAAEpD,eAAe;IACxBI,QAAQ,EAAEA,QAAQ;IAClBiD,gBAAgB,EAAEvC,qBAAqB;IACvCgC,QAAQ,EAAE,eAAK;MAAI,+BAAwB,CAACQ,KAAK,CAAC;IAA/B,CAA+B;IAClDnD,WAAW,EAAEA;EAAW,EAE3B,CACY,EAEfjC,oBAACO,WAAW;IACVyD,SAAS,EAAEvD,MAAM,CAAC,oBAAoB,CAAC;IACvC4E,MAAM,EAAE,CAAClC,gBAAgB,CAACjC,KAAK,GAAG;MAAEsD,GAAG,EAAE;IAAG,CAAE,GAAGc;EAAS,GAEzD,CAACnC,gBAAgB,CAACjC,KAAK,IACtBlB,0CACEA,oBAACa,aAAa;IAAC0E,IAAI,EAAC,OAAO;IAACC,mBAAmB,EAAEvD,WAAW,CAACwD;EAAkB,GAC7EzF;IAAMgE,SAAS,EAAEvD,MAAM,CAAC,kBAAkB;EAAC,GAAG0C,gBAAgB,CAACuC,YAAY,CAAQ,CACrE,EAChB1F,oBAACc,UAAU,QAAEqC,gBAAgB,CAACuC,YAAY,CAAc,CAE3D,CACW,CACF,EAEd1F;IACEgE,SAAS,EAAEpD,IAAI,CAACH,MAAM,CAACkF,MAAM,YAC3BC,GAACnF,MAAM,CAAC,UAAU,CAAC,IAAGuB,YAAY,EAClC4D,GAACnF,MAAM,CAAC,kBAAkB,CAAC,IAAGsB,eAAe;EAC7C,GAEDA,eAAe,IACd/B;IAAKgE,SAAS,EAAEvD,MAAM,CAAC,uBAAuB;EAAC,GAC7CT,oBAACK,cAAc;IACbwF,OAAO,EAAEvC,OAAO;IAChBU,SAAS,EAAEvD,MAAM,CAAC,cAAc,CAAC;IACjCqF,OAAO,EAAC,MAAM;IACdC,UAAU,EAAC;EAAM,GAEhB9D,WAAW,CAAC+D,gBAAgB,CACd,CAEpB,EACDhG;IAAKgE,SAAS,EAAEvD,MAAM,CAAC,uBAAuB;EAAC,GAC7CT,oBAACQ,YAAY;IAAC8D,IAAI,EAAC,IAAI;IAACI,SAAS,EAAC;EAAY,GAC5C1E,oBAACK,cAAc;IACbwF,OAAO,EAAExC,aAAa;IACtBW,SAAS,EAAEvD,MAAM,CAAC,eAAe,CAAC;IAClCqF,OAAO,EAAC,MAAM;IACdC,UAAU,EAAC;EAAM,GAEhB9D,WAAW,CAACgE,iBAAiB,CACf,EAEjBjG,oBAACK,cAAc;IACbwF,OAAO,EAAEtC,OAAO;IAChBS,SAAS,EAAEvD,MAAM,CAAC,cAAc,CAAC;IACjCsD,GAAG,EAAEf,cAAc;IACnB+C,UAAU,EAAC;EAAM,GAEhB9D,WAAW,CAACiE,gBAAgB,CACd,CACJ,CACX,CACF,CACO,CACX,CACF,CACI,CACX;AAEP","names":["React","useEffect","useRef","useState","Calendar","InternalButton","FocusLock","InternalBox","SpaceBetween","styles","RelativeRangePicker","ModeSwitcher","clsx","InternalAlert","LiveRegion","useFocusVisible","useDateRangePicker","VALID_RANGE","valid","DateRangePickerDropdown","_a","_d","locale","startOfWeek","isDateEnabled","isValidRange","value","clearValue","applyValue","onDropdownClose","relativeOptions","showClearButton","isSingleGrid","i18nStrings","dateOnly","timeInputFormat","rangeSelectorMode","ariaLabelledby","ariaDescribedby","fillMissingTime","rangeSelectionMode","setRangeSelectionMode","selectedAbsoluteRange","setSelectedAbsoluteRange","selectedRelativeRange","setSelectedRelativeRange","focusVisible","scrollableContainerRef","applyButtonRef","applyClicked","setApplyClicked","validationResult","setValidationResult","closeDropdown","onClear","onApply","newValue","newValidationResult","visibleRange","focusRefs","current","focus","autoFocus","ref","className","dropdown","tabIndex","role","ariaLabel","_b","size","padding","top","horizontal","direction","mode","onChange","initialEndDate","endDate","initialStartDate","startDate","onSelectDateRange","options","initialSelection","range","margin","undefined","type","statusIconAriaLabel","errorIconAriaLabel","errorMessage","footer","_c","onClick","variant","formAction","clearButtonLabel","cancelButtonLabel","applyButtonLabel"],"sources":["/Users/dcastro/node_modules/src/date-range-picker/dropdown.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport { DateRangePickerProps, Focusable } from './interfaces';\nimport Calendar from './calendar';\nimport { ButtonProps } from '../button/interfaces';\nimport { InternalButton } from '../button/internal';\nimport FocusLock from '../internal/components/focus-lock';\nimport InternalBox from '../box/internal';\nimport SpaceBetween from '../space-between/index.js';\n\nimport styles from './styles.css.js';\nimport RelativeRangePicker from './relative-range';\nimport ModeSwitcher from './mode-switcher';\nimport clsx from 'clsx';\nimport InternalAlert from '../alert/internal';\nimport LiveRegion from '../internal/components/live-region';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { useDateRangePicker } from './use-date-range-picker';\n\nexport const VALID_RANGE: DateRangePickerProps.ValidRangeResult = { valid: true };\n\nexport interface DateRangePickerDropdownProps\n  extends Pick<\n    Required<DateRangePickerProps>,\n    | 'locale'\n    | 'isDateEnabled'\n    | 'isValidRange'\n    | 'value'\n    | 'relativeOptions'\n    | 'showClearButton'\n    | 'i18nStrings'\n    | 'dateOnly'\n    | 'timeInputFormat'\n    | 'rangeSelectorMode'\n  > {\n  onClear: () => void;\n  onApply: (value: null | DateRangePickerProps.Value) => DateRangePickerProps.ValidationResult;\n  startOfWeek: number | undefined;\n  onDropdownClose: () => void;\n  isSingleGrid: boolean;\n\n  ariaLabelledby?: string;\n  ariaDescribedby?: string;\n}\n\nexport function DateRangePickerDropdown({\n  locale = '',\n  startOfWeek,\n  isDateEnabled,\n  isValidRange,\n  value,\n  onClear: clearValue,\n  onApply: applyValue,\n  onDropdownClose,\n  relativeOptions,\n  showClearButton,\n  isSingleGrid,\n  i18nStrings,\n  dateOnly,\n  timeInputFormat,\n  rangeSelectorMode,\n  ariaLabelledby,\n  ariaDescribedby,\n}: DateRangePickerDropdownProps) {\n  const {\n    fillMissingTime,\n    rangeSelectionMode,\n    setRangeSelectionMode,\n    selectedAbsoluteRange,\n    setSelectedAbsoluteRange,\n    selectedRelativeRange,\n    setSelectedRelativeRange,\n  } = useDateRangePicker({\n    value,\n    relativeOptions,\n    rangeSelectorMode,\n  });\n\n  const focusVisible = useFocusVisible();\n  const scrollableContainerRef = useRef<HTMLDivElement | null>(null);\n  const applyButtonRef = useRef<ButtonProps.Ref>(null);\n\n  const [applyClicked, setApplyClicked] = useState<boolean>(false);\n\n  const [validationResult, setValidationResult] = useState<\n    DateRangePickerProps.ValidRangeResult | DateRangePickerProps.InvalidRangeResult\n  >(VALID_RANGE);\n\n  const closeDropdown = () => {\n    setApplyClicked(false);\n    onDropdownClose();\n  };\n\n  const onClear = () => {\n    closeDropdown();\n    clearValue();\n  };\n\n  const onApply = () => {\n    const newValue = rangeSelectionMode === 'relative' ? selectedRelativeRange : fillMissingTime(selectedAbsoluteRange);\n    const newValidationResult = applyValue(newValue);\n    if (newValidationResult.valid === false) {\n      setApplyClicked(true);\n      setValidationResult(newValidationResult);\n    } else {\n      setApplyClicked(false);\n      closeDropdown();\n    }\n  };\n\n  useEffect(() => {\n    if (applyClicked) {\n      const visibleRange =\n        rangeSelectionMode === 'relative' ? selectedRelativeRange : fillMissingTime(selectedAbsoluteRange);\n\n      const newValidationResult = isValidRange(visibleRange);\n      setValidationResult(newValidationResult || VALID_RANGE);\n    }\n  }, [\n    applyClicked,\n    isValidRange,\n    rangeSelectionMode,\n    selectedRelativeRange,\n    selectedAbsoluteRange,\n    fillMissingTime,\n    setValidationResult,\n  ]);\n\n  const focusRefs = {\n    default: useRef<Focusable>(null),\n    'absolute-only': useRef<Focusable>(null),\n    'relative-only': useRef<Focusable>(null),\n  };\n\n  useEffect(() => scrollableContainerRef.current?.focus(), [scrollableContainerRef]);\n\n  return (\n    <>\n      <FocusLock autoFocus={true}>\n        <div\n          {...focusVisible}\n          ref={scrollableContainerRef}\n          className={styles.dropdown}\n          tabIndex={0}\n          role=\"dialog\"\n          aria-modal=\"true\"\n          aria-label={i18nStrings.ariaLabel}\n          aria-labelledby={ariaLabelledby ?? i18nStrings.ariaLabelledby}\n          aria-describedby={ariaDescribedby ?? i18nStrings.ariaDescribedby}\n        >\n          <div\n            className={clsx(styles['dropdown-content'], {\n              [styles['one-grid']]: isSingleGrid,\n            })}\n          >\n            <SpaceBetween size=\"l\">\n              <InternalBox padding={{ top: 'm', horizontal: 'l' }}>\n                <SpaceBetween direction=\"vertical\" size=\"s\">\n                  {rangeSelectorMode === 'default' && (\n                    <ModeSwitcher\n                      ref={focusRefs.default}\n                      mode={rangeSelectionMode}\n                      onChange={(mode: 'absolute' | 'relative') => {\n                        setRangeSelectionMode(mode);\n                        setApplyClicked(false);\n                        setValidationResult(VALID_RANGE);\n                      }}\n                      i18nStrings={i18nStrings}\n                    />\n                  )}\n\n                  {rangeSelectionMode === 'absolute' && (\n                    <Calendar\n                      ref={focusRefs['absolute-only']}\n                      isSingleGrid={isSingleGrid}\n                      initialEndDate={selectedAbsoluteRange?.endDate}\n                      initialStartDate={selectedAbsoluteRange?.startDate}\n                      locale={locale}\n                      startOfWeek={startOfWeek}\n                      isDateEnabled={isDateEnabled}\n                      i18nStrings={i18nStrings}\n                      onSelectDateRange={setSelectedAbsoluteRange}\n                      dateOnly={dateOnly}\n                      timeInputFormat={timeInputFormat}\n                    />\n                  )}\n\n                  {rangeSelectionMode === 'relative' && (\n                    <RelativeRangePicker\n                      ref={focusRefs['relative-only']}\n                      isSingleGrid={isSingleGrid}\n                      options={relativeOptions}\n                      dateOnly={dateOnly}\n                      initialSelection={selectedRelativeRange}\n                      onChange={range => setSelectedRelativeRange(range)}\n                      i18nStrings={i18nStrings}\n                    />\n                  )}\n                </SpaceBetween>\n\n                <InternalBox\n                  className={styles['validation-section']}\n                  margin={!validationResult.valid ? { top: 's' } : undefined}\n                >\n                  {!validationResult.valid && (\n                    <>\n                      <InternalAlert type=\"error\" statusIconAriaLabel={i18nStrings.errorIconAriaLabel}>\n                        <span className={styles['validation-error']}>{validationResult.errorMessage}</span>\n                      </InternalAlert>\n                      <LiveRegion>{validationResult.errorMessage}</LiveRegion>\n                    </>\n                  )}\n                </InternalBox>\n              </InternalBox>\n\n              <div\n                className={clsx(styles.footer, {\n                  [styles['one-grid']]: isSingleGrid,\n                  [styles['has-clear-button']]: showClearButton,\n                })}\n              >\n                {showClearButton && (\n                  <div className={styles['footer-button-wrapper']}>\n                    <InternalButton\n                      onClick={onClear}\n                      className={styles['clear-button']}\n                      variant=\"link\"\n                      formAction=\"none\"\n                    >\n                      {i18nStrings.clearButtonLabel}\n                    </InternalButton>\n                  </div>\n                )}\n                <div className={styles['footer-button-wrapper']}>\n                  <SpaceBetween size=\"xs\" direction=\"horizontal\">\n                    <InternalButton\n                      onClick={closeDropdown}\n                      className={styles['cancel-button']}\n                      variant=\"link\"\n                      formAction=\"none\"\n                    >\n                      {i18nStrings.cancelButtonLabel}\n                    </InternalButton>\n\n                    <InternalButton\n                      onClick={onApply}\n                      className={styles['apply-button']}\n                      ref={applyButtonRef}\n                      formAction=\"none\"\n                    >\n                      {i18nStrings.applyButtonLabel}\n                    </InternalButton>\n                  </SpaceBetween>\n                </div>\n              </div>\n            </SpaceBetween>\n          </div>\n        </div>\n      </FocusLock>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}