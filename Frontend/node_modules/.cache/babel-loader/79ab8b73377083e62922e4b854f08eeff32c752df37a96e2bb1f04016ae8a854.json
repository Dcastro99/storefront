{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar PromiseCancelledSignal = /** @class */function () {\n  function PromiseCancelledSignal() {}\n  return PromiseCancelledSignal;\n}();\nexport { PromiseCancelledSignal };\n/**\n * Wrap and provide a handle for a promise to provide cancellation information inside\n * callbacks. Takes a similar approach to how an AbortController works in modern fetch.\n *\n * @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n */\nexport function makeCancellable(promise) {\n  var cancelled = false;\n  var wrapped = promise.then(function (value) {\n    if (cancelled) {\n      throw new PromiseCancelledSignal();\n    }\n    return value;\n  }, function (err) {\n    if (cancelled) {\n      throw new PromiseCancelledSignal();\n    }\n    throw err;\n  });\n  return {\n    promise: wrapped,\n    cancel: function () {\n      cancelled = true;\n    },\n    isCancelled: function () {\n      return cancelled;\n    }\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;EAAA,mCAAqC;EAAA,6BAAC;AAAD,CAAC,EAAtC;;AAEA;;;;;;AAMA,OAAM,SAAUA,eAAe,CAAIC,OAAmB;EAKpD,IAAIC,SAAS,GAAG,KAAK;EACrB,IAAMC,OAAO,GAAGF,OAAO,CAACG,IAAI,CAC1B,eAAK;IACH,IAAIF,SAAS,EAAE;MACb,MAAM,IAAIG,sBAAsB,EAAE;;IAEpC,OAAOC,KAAK;EACd,CAAC,EACD,aAAG;IACD,IAAIJ,SAAS,EAAE;MACb,MAAM,IAAIG,sBAAsB,EAAE;;IAEpC,MAAME,GAAG;EACX,CAAC,CACF;EAED,OAAO;IACLN,OAAO,EAAEE,OAAO;IAChBK,MAAM,EAAE;MACNN,SAAS,GAAG,IAAI;IAClB,CAAC;IACDO,WAAW,EAAE;MAAM,gBAAS;IAAT;GACpB;AACH","names":["makeCancellable","promise","cancelled","wrapped","then","PromiseCancelledSignal","value","err","cancel","isCancelled"],"sources":["/Users/dcastro/node_modules/src/internal/utils/promises.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport class PromiseCancelledSignal {}\n\n/**\n * Wrap and provide a handle for a promise to provide cancellation information inside\n * callbacks. Takes a similar approach to how an AbortController works in modern fetch.\n *\n * @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n */\nexport function makeCancellable<T>(promise: Promise<T>): {\n  promise: Promise<T>;\n  cancel: () => void;\n  isCancelled: () => boolean;\n} {\n  let cancelled = false;\n  const wrapped = promise.then(\n    value => {\n      if (cancelled) {\n        throw new PromiseCancelledSignal();\n      }\n      return value;\n    },\n    err => {\n      if (cancelled) {\n        throw new PromiseCancelledSignal();\n      }\n      throw err;\n    }\n  );\n\n  return {\n    promise: wrapped,\n    cancel: () => {\n      cancelled = true;\n    },\n    isCancelled: () => cancelled,\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}