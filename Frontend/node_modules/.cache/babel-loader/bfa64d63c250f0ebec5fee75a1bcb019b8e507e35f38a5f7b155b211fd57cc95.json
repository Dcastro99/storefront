{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport focusSvgElement from '../../utils/focus-svg-element';\nimport styles from './styles.css.js';\nexport default forwardRef(ApplicationController);\nfunction ApplicationController(_a, ref) {\n  var activeElementKey = _a.activeElementKey,\n    activeElementRef = _a.activeElementRef,\n    onFocus = _a.onFocus,\n    onBlur = _a.onBlur,\n    onKeyDown = _a.onKeyDown;\n  var containerRef = useRef(null);\n  var applicationRef = useRef(null);\n  var focusTransitionRef = useRef(false);\n  var _b = useState(false),\n    isFocused = _b[0],\n    setFocused = _b[1];\n  // Calls provided onFocus handler when the application obtains focus, ignoring internal focus juggling.\n  var onApplicationFocus = useCallback(function (event) {\n    if (focusTransitionRef.current === false) {\n      setFocused(true);\n      onFocus && onFocus(event);\n    } else {\n      focusTransitionRef.current = false;\n    }\n  }, [onFocus]);\n  // Calls provided onBlur handler when the application loses focus, ignoring internal focus juggling.\n  var onApplicationBlur = useCallback(function (event) {\n    if (focusTransitionRef.current === false) {\n      setFocused(false);\n      onBlur && onBlur(event);\n      // The application controller can only be focused programmatically.\n      muteApplication(applicationRef.current);\n    }\n  }, [onBlur]);\n  var onApplicationKeyDown = onKeyDown;\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function () {\n        return focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null);\n      }\n    };\n  }, [activeElementRef]);\n  // Re-attaches and re-focuses the application for screen readers to treat it as an update.\n  useEffect(function () {\n    // Skip if not focused or if the transition is already happening.\n    if (!isFocused || focusTransitionRef.current === true) {\n      return;\n    }\n    // Delay focus juggle to let the last focus event settle in Firefox.\n    // Without the delay the focus is getting lost.\n    var timeoutId = setTimeout(function () {\n      focusTransitionRef.current = true;\n      containerRef.current.removeChild(applicationRef.current);\n      containerRef.current.appendChild(applicationRef.current);\n      focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null);\n    }, 0);\n    return function () {\n      return clearTimeout(timeoutId);\n    };\n  }, [isFocused, activeElementKey, activeElementRef]);\n  return React.createElement(\"g\", {\n    ref: containerRef\n  }, React.createElement(\"g\", {\n    focusable: false,\n    tabIndex: -1,\n    ref: applicationRef,\n    onFocus: onApplicationFocus,\n    onBlur: onApplicationBlur,\n    onKeyDown: onApplicationKeyDown,\n    className: styles.application\n  }));\n}\n// Focuses application but before copies aria-attributes from the target.\nfunction focusApplication(app, target) {\n  // Remove prev attributes.\n  for (var _i = 0, _a = getAttributeNames(app); _i < _a.length; _i++) {\n    var attributeName = _a[_i];\n    if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n      app.removeAttribute(attributeName);\n    }\n  }\n  // Copy new attributes.\n  if (target) {\n    for (var _b = 0, _c = getAttributeNames(target); _b < _c.length; _b++) {\n      var attributeName = _c[_b];\n      if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n        var attributeValue = target.getAttribute(attributeName);\n        attributeValue && app.setAttribute(attributeName, attributeValue);\n      }\n    }\n  }\n  // Make app focusable.\n  app.tabIndex = 0;\n  app.setAttribute('focusable', 'true');\n  app.setAttribute('aria-hidden', 'false');\n  // Focus app.\n  focusSvgElement(app);\n}\n// The application is to be only focused programmatically.\nfunction muteApplication(app) {\n  // Remove prev attributes.\n  for (var _i = 0, _a = getAttributeNames(app); _i < _a.length; _i++) {\n    var attributeName = _a[_i];\n    if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n      app.removeAttribute(attributeName);\n    }\n  }\n  // Make app non-focusable.\n  app.tabIndex = -1;\n  app.setAttribute('focusable', 'false');\n  app.setAttribute('aria-hidden', 'true');\n}\n// Polyfill for element.getAttributeNames(), IE11\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames#polyfill\nfunction getAttributeNames(element) {\n  var attributes = element.attributes;\n  var result = new Array(attributes.length);\n  for (var i = 0; i < attributes.length; i++) {\n    result[i] = attributes[i].name;\n  }\n  return result;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,WAAW,EAAEC,SAAS,EAAEC,mBAAmB,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACxG,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,OAAOC,MAAM,MAAM,iBAAiB;AAcpC,eAAeP,UAAU,CAACQ,qBAAqB,CAAC;AAEhD,SAASA,qBAAqB,CAC5BC,EAA8F,EAC9FC,GAA8B;MAD5BC,gBAAgB;IAAEC,gBAAgB;IAAEC,OAAO;IAAEC,MAAM;IAAEC,SAAS;EAGhE,IAAMC,YAAY,GAAGZ,MAAM,CAAc,IAAI,CAAC;EAC9C,IAAMa,cAAc,GAAGb,MAAM,CAAc,IAAI,CAAC;EAChD,IAAMc,kBAAkB,GAAGd,MAAM,CAAC,KAAK,CAAC;EAClC,SAA0BC,QAAQ,CAAC,KAAK,CAAC;IAAxCc,SAAS;IAAEC,UAAU,QAAmB;EAE/C;EACA,IAAMC,kBAAkB,GAAGpB,WAAW,CACpC,UAACqB,KAAoC;IACnC,IAAIJ,kBAAkB,CAACK,OAAO,KAAK,KAAK,EAAE;MACxCH,UAAU,CAAC,IAAI,CAAC;MAChBP,OAAO,IAAIA,OAAO,CAACS,KAAK,CAAC;KAC1B,MAAM;MACLJ,kBAAkB,CAACK,OAAO,GAAG,KAAK;;EAEtC,CAAC,EACD,CAACV,OAAO,CAAC,CACV;EACD;EACA,IAAMW,iBAAiB,GAAGvB,WAAW,CACnC,UAACqB,KAAoC;IACnC,IAAIJ,kBAAkB,CAACK,OAAO,KAAK,KAAK,EAAE;MACxCH,UAAU,CAAC,KAAK,CAAC;MACjBN,MAAM,IAAIA,MAAM,CAACQ,KAAK,CAAC;MACvB;MACAG,eAAe,CAACR,cAAc,CAACM,OAAQ,CAAC;;EAE5C,CAAC,EACD,CAACT,MAAM,CAAC,CACT;EACD,IAAMY,oBAAoB,GAAGX,SAAS;EAEtCZ,mBAAmB,CACjBO,GAAG,EACH;IAAM,OAAC;MACLiB,KAAK,EAAE;QAAM,uBAAgB,CAACV,cAAc,CAACM,OAAQ,EAAE,iBAAgB,aAAhBX,gBAAgB,uBAAhBA,gBAAgB,CAAEW,OAAO,KAAI,IAAI,CAAC;MAA5E;KACd;EAFK,CAEJ,EACF,CAACX,gBAAgB,CAAC,CACnB;EAED;EACAV,SAAS,CAAC;IACR;IACA,IAAI,CAACiB,SAAS,IAAID,kBAAkB,CAACK,OAAO,KAAK,IAAI,EAAE;MACrD;;IAGF;IACA;IACA,IAAMK,SAAS,GAAGC,UAAU,CAAC;MAC3BX,kBAAkB,CAACK,OAAO,GAAG,IAAI;MACjCP,YAAY,CAACO,OAAQ,CAACO,WAAW,CAACb,cAAc,CAACM,OAAQ,CAAC;MAC1DP,YAAY,CAACO,OAAQ,CAACQ,WAAW,CAACd,cAAc,CAACM,OAAQ,CAAC;MAC1DS,gBAAgB,CAACf,cAAc,CAACM,OAAQ,EAAE,iBAAgB,aAAhBX,gBAAgB,uBAAhBA,gBAAgB,CAAEW,OAAO,KAAI,IAAI,CAAC;IAC9E,CAAC,EAAE,CAAC,CAAC;IAEL,OAAO;MAAM,mBAAY,CAACK,SAAS,CAAC;IAAvB,CAAuB;EACtC,CAAC,EAAE,CAACT,SAAS,EAAER,gBAAgB,EAAEC,gBAAgB,CAAC,CAAC;EAEnD,OACEb;IAAGW,GAAG,EAAEM;EAAY,GAClBjB;IACEkC,SAAS,EAAE,KAAK;IAChBC,QAAQ,EAAE,CAAC,CAAC;IACZxB,GAAG,EAAEO,cAAc;IACnBJ,OAAO,EAAEQ,kBAAkB;IAC3BP,MAAM,EAAEU,iBAAiB;IACzBT,SAAS,EAAEW,oBAAoB;IAC/BS,SAAS,EAAE5B,MAAM,CAAC6B;EAAW,EAC1B,CACH;AAER;AAEA;AACA,SAASJ,gBAAgB,CAACK,GAAgB,EAAEC,MAA0B;EACpE;EACA,KAA4B,UAAsB,EAAtB7B,sBAAiB,CAAC4B,GAAG,CAAC,EAAtBE,cAAsB,EAAtBA,IAAsB,EAAE;IAA/C,IAAMC,aAAa;IACtB,IAAIA,aAAa,KAAK,MAAM,IAAIA,aAAa,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,MAAM,EAAE;MACpEJ,GAAG,CAACK,eAAe,CAACF,aAAa,CAAC;;;EAItC;EACA,IAAIF,MAAM,EAAE;IACV,KAA4B,UAAyB,EAAzBK,sBAAiB,CAACL,MAAM,CAAC,EAAzBM,cAAyB,EAAzBA,IAAyB,EAAE;MAAlD,IAAMJ,aAAa;MACtB,IAAIA,aAAa,KAAK,MAAM,IAAIA,aAAa,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,MAAM,EAAE;QACpE,IAAMI,cAAc,GAAGP,MAAM,CAACQ,YAAY,CAACN,aAAa,CAAC;QACzDK,cAAc,IAAIR,GAAG,CAACU,YAAY,CAACP,aAAa,EAAEK,cAAc,CAAC;;;;EAKvE;EACAR,GAAG,CAACH,QAAQ,GAAG,CAAC;EAChBG,GAAG,CAACU,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC;EACrCV,GAAG,CAACU,YAAY,CAAC,aAAa,EAAE,OAAO,CAAC;EAExC;EACAzC,eAAe,CAAC+B,GAAG,CAAC;AACtB;AAEA;AACA,SAASZ,eAAe,CAACY,GAAgB;EACvC;EACA,KAA4B,UAAsB,EAAtB5B,sBAAiB,CAAC4B,GAAG,CAAC,EAAtBE,cAAsB,EAAtBA,IAAsB,EAAE;IAA/C,IAAMC,aAAa;IACtB,IAAIA,aAAa,KAAK,MAAM,IAAIA,aAAa,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,MAAM,EAAE;MACpEJ,GAAG,CAACK,eAAe,CAACF,aAAa,CAAC;;;EAItC;EACAH,GAAG,CAACH,QAAQ,GAAG,CAAC,CAAC;EACjBG,GAAG,CAACU,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC;EACtCV,GAAG,CAACU,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;AACzC;AAEA;AACA;AACA,SAASC,iBAAiB,CAACC,OAAgB;EACzC,IAAMC,UAAU,GAAGD,OAAO,CAACC,UAAU;EACrC,IAAMC,MAAM,GAAG,IAAIC,KAAK,CAACF,UAAU,CAACG,MAAM,CAAC;EAC3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,CAACG,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC1CH,MAAM,CAACG,CAAC,CAAC,GAAGJ,UAAU,CAACI,CAAC,CAAC,CAACC,IAAI;;EAEhC,OAAOJ,MAAM;AACf","names":["React","forwardRef","useCallback","useEffect","useImperativeHandle","useRef","useState","focusSvgElement","styles","ApplicationController","_a","ref","activeElementKey","activeElementRef","onFocus","onBlur","onKeyDown","containerRef","applicationRef","focusTransitionRef","isFocused","setFocused","onApplicationFocus","event","current","onApplicationBlur","muteApplication","onApplicationKeyDown","focus","timeoutId","setTimeout","removeChild","appendChild","focusApplication","focusable","tabIndex","className","application","app","target","_i","attributeName","slice","removeAttribute","_c","_b","attributeValue","getAttribute","setAttribute","getAttributeNames","element","attributes","result","Array","length","i","name"],"sources":["/Users/dcastro/node_modules/src/internal/components/chart-plot/application-controller.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport focusSvgElement from '../../utils/focus-svg-element';\nimport styles from './styles.css.js';\n\nexport interface ApplicationRef {\n  focus(): void;\n}\n\nexport interface ApplicationControllerProps {\n  activeElementKey: null | string | number | boolean;\n  activeElementRef?: React.RefObject<SVGGElement>;\n  onFocus?: (event: React.FocusEvent<SVGGElement>) => void;\n  onBlur?: (event: React.FocusEvent<SVGGElement>) => void;\n  onKeyDown?: (event: React.KeyboardEvent<SVGGElement>) => void;\n}\n\nexport default forwardRef(ApplicationController);\n\nfunction ApplicationController(\n  { activeElementKey, activeElementRef, onFocus, onBlur, onKeyDown }: ApplicationControllerProps,\n  ref: React.Ref<ApplicationRef>\n) {\n  const containerRef = useRef<SVGGElement>(null);\n  const applicationRef = useRef<SVGGElement>(null);\n  const focusTransitionRef = useRef(false);\n  const [isFocused, setFocused] = useState(false);\n\n  // Calls provided onFocus handler when the application obtains focus, ignoring internal focus juggling.\n  const onApplicationFocus = useCallback(\n    (event: React.FocusEvent<SVGGElement>) => {\n      if (focusTransitionRef.current === false) {\n        setFocused(true);\n        onFocus && onFocus(event);\n      } else {\n        focusTransitionRef.current = false;\n      }\n    },\n    [onFocus]\n  );\n  // Calls provided onBlur handler when the application loses focus, ignoring internal focus juggling.\n  const onApplicationBlur = useCallback(\n    (event: React.FocusEvent<SVGGElement>) => {\n      if (focusTransitionRef.current === false) {\n        setFocused(false);\n        onBlur && onBlur(event);\n        // The application controller can only be focused programmatically.\n        muteApplication(applicationRef.current!);\n      }\n    },\n    [onBlur]\n  );\n  const onApplicationKeyDown = onKeyDown;\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: () => focusApplication(applicationRef.current!, activeElementRef?.current || null),\n    }),\n    [activeElementRef]\n  );\n\n  // Re-attaches and re-focuses the application for screen readers to treat it as an update.\n  useEffect(() => {\n    // Skip if not focused or if the transition is already happening.\n    if (!isFocused || focusTransitionRef.current === true) {\n      return;\n    }\n\n    // Delay focus juggle to let the last focus event settle in Firefox.\n    // Without the delay the focus is getting lost.\n    const timeoutId = setTimeout(() => {\n      focusTransitionRef.current = true;\n      containerRef.current!.removeChild(applicationRef.current!);\n      containerRef.current!.appendChild(applicationRef.current!);\n      focusApplication(applicationRef.current!, activeElementRef?.current || null);\n    }, 0);\n\n    return () => clearTimeout(timeoutId);\n  }, [isFocused, activeElementKey, activeElementRef]);\n\n  return (\n    <g ref={containerRef}>\n      <g\n        focusable={false}\n        tabIndex={-1}\n        ref={applicationRef}\n        onFocus={onApplicationFocus}\n        onBlur={onApplicationBlur}\n        onKeyDown={onApplicationKeyDown}\n        className={styles.application}\n      ></g>\n    </g>\n  );\n}\n\n// Focuses application but before copies aria-attributes from the target.\nfunction focusApplication(app: SVGGElement, target: null | SVGGElement) {\n  // Remove prev attributes.\n  for (const attributeName of getAttributeNames(app)) {\n    if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n      app.removeAttribute(attributeName);\n    }\n  }\n\n  // Copy new attributes.\n  if (target) {\n    for (const attributeName of getAttributeNames(target)) {\n      if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n        const attributeValue = target.getAttribute(attributeName);\n        attributeValue && app.setAttribute(attributeName, attributeValue);\n      }\n    }\n  }\n\n  // Make app focusable.\n  app.tabIndex = 0;\n  app.setAttribute('focusable', 'true');\n  app.setAttribute('aria-hidden', 'false');\n\n  // Focus app.\n  focusSvgElement(app);\n}\n\n// The application is to be only focused programmatically.\nfunction muteApplication(app: SVGGElement) {\n  // Remove prev attributes.\n  for (const attributeName of getAttributeNames(app)) {\n    if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n      app.removeAttribute(attributeName);\n    }\n  }\n\n  // Make app non-focusable.\n  app.tabIndex = -1;\n  app.setAttribute('focusable', 'false');\n  app.setAttribute('aria-hidden', 'true');\n}\n\n// Polyfill for element.getAttributeNames(), IE11\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames#polyfill\nfunction getAttributeNames(element: Element) {\n  const attributes = element.attributes;\n  const result = new Array(attributes.length);\n  for (let i = 0; i < attributes.length; i++) {\n    result[i] = attributes[i].name;\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}