{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef, useLayoutEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { getBaseProps } from '../../base-component';\nvar SelectableItem = function (_a, ref) {\n  var _b;\n  var content = _a.children,\n    ariaSelected = _a.ariaSelected,\n    ariaChecked = _a.ariaChecked,\n    selected = _a.selected,\n    highlighted = _a.highlighted,\n    disabled = _a.disabled,\n    hasBackground = _a.hasBackground,\n    isParent = _a.isParent,\n    isChild = _a.isChild,\n    virtualPosition = _a.virtualPosition,\n    padBottom = _a.padBottom,\n    isNextSelected = _a.isNextSelected,\n    useInteractiveGroups = _a.useInteractiveGroups,\n    screenReaderContent = _a.screenReaderContent,\n    ariaPosinset = _a.ariaPosinset,\n    ariaSetsize = _a.ariaSetsize,\n    highlightType = _a.highlightType,\n    restProps = __rest(_a, [\"children\", \"ariaSelected\", \"ariaChecked\", \"selected\", \"highlighted\", \"disabled\", \"hasBackground\", \"isParent\", \"isChild\", \"virtualPosition\", \"padBottom\", \"isNextSelected\", \"useInteractiveGroups\", \"screenReaderContent\", \"ariaPosinset\", \"ariaSetsize\", \"highlightType\"]);\n  var _c = getBaseProps(restProps),\n    className = _c.className,\n    rest = __rest(_c, [\"className\"]);\n  var classNames = clsx(className, styles['selectable-item'], (_b = {}, _b[styles.selected] = selected, _b[styles.highlighted] = highlighted, _b[styles['has-background']] = hasBackground, _b[styles.parent] = isParent, _b[styles.child] = isChild, _b[styles['is-keyboard']] = highlightType === 'keyboard', _b[styles.disabled] = disabled, _b[styles.virtual] = virtualPosition !== undefined, _b[styles['pad-bottom']] = padBottom, _b[styles['next-item-selected']] = isNextSelected, _b[styles.interactiveGroups] = useInteractiveGroups, _b));\n  var contentRef = useRef(null);\n  var screenReaderContentRef = useRef(null);\n  useLayoutEffect(function () {\n    // the state of aria-hidden and announcement is not set back because NVDA+Firefox would announce\n    // the item which lost highlight\n    // set aria-hidden true when there is announcement content, so that screen reader still announce\n    // meaningful content when navigate with screen reader cursor\n    // imperatively update to avoid announcement made multiple times when content updates\n    if (highlighted && screenReaderContent) {\n      if (contentRef.current) {\n        contentRef.current.setAttribute('aria-hidden', 'true');\n      }\n      if (screenReaderContentRef.current) {\n        screenReaderContentRef.current.textContent = screenReaderContent;\n      }\n    }\n  }, [highlighted, screenReaderContent, contentRef, screenReaderContentRef]);\n  var style = virtualPosition !== undefined ? {\n    transform: \"translateY(\".concat(virtualPosition, \"px)\")\n  } : undefined;\n  var a11yProperties = {\n    'aria-disabled': disabled\n  };\n  if (isParent && !useInteractiveGroups) {\n    a11yProperties['aria-hidden'] = true;\n  }\n  if (ariaSelected !== undefined) {\n    a11yProperties['aria-selected'] = ariaSelected;\n  }\n  // Safari+VO needs aria-checked for multi-selection. Otherwise it only announces selected option even though another option is highlighted.\n  if (ariaChecked !== undefined) {\n    a11yProperties['aria-checked'] = ariaChecked;\n  }\n  if (ariaPosinset && ariaSetsize) {\n    a11yProperties['aria-posinset'] = ariaPosinset;\n    a11yProperties['aria-setsize'] = ariaSetsize;\n  }\n  return React.createElement(\"li\", __assign({\n    role: \"option\",\n    className: classNames,\n    style: style\n  }, a11yProperties, rest), React.createElement(\"div\", {\n    className: styles['option-content'],\n    ref: contentRef\n  }, content), React.createElement(\"div\", {\n    className: styles['measure-strut'],\n    ref: ref\n  }), React.createElement(\"div\", {\n    className: styles['screenreader-content'],\n    ref: screenReaderContentRef\n  }));\n};\nexport default React.forwardRef(SelectableItem);","map":{"version":3,"mappings":"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","names":["React","useRef","useLayoutEffect","clsx","styles","getBaseProps","SelectableItem","_a","ref","content","ariaSelected","ariaChecked","selected","highlighted","disabled","hasBackground","isParent","isChild","virtualPosition","padBottom","isNextSelected","useInteractiveGroups","screenReaderContent","ariaPosinset","ariaSetsize","highlightType","restProps","_c","className","rest","classNames","_b","parent","child","virtual","undefined","interactiveGroups","contentRef","screenReaderContentRef","current","setAttribute","textContent","style","transform","a11yProperties","role","forwardRef"],"sources":["/Users/dcastro/node_modules/src/internal/components/selectable-item/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef, useLayoutEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { BaseComponentProps, getBaseProps } from '../../base-component';\nimport { HighlightType } from '../options-list/utils/use-highlight-option.js';\n\nexport type SelectableItemProps = BaseComponentProps & {\n  children: React.ReactNode;\n  selected?: boolean;\n  highlighted?: boolean;\n  disabled?: boolean;\n  hasBackground?: boolean;\n  isParent?: boolean;\n  isChild?: boolean;\n  virtualPosition?: number;\n  padBottom?: boolean;\n  isNextSelected?: boolean;\n  useInteractiveGroups?: boolean;\n  screenReaderContent?: string;\n  ariaPosinset?: number;\n  ariaSetsize?: number;\n  highlightType?: HighlightType;\n} & ({ ariaSelected?: boolean; ariaChecked?: never } | { ariaSelected?: never; ariaChecked?: boolean | 'mixed' });\n\nconst SelectableItem = (\n  {\n    children: content,\n    ariaSelected,\n    ariaChecked,\n    selected,\n    highlighted,\n    disabled,\n    hasBackground,\n    isParent,\n    isChild,\n    virtualPosition,\n    padBottom,\n    isNextSelected,\n    useInteractiveGroups,\n    screenReaderContent,\n    ariaPosinset,\n    ariaSetsize,\n    highlightType,\n    ...restProps\n  }: SelectableItemProps,\n  ref: React.Ref<HTMLDivElement>\n) => {\n  const { className, ...rest } = getBaseProps(restProps);\n  const classNames = clsx(className, styles['selectable-item'], {\n    [styles.selected]: selected,\n    [styles.highlighted]: highlighted,\n    [styles['has-background']]: hasBackground,\n    [styles.parent]: isParent,\n    [styles.child]: isChild,\n    [styles['is-keyboard']]: highlightType === 'keyboard',\n    [styles.disabled]: disabled,\n    [styles.virtual]: virtualPosition !== undefined,\n    [styles['pad-bottom']]: padBottom,\n    [styles['next-item-selected']]: isNextSelected,\n    [styles.interactiveGroups]: useInteractiveGroups,\n  });\n\n  const contentRef = useRef<HTMLDivElement>(null);\n  const screenReaderContentRef = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // the state of aria-hidden and announcement is not set back because NVDA+Firefox would announce\n    // the item which lost highlight\n    // set aria-hidden true when there is announcement content, so that screen reader still announce\n    // meaningful content when navigate with screen reader cursor\n    // imperatively update to avoid announcement made multiple times when content updates\n    if (highlighted && screenReaderContent) {\n      if (contentRef.current) {\n        contentRef.current.setAttribute('aria-hidden', 'true');\n      }\n      if (screenReaderContentRef.current) {\n        screenReaderContentRef.current.textContent = screenReaderContent;\n      }\n    }\n  }, [highlighted, screenReaderContent, contentRef, screenReaderContentRef]);\n\n  const style =\n    virtualPosition !== undefined\n      ? {\n          transform: `translateY(${virtualPosition}px)`,\n        }\n      : undefined;\n\n  const a11yProperties: Record<string, string | number | boolean | undefined> = {\n    'aria-disabled': disabled,\n  };\n\n  if (isParent && !useInteractiveGroups) {\n    a11yProperties['aria-hidden'] = true;\n  }\n\n  if (ariaSelected !== undefined) {\n    a11yProperties['aria-selected'] = ariaSelected;\n  }\n\n  // Safari+VO needs aria-checked for multi-selection. Otherwise it only announces selected option even though another option is highlighted.\n  if (ariaChecked !== undefined) {\n    a11yProperties['aria-checked'] = ariaChecked;\n  }\n\n  if (ariaPosinset && ariaSetsize) {\n    a11yProperties['aria-posinset'] = ariaPosinset;\n    a11yProperties['aria-setsize'] = ariaSetsize;\n  }\n\n  return (\n    <li role=\"option\" className={classNames} style={style} {...a11yProperties} {...rest}>\n      <div className={styles['option-content']} ref={contentRef}>\n        {content}\n      </div>\n      <div className={styles['measure-strut']} ref={ref} />\n      <div className={styles['screenreader-content']} ref={screenReaderContentRef}></div>\n    </li>\n  );\n};\n\nexport default React.forwardRef(SelectableItem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}