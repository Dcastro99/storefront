{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport InternalIcon from '../../icon/internal';\nimport ItemsList from '../items-list';\nimport MobileExpandableGroup from '../mobile-expandable-group/mobile-expandable-group';\nimport Tooltip from '../tooltip.js';\nimport useHiddenDescription from '../utils/use-hidden-description.js';\nimport { getMenuItemProps } from '../utils/menu-item.js';\nvar MobileExpandableCategoryElement = function (_a) {\n  var _b, _c, _d;\n  var item = _a.item,\n    onItemActivate = _a.onItemActivate,\n    onGroupToggle = _a.onGroupToggle,\n    targetItem = _a.targetItem,\n    isHighlighted = _a.isHighlighted,\n    isKeyboardHighlight = _a.isKeyboardHighlight,\n    isExpanded = _a.isExpanded,\n    highlightItem = _a.highlightItem,\n    disabled = _a.disabled,\n    variant = _a.variant;\n  var highlighted = isHighlighted(item);\n  var expanded = isExpanded(item);\n  var isKeyboardHighlighted = isKeyboardHighlight(item);\n  var triggerRef = React.useRef(null);\n  useEffect(function () {\n    if (triggerRef.current && highlighted && !expanded) {\n      triggerRef.current.focus();\n    }\n  }, [expanded, highlighted]);\n  var onClick = function (e) {\n    if (!disabled) {\n      e.preventDefault();\n      onGroupToggle(item, e);\n    }\n  };\n  var onHover = function (event) {\n    event.preventDefault();\n    highlightItem(item);\n  };\n  var isDisabledWithReason = !!item.disabledReason && item.disabled;\n  var _e = useHiddenDescription(item.disabledReason),\n    targetProps = _e.targetProps,\n    descriptionEl = _e.descriptionEl;\n  var trigger = item.text && React.createElement(\"span\", __assign({\n    className: clsx(styles.header, styles['expandable-header'], styles[\"variant-\".concat(variant)], (_b = {}, _b[styles.highlighted] = highlighted, _b[styles['rolled-down']] = expanded, _b[styles.disabled] = disabled, _b[styles['is-focused']] = isKeyboardHighlighted, _b)),\n    // We are using the roving tabindex technique to manage the focus state of the dropdown.\n    // The current element will always have tabindex=0 which means that it can be tabbed to,\n    // while all other items have tabindex=-1 so we can focus them when necessary.\n    tabIndex: highlighted ? 0 : -1,\n    ref: triggerRef\n  }, getMenuItemProps({\n    parent: true,\n    disabled: disabled,\n    expanded: expanded\n  }), isDisabledWithReason ? targetProps : {}), item.text, React.createElement(\"span\", {\n    className: clsx(styles['expand-icon'], (_c = {}, _c[styles['expand-icon-up']] = expanded, _c))\n  }, React.createElement(InternalIcon, {\n    name: \"caret-down-filled\"\n  })));\n  var content;\n  if (isDisabledWithReason) {\n    content = React.createElement(React.Fragment, null, descriptionEl, React.createElement(Tooltip, {\n      content: item.disabledReason\n    }, trigger));\n  } else if (disabled) {\n    content = trigger;\n  } else {\n    content = React.createElement(MobileExpandableGroup, {\n      open: expanded,\n      trigger: trigger\n    }, item.items && expanded && React.createElement(\"ul\", {\n      role: \"menu\",\n      \"aria-label\": item.text,\n      className: clsx(styles['items-list-container'])\n    }, React.createElement(ItemsList, {\n      items: item.items,\n      onItemActivate: onItemActivate,\n      onGroupToggle: onGroupToggle,\n      targetItem: targetItem,\n      isHighlighted: isHighlighted,\n      isKeyboardHighlight: isKeyboardHighlight,\n      isExpanded: isExpanded,\n      highlightItem: highlightItem,\n      hasCategoryHeader: true,\n      variant: variant\n    })));\n  }\n  return React.createElement(\"li\", {\n    className: clsx(styles.category, styles[\"variant-\".concat(variant)], styles.expandable, (_d = {}, _d[styles.expanded] = expanded, _d[styles.disabled] = disabled, _d[styles.highlighted] = highlighted || expanded, _d[styles.expandable] = true, _d)),\n    role: \"presentation\",\n    onClick: onClick,\n    onMouseEnter: onHover,\n    onTouchStart: onHover,\n    \"data-testid\": item.id\n  }, content);\n};\nexport default MobileExpandableCategoryElement;","map":{"version":3,"mappings":"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","names":["React","useEffect","clsx","styles","InternalIcon","ItemsList","MobileExpandableGroup","Tooltip","useHiddenDescription","getMenuItemProps","MobileExpandableCategoryElement","_a","item","onItemActivate","onGroupToggle","targetItem","isHighlighted","isKeyboardHighlight","isExpanded","highlightItem","disabled","variant","highlighted","expanded","isKeyboardHighlighted","triggerRef","useRef","current","focus","onClick","e","preventDefault","onHover","event","isDisabledWithReason","disabledReason","targetProps","descriptionEl","trigger","text","className","header","_b","tabIndex","ref","parent","_c","name","content","open","items","role","hasCategoryHeader","category","expandable","_d","onMouseEnter","onTouchStart","id"],"sources":["/Users/dcastro/node_modules/src/button-dropdown/category-elements/mobile-expandable-category-element.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\n\nimport InternalIcon from '../../icon/internal';\nimport ItemsList from '../items-list';\nimport MobileExpandableGroup from '../mobile-expandable-group/mobile-expandable-group';\nimport { CategoryProps } from '../interfaces';\nimport Tooltip from '../tooltip.js';\nimport useHiddenDescription from '../utils/use-hidden-description.js';\nimport { getMenuItemProps } from '../utils/menu-item.js';\n\nconst MobileExpandableCategoryElement = ({\n  item,\n  onItemActivate,\n  onGroupToggle,\n  targetItem,\n  isHighlighted,\n  isKeyboardHighlight,\n  isExpanded,\n  highlightItem,\n  disabled,\n  variant,\n}: CategoryProps) => {\n  const highlighted = isHighlighted(item);\n  const expanded = isExpanded(item);\n  const isKeyboardHighlighted = isKeyboardHighlight(item);\n  const triggerRef = React.useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    if (triggerRef.current && highlighted && !expanded) {\n      triggerRef.current.focus();\n    }\n  }, [expanded, highlighted]);\n\n  const onClick = (e: React.MouseEvent) => {\n    if (!disabled) {\n      e.preventDefault();\n      onGroupToggle(item, e);\n    }\n  };\n\n  const onHover = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    highlightItem(item);\n  };\n\n  const isDisabledWithReason = !!item.disabledReason && item.disabled;\n  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);\n  const trigger = item.text && (\n    <span\n      className={clsx(styles.header, styles['expandable-header'], styles[`variant-${variant}`], {\n        [styles.highlighted]: highlighted,\n        [styles['rolled-down']]: expanded,\n        [styles.disabled]: disabled,\n        [styles['is-focused']]: isKeyboardHighlighted,\n      })}\n      // We are using the roving tabindex technique to manage the focus state of the dropdown.\n      // The current element will always have tabindex=0 which means that it can be tabbed to,\n      // while all other items have tabindex=-1 so we can focus them when necessary.\n      tabIndex={highlighted ? 0 : -1}\n      ref={triggerRef}\n      {...getMenuItemProps({ parent: true, disabled, expanded })}\n      {...(isDisabledWithReason ? targetProps : {})}\n    >\n      {item.text}\n      <span\n        className={clsx(styles['expand-icon'], {\n          [styles['expand-icon-up']]: expanded,\n        })}\n      >\n        <InternalIcon name=\"caret-down-filled\" />\n      </span>\n    </span>\n  );\n\n  let content: React.ReactNode;\n\n  if (isDisabledWithReason) {\n    content = (\n      <>\n        {descriptionEl}\n        <Tooltip content={item.disabledReason}>{trigger}</Tooltip>\n      </>\n    );\n  } else if (disabled) {\n    content = trigger;\n  } else {\n    content = (\n      <MobileExpandableGroup open={expanded} trigger={trigger}>\n        {item.items && expanded && (\n          <ul role=\"menu\" aria-label={item.text} className={clsx(styles['items-list-container'])}>\n            <ItemsList\n              items={item.items}\n              onItemActivate={onItemActivate}\n              onGroupToggle={onGroupToggle}\n              targetItem={targetItem}\n              isHighlighted={isHighlighted}\n              isKeyboardHighlight={isKeyboardHighlight}\n              isExpanded={isExpanded}\n              highlightItem={highlightItem}\n              hasCategoryHeader={true}\n              variant={variant}\n            />\n          </ul>\n        )}\n      </MobileExpandableGroup>\n    );\n  }\n\n  return (\n    <li\n      className={clsx(styles.category, styles[`variant-${variant}`], styles.expandable, {\n        [styles.expanded]: expanded,\n        [styles.disabled]: disabled,\n        [styles.highlighted]: highlighted || expanded,\n        [styles.expandable]: true,\n      })}\n      role=\"presentation\"\n      onClick={onClick}\n      onMouseEnter={onHover}\n      onTouchStart={onHover}\n      data-testid={item.id}\n    >\n      {content}\n    </li>\n  );\n};\n\nexport default MobileExpandableCategoryElement;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}