{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Extracts timezone offset from ISO8601 date string.\n */\nexport function parseTimezoneOffset(isoDate) {\n  var _a = isoDate.split('T'),\n    _b = _a[1],\n    time = _b === void 0 ? '' : _b;\n  var _c = time.split(/(-|\\+)/),\n    signCharacter = _c[1],\n    offsetPart = _c[2];\n  if (signCharacter && offsetPart) {\n    var _d = offsetPart.split(':'),\n      offsetHours = _d[0],\n      offsetMinutes = _d[1];\n    return Number(signCharacter + '1') * (Number(offsetHours) * 60 + Number(offsetMinutes));\n  }\n  var utcTimezoneIndicator = isoDate.indexOf('Z');\n  if (utcTimezoneIndicator !== -1) {\n    return 0;\n  }\n  var date = new Date(isoDate);\n  return 0 - date.getTimezoneOffset();\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA;;;AAGA,OAAM,SAAUA,mBAAmB,CAACC,OAAe;EAC3C,SAAgBA,OAAO,CAACC,KAAK,CAAC,GAAG,CAAC;IAA/BC,UAAS;IAATC,IAAI,mBAAG,EAAE,KAAsB;EAClC,SAAgCA,IAAI,CAACF,KAAK,CAAC,QAAQ,CAAC;IAAjDG,aAAa;IAAEC,UAAU,QAAwB;EAE1D,IAAID,aAAa,IAAIC,UAAU,EAAE;IACzB,SAA+BA,UAAU,CAACJ,KAAK,CAAC,GAAG,CAAC;MAAnDK,WAAW;MAAEC,aAAa,QAAyB;IAC1D,OAAOC,MAAM,CAACJ,aAAa,GAAG,GAAG,CAAC,IAAII,MAAM,CAACF,WAAW,CAAC,GAAG,EAAE,GAAGE,MAAM,CAACD,aAAa,CAAC,CAAC;;EAGzF,IAAME,oBAAoB,GAAGT,OAAO,CAACU,OAAO,CAAC,GAAG,CAAC;EACjD,IAAID,oBAAoB,KAAK,CAAC,CAAC,EAAE;IAC/B,OAAO,CAAC;;EAGV,IAAME,IAAI,GAAG,IAAIC,IAAI,CAACZ,OAAO,CAAC;EAC9B,OAAO,CAAC,GAAGW,IAAI,CAACE,iBAAiB,EAAE;AACrC","names":["parseTimezoneOffset","isoDate","split","_b","time","signCharacter","offsetPart","offsetHours","offsetMinutes","Number","utcTimezoneIndicator","indexOf","date","Date","getTimezoneOffset"],"sources":["/Users/dcastro/node_modules/src/internal/utils/date-time/parse-timezone-offset.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Extracts timezone offset from ISO8601 date string.\n */\nexport function parseTimezoneOffset(isoDate: string): number {\n  const [, time = ''] = isoDate.split('T');\n  const [, signCharacter, offsetPart] = time.split(/(-|\\+)/);\n\n  if (signCharacter && offsetPart) {\n    const [offsetHours, offsetMinutes] = offsetPart.split(':');\n    return Number(signCharacter + '1') * (Number(offsetHours) * 60 + Number(offsetMinutes));\n  }\n\n  const utcTimezoneIndicator = isoDate.indexOf('Z');\n  if (utcTimezoneIndicator !== -1) {\n    return 0;\n  }\n\n  const date = new Date(isoDate);\n  return 0 - date.getTimezoneOffset();\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}