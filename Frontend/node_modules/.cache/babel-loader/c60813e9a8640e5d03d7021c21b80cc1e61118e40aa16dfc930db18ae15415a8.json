{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback } from 'react';\nimport InternalIcon from '../icon/internal';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport styles from './styles.css.js';\nvar SelectToggle = function (_a) {\n  var controlId = _a.controlId,\n    allHidden = _a.allHidden,\n    expanded = _a.expanded,\n    numberOfHiddenOptions = _a.numberOfHiddenOptions,\n    onClick = _a.onClick,\n    _b = _a.i18nStrings,\n    i18nStrings = _b === void 0 ? {} : _b;\n  var focusVisible = useFocusVisible();\n  var numberOfHiddenOptionLabel = allHidden ? numberOfHiddenOptions : \"+\".concat(numberOfHiddenOptions);\n  var description = expanded ? i18nStrings.limitShowFewer : \"\".concat(i18nStrings.limitShowMore || '', \" (\").concat(numberOfHiddenOptionLabel, \")\");\n  var handleClick = useCallback(function () {\n    fireNonCancelableEvent(onClick, null);\n  }, [onClick]);\n  return React.createElement(\"button\", __assign({\n    type: \"button\",\n    className: styles.toggle,\n    onClick: handleClick,\n    \"aria-controls\": controlId,\n    \"aria-expanded\": expanded\n  }, focusVisible), React.createElement(InternalIcon, {\n    name: expanded ? 'treeview-collapse' : 'treeview-expand'\n  }), React.createElement(\"span\", {\n    className: styles.description\n  }, description));\n};\nexport default SelectToggle;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,eAAe,MAAM,iCAAiC;AAC7D,SAAoCC,sBAAsB,QAAQ,oBAAoB;AAGtF,OAAOC,MAAM,MAAM,iBAAiB;AAUpC,IAAMC,YAAY,GAAG,UAACC,EAOF;MANlBC,SAAS;IACTC,SAAS;IACTC,QAAQ;IACRC,qBAAqB;IACrBC,OAAO;IACPC,mBAAgB;IAAhBC,WAAW,mBAAG,EAAE;EAEhB,IAAMC,YAAY,GAAGZ,eAAe,EAAE;EACtC,IAAMa,yBAAyB,GAAGP,SAAS,GAAGE,qBAAqB,GAAG,WAAIA,qBAAqB,CAAE;EACjG,IAAMM,WAAW,GAAGP,QAAQ,GACxBI,WAAW,CAACI,cAAc,GAC1B,UAAGJ,WAAW,CAACK,aAAa,IAAI,EAAE,eAAKH,yBAAyB,MAAG;EAEvE,IAAMI,WAAW,GAAGnB,WAAW,CAAC;IAC9BG,sBAAsB,CAACQ,OAAO,EAAE,IAAI,CAAC;EACvC,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,OACEZ;IACEqB,IAAI,EAAC,QAAQ;IACbC,SAAS,EAAEjB,MAAM,CAACkB,MAAM;IACxBX,OAAO,EAAEQ,WAAW;IAAA,iBACLZ,SAAS;IAAA,iBACTE;EAAQ,GACnBK,YAAY,GAEhBf,oBAACE,YAAY;IAACsB,IAAI,EAAEd,QAAQ,GAAG,mBAAmB,GAAG;EAAiB,EAAI,EAC1EV;IAAMsB,SAAS,EAAEjB,MAAM,CAACY;EAAW,GAAGA,WAAW,CAAQ,CAClD;AAEb,CAAC;AAED,eAAeX,YAAY","names":["React","useCallback","InternalIcon","useFocusVisible","fireNonCancelableEvent","styles","SelectToggle","_a","controlId","allHidden","expanded","numberOfHiddenOptions","onClick","_b","i18nStrings","focusVisible","numberOfHiddenOptionLabel","description","limitShowFewer","limitShowMore","handleClick","type","className","toggle","name"],"sources":["/Users/dcastro/node_modules/src/token-group/toggle.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback } from 'react';\nimport InternalIcon from '../icon/internal';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { NonCancelableEventHandler, fireNonCancelableEvent } from '../internal/events';\n\nimport { TokenGroupProps } from './interfaces';\nimport styles from './styles.css.js';\nexport interface SelectToggleProps {\n  controlId: string;\n  allHidden: boolean;\n  expanded: boolean;\n  numberOfHiddenOptions: number;\n  onClick?: NonCancelableEventHandler<null>;\n  i18nStrings?: Pick<TokenGroupProps.I18nStrings, 'limitShowFewer' | 'limitShowMore'>;\n}\n\nconst SelectToggle = ({\n  controlId,\n  allHidden,\n  expanded,\n  numberOfHiddenOptions,\n  onClick,\n  i18nStrings = {},\n}: SelectToggleProps) => {\n  const focusVisible = useFocusVisible();\n  const numberOfHiddenOptionLabel = allHidden ? numberOfHiddenOptions : `+${numberOfHiddenOptions}`;\n  const description = expanded\n    ? i18nStrings.limitShowFewer\n    : `${i18nStrings.limitShowMore || ''} (${numberOfHiddenOptionLabel})`;\n\n  const handleClick = useCallback(() => {\n    fireNonCancelableEvent(onClick, null);\n  }, [onClick]);\n\n  return (\n    <button\n      type=\"button\"\n      className={styles.toggle}\n      onClick={handleClick}\n      aria-controls={controlId}\n      aria-expanded={expanded}\n      {...focusVisible}\n    >\n      <InternalIcon name={expanded ? 'treeview-collapse' : 'treeview-expand'} />\n      <span className={styles.description}>{description}</span>\n    </button>\n  );\n};\n\nexport default SelectToggle;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}