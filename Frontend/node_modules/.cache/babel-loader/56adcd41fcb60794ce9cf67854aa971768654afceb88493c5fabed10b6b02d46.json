{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport Item from '../parts/item';\nimport MutliselectItem from '../parts/multiselect-item';\nimport { getItemProps } from './get-item-props';\nexport var renderOptions = function (_a) {\n  var options = _a.options,\n    getOptionProps = _a.getOptionProps,\n    filteringValue = _a.filteringValue,\n    highlightType = _a.highlightType,\n    _b = _a.checkboxes,\n    checkboxes = _b === void 0 ? false : _b,\n    hasDropdownStatus = _a.hasDropdownStatus,\n    virtualItems = _a.virtualItems,\n    useInteractiveGroups = _a.useInteractiveGroups,\n    screenReaderContent = _a.screenReaderContent,\n    ariaSetsize = _a.ariaSetsize;\n  return options.map(function (option, index) {\n    var virtualItem = virtualItems && virtualItems[index];\n    var globalIndex = virtualItem ? virtualItem.index : index;\n    var props = getItemProps({\n      option: option,\n      index: globalIndex,\n      getOptionProps: getOptionProps,\n      filteringValue: filteringValue,\n      checkboxes: checkboxes\n    });\n    var isLastItem = index === options.length - 1;\n    var padBottom = !hasDropdownStatus && isLastItem;\n    var ListItem = useInteractiveGroups ? MutliselectItem : Item;\n    return React.createElement(ListItem, __assign({\n      key: globalIndex\n    }, props, {\n      virtualPosition: virtualItem && virtualItem.start,\n      ref: virtualItem && virtualItem.measureRef,\n      padBottom: padBottom,\n      screenReaderContent: screenReaderContent,\n      ariaPosinset: globalIndex + 1,\n      ariaSetsize: ariaSetsize,\n      highlightType: highlightType\n    }));\n  });\n};","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,IAAI,MAAM,eAAe;AAChC,OAAOC,eAAe,MAAM,2BAA2B;AAEvD,SAASC,YAAY,QAAQ,kBAAkB;AAgB/C,OAAO,IAAMC,aAAa,GAAG,UAACC,EAWV;MAVlBC,OAAO;IACPC,cAAc;IACdC,cAAc;IACdC,aAAa;IACbC,kBAAkB;IAAlBC,UAAU,mBAAG,KAAK;IAClBC,iBAAiB;IACjBC,YAAY;IACZC,oBAAoB;IACpBC,mBAAmB;IACnBC,WAAW;EAEX,OAAOV,OAAO,CAACW,GAAG,CAAC,UAACC,MAAM,EAAEC,KAAK;IAC/B,IAAMC,WAAW,GAAGP,YAAY,IAAIA,YAAY,CAACM,KAAK,CAAC;IACvD,IAAME,WAAW,GAAGD,WAAW,GAAGA,WAAW,CAACD,KAAK,GAAGA,KAAK;IAC3D,IAAMG,KAAK,GAAGnB,YAAY,CAAC;MACzBe,MAAM;MACNC,KAAK,EAAEE,WAAW;MAClBd,cAAc;MACdC,cAAc;MACdG,UAAU;KACX,CAAC;IAEF,IAAMY,UAAU,GAAGJ,KAAK,KAAKb,OAAO,CAACkB,MAAM,GAAG,CAAC;IAC/C,IAAMC,SAAS,GAAG,CAACb,iBAAiB,IAAIW,UAAU;IAClD,IAAMG,QAAQ,GAAGZ,oBAAoB,GAAGZ,eAAe,GAAGD,IAAI;IAE9D,OACED,oBAAC0B,QAAQ;MACPC,GAAG,EAAEN;IAAW,GACZC,KAAK;MACTM,eAAe,EAAER,WAAW,IAAIA,WAAW,CAACS,KAAK;MACjDC,GAAG,EAAEV,WAAW,IAAIA,WAAW,CAACW,UAAU;MAC1CN,SAAS,EAAEA,SAAS;MACpBV,mBAAmB,EAAEA,mBAAmB;MACxCiB,YAAY,EAAEX,WAAW,GAAG,CAAC;MAC7BL,WAAW,EAAEA,WAAW;MACxBP,aAAa,EAAEA;IAAa,GAC5B;EAEN,CAAC,CAAC;AACJ,CAAC","names":["React","Item","MutliselectItem","getItemProps","renderOptions","_a","options","getOptionProps","filteringValue","highlightType","_b","checkboxes","hasDropdownStatus","virtualItems","useInteractiveGroups","screenReaderContent","ariaSetsize","map","option","index","virtualItem","globalIndex","props","isLastItem","length","padBottom","ListItem","key","virtualPosition","start","ref","measureRef","ariaPosinset"],"sources":["/Users/dcastro/node_modules/src/select/utils/render-options.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { VirtualItem } from 'react-virtual';\nimport Item from '../parts/item';\nimport MutliselectItem from '../parts/multiselect-item';\nimport { DropdownOption } from '../../internal/components/option/interfaces';\nimport { getItemProps } from './get-item-props';\nimport { HighlightType } from '../../internal/components/options-list/utils/use-highlight-option';\n\nexport interface RenderOptionProps {\n  options: ReadonlyArray<DropdownOption>;\n  getOptionProps: any;\n  filteringValue: string;\n  highlightType: HighlightType;\n  checkboxes?: boolean;\n  hasDropdownStatus?: boolean;\n  virtualItems?: VirtualItem[];\n  useInteractiveGroups?: boolean;\n  screenReaderContent?: string;\n  ariaSetsize?: number;\n}\n\nexport const renderOptions = ({\n  options,\n  getOptionProps,\n  filteringValue,\n  highlightType,\n  checkboxes = false,\n  hasDropdownStatus,\n  virtualItems,\n  useInteractiveGroups,\n  screenReaderContent,\n  ariaSetsize,\n}: RenderOptionProps) => {\n  return options.map((option, index) => {\n    const virtualItem = virtualItems && virtualItems[index];\n    const globalIndex = virtualItem ? virtualItem.index : index;\n    const props = getItemProps({\n      option,\n      index: globalIndex,\n      getOptionProps,\n      filteringValue,\n      checkboxes,\n    });\n\n    const isLastItem = index === options.length - 1;\n    const padBottom = !hasDropdownStatus && isLastItem;\n    const ListItem = useInteractiveGroups ? MutliselectItem : Item;\n\n    return (\n      <ListItem\n        key={globalIndex}\n        {...props}\n        virtualPosition={virtualItem && virtualItem.start}\n        ref={virtualItem && virtualItem.measureRef}\n        padBottom={padBottom}\n        screenReaderContent={screenReaderContent}\n        ariaPosinset={globalIndex + 1}\n        ariaSetsize={ariaSetsize}\n        highlightType={highlightType}\n      />\n    );\n  });\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}