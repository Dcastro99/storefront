{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport defaultOptionDescription from '../../internal/components/option/option-announcer';\n/**\n * The hook produces the live region string to be announced when an option is highlighted.\n * This is a workaround to account for the issues with assistive technologies.\n *\n * If the testing reveals no issues with the native announcements the live-region can be removed.\n */\nexport function useAnnouncement(_a) {\n  var announceSelected = _a.announceSelected,\n    highlightedOption = _a.highlightedOption,\n    getParent = _a.getParent,\n    selectedAriaLabel = _a.selectedAriaLabel,\n    renderHighlightedAriaLive = _a.renderHighlightedAriaLive;\n  var prevAnnouncedGroup = useRef(undefined);\n  // Record previously announced group with a delay to account for possible re-renders of the hook.\n  useEffect(function () {\n    if (highlightedOption) {\n      var frameId_1 = requestAnimationFrame(function () {\n        prevAnnouncedGroup.current = getParent(highlightedOption);\n      });\n      return function () {\n        return cancelAnimationFrame(frameId_1);\n      };\n    }\n  });\n  if (!highlightedOption) {\n    return '';\n  }\n  var option = highlightedOption.option;\n  var parent = getParent(highlightedOption);\n  // Only announce parent group if it wasn't announced with previous option.\n  var group = parent && parent !== prevAnnouncedGroup.current ? parent : undefined;\n  // Use custom renderer if provided.\n  if (renderHighlightedAriaLive) {\n    return renderHighlightedAriaLive(option, group);\n  }\n  // Use default renderer with selected ARIA label if defined and relevant.\n  var selectedPrefix = announceSelected && selectedAriaLabel ? selectedAriaLabel : '';\n  var defaultDescription = defaultOptionDescription(option, group);\n  return [selectedPrefix, defaultDescription].filter(Boolean).join(' ');\n}","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,wBAAwB,MAAM,mDAAmD;AAMxF;;;;;;AAMA,OAAM,SAAUC,eAAe,CAA8BC,EAY5D;MAXCC,gBAAgB;IAChBC,iBAAiB;IACjBC,SAAS;IACTC,iBAAiB;IACjBC,yBAAyB;EAQzB,IAAMC,kBAAkB,GAAGT,MAAM,CAA0BU,SAAS,CAAC;EAErE;EACAX,SAAS,CAAC;IACR,IAAIM,iBAAiB,EAAE;MACrB,IAAMM,SAAO,GAAGC,qBAAqB,CAAC;QACpCH,kBAAkB,CAACI,OAAO,GAAGP,SAAS,CAACD,iBAAiB,CAAC;MAC3D,CAAC,CAAC;MACF,OAAO;QAAM,2BAAoB,CAACM,SAAO,CAAC;MAA7B,CAA6B;;EAE9C,CAAC,CAAC;EAEF,IAAI,CAACN,iBAAiB,EAAE;IACtB,OAAO,EAAE;;EAGX,IAAMS,MAAM,GAAGT,iBAAiB,CAACS,MAA0B;EAC3D,IAAMC,MAAM,GAAGT,SAAS,CAACD,iBAAiB,CAAC;EAC3C;EACA,IAAMW,KAAK,GAAGD,MAAM,IAAIA,MAAM,KAAKN,kBAAkB,CAACI,OAAO,GAAGE,MAAM,GAAGL,SAAS;EAElF;EACA,IAAIF,yBAAyB,EAAE;IAC7B,OAAOA,yBAAyB,CAACM,MAAM,EAAEE,KAAK,CAAC;;EAGjD;EACA,IAAMC,cAAc,GAAGb,gBAAgB,IAAIG,iBAAiB,GAAGA,iBAAiB,GAAG,EAAE;EACrF,IAAMW,kBAAkB,GAAGjB,wBAAwB,CAACa,MAAM,EAAEE,KAAK,CAAC;EAClE,OAAO,CAACC,cAAc,EAAEC,kBAAkB,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;AACvE","names":["useEffect","useRef","defaultOptionDescription","useAnnouncement","_a","announceSelected","highlightedOption","getParent","selectedAriaLabel","renderHighlightedAriaLive","prevAnnouncedGroup","undefined","frameId_1","requestAnimationFrame","current","option","parent","group","selectedPrefix","defaultDescription","filter","Boolean","join"],"sources":["/Users/dcastro/node_modules/src/select/utils/use-announcement.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { OptionDefinition, OptionGroup } from '../../internal/components/option/interfaces';\nimport { SelectProps } from '../interfaces';\nimport { useEffect, useRef } from 'react';\nimport defaultOptionDescription from '../../internal/components/option/option-announcer';\n\ninterface OptionHolder {\n  option?: OptionDefinition | OptionGroup;\n}\n\n/**\n * The hook produces the live region string to be announced when an option is highlighted.\n * This is a workaround to account for the issues with assistive technologies.\n *\n * If the testing reveals no issues with the native announcements the live-region can be removed.\n */\nexport function useAnnouncement<Option extends OptionHolder>({\n  announceSelected,\n  highlightedOption,\n  getParent,\n  selectedAriaLabel,\n  renderHighlightedAriaLive,\n}: {\n  announceSelected: boolean;\n  highlightedOption?: Option;\n  getParent: (option: Option) => undefined | OptionGroup;\n  selectedAriaLabel?: string;\n  renderHighlightedAriaLive?: SelectProps.ContainingOptionAndGroupString;\n}) {\n  const prevAnnouncedGroup = useRef<OptionGroup | undefined>(undefined);\n\n  // Record previously announced group with a delay to account for possible re-renders of the hook.\n  useEffect(() => {\n    if (highlightedOption) {\n      const frameId = requestAnimationFrame(() => {\n        prevAnnouncedGroup.current = getParent(highlightedOption);\n      });\n      return () => cancelAnimationFrame(frameId);\n    }\n  });\n\n  if (!highlightedOption) {\n    return '';\n  }\n\n  const option = highlightedOption.option as OptionDefinition;\n  const parent = getParent(highlightedOption);\n  // Only announce parent group if it wasn't announced with previous option.\n  const group = parent && parent !== prevAnnouncedGroup.current ? parent : undefined;\n\n  // Use custom renderer if provided.\n  if (renderHighlightedAriaLive) {\n    return renderHighlightedAriaLive(option, group);\n  }\n\n  // Use default renderer with selected ARIA label if defined and relevant.\n  const selectedPrefix = announceSelected && selectedAriaLabel ? selectedAriaLabel : '';\n  const defaultDescription = defaultOptionDescription(option, group);\n  return [selectedPrefix, defaultDescription].filter(Boolean).join(' ');\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}