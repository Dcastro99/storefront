{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { OpenAnnotation } from './annotation/open-annotation';\nimport { ClosedAnnotation } from './annotation/closed-annotation';\nimport { hotspotContext } from './context';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useTelemetry } from '../internal/hooks/use-telemetry';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nexport function getStepInfo(annotations, index) {\n  if (index >= 0) {\n    var taskIndex = 0;\n    for (var _i = 0, annotations_1 = annotations; _i < annotations_1.length; _i++) {\n      var task = annotations_1[_i];\n      if (task.steps.length <= index) {\n        index -= task.steps.length;\n        taskIndex++;\n        continue;\n      }\n      return {\n        task: task,\n        step: task.steps[index],\n        localIndex: index,\n        taskIndex: taskIndex\n      };\n    }\n  }\n  return {\n    task: undefined,\n    step: undefined,\n    localIndex: 0,\n    taskIndex: 0\n  };\n}\n// constant empty array to keep hook dependency stable\nvar emptyTasks = [];\nexport default function AnnotationContext(_a) {\n  var _b, _c, _d, _e;\n  var currentTutorial = _a.currentTutorial,\n    children = _a.children,\n    onStepChange = _a.onStepChange,\n    onFinishHandler = _a.onFinish,\n    onStartTutorial = _a.onStartTutorial,\n    onExitTutorial = _a.onExitTutorial,\n    i18nStrings = _a.i18nStrings;\n  useTelemetry('AnnotationContext');\n  var _f = useState(true),\n    open = _f[0],\n    setOpen = _f[1];\n  var _g = useState(0),\n    currentStepIndex = _g[0],\n    setCurrentStepIndex = _g[1];\n  useEffect(function () {\n    // When a tutorial is started, we reset the progress to the first step.\n    setCurrentStepIndex(0);\n    setOpen(true);\n  }, [currentTutorial, setOpen]);\n  var _h = useState({}),\n    availableHotspots = _h[0],\n    setAvailableHotspots = _h[1];\n  // availableHotspots is mirrored in this ref to prevent endless loops\n  // in between registerHotspot and unregisterHotspot callbacks.\n  var availableHotspotsRef = useRef(availableHotspots);\n  var annotations = currentTutorial ? currentTutorial.tasks : emptyTasks;\n  var _j = getStepInfo(annotations, currentStepIndex),\n    task = _j.task,\n    step = _j.step,\n    localIndex = _j.localIndex,\n    taskIndex = _j.taskIndex;\n  var currentId = step === null || step === void 0 ? void 0 : step.hotspotId;\n  var totalStepCount = annotations.map(function (a) {\n    return a.steps.length;\n  }).reduce(function (a, b) {\n    return a + b;\n  }, 0);\n  var id2index = useMemo(function () {\n    var mapping = {};\n    var counter = 0;\n    for (var _i = 0, annotations_2 = annotations; _i < annotations_2.length; _i++) {\n      var annotation = annotations_2[_i];\n      for (var _a = 0, _b = annotation.steps; _a < _b.length; _a++) {\n        var step_1 = _b[_a];\n        if (mapping[step_1.hotspotId] === undefined) {\n          mapping[step_1.hotspotId] = counter;\n        }\n        counter++;\n      }\n    }\n    return mapping;\n  }, [annotations]);\n  var openNextStep = useCallback(function () {\n    var newStepIndex = Math.min(currentStepIndex + 1, totalStepCount);\n    setCurrentStepIndex(newStepIndex);\n    fireNonCancelableEvent(onStepChange, {\n      step: newStepIndex,\n      reason: 'next'\n    });\n  }, [currentStepIndex, onStepChange, totalStepCount]);\n  var openPreviousStep = useCallback(function () {\n    var newStepIndex = Math.max(currentStepIndex - 1, 0);\n    setCurrentStepIndex(newStepIndex);\n    fireNonCancelableEvent(onStepChange, {\n      step: newStepIndex,\n      reason: 'previous'\n    });\n  }, [onStepChange, currentStepIndex]);\n  var onFinish = useCallback(function () {\n    return fireNonCancelableEvent(onFinishHandler);\n  }, [onFinishHandler]);\n  /**\n   * If the currently open hotspot disappears from the page (e.g. because of a react-router navigation),\n   * this Effect detects the nearest available hotspot and changes to it. This allows us to e.g. automatically\n   * advance to the first step on the new page (or the last step on the previous page, in case the user\n   * navigates back).\n   */\n  var isCurrentHotspotAvailable = currentId ? availableHotspots[currentId] : null;\n  useEffect(function () {\n    if (!currentId || availableHotspotsRef.current[currentId]) {\n      return;\n    }\n    var findNearestHotspot = function () {\n      var nearestHotspot = undefined;\n      var nearestDistance = Infinity;\n      for (var _i = 0, _a = Object.keys(availableHotspotsRef.current); _i < _a.length; _i++) {\n        var hotspotId = _a[_i];\n        var distanceFromCurrentHotspot = Math.abs(id2index[hotspotId] - currentStepIndex);\n        if (distanceFromCurrentHotspot < nearestDistance) {\n          nearestDistance = distanceFromCurrentHotspot;\n          nearestHotspot = hotspotId;\n        }\n      }\n      return nearestHotspot;\n    };\n    var nearestHotspot = findNearestHotspot();\n    if (nearestHotspot) {\n      var newStepIndex = id2index[nearestHotspot];\n      setCurrentStepIndex(newStepIndex);\n      setOpen(true);\n      fireNonCancelableEvent(onStepChange, {\n        step: newStepIndex,\n        reason: 'auto-fallback'\n      });\n    }\n  }, [annotations, isCurrentHotspotAvailable, currentId, currentStepIndex, id2index, onStepChange]);\n  var onDismiss = useCallback(function () {\n    setOpen(false);\n  }, [setOpen]);\n  var onOpen = useCallback(function (stepIndex) {\n    setCurrentStepIndex(stepIndex);\n    fireNonCancelableEvent(onStepChange, {\n      step: stepIndex,\n      reason: 'open'\n    });\n    setOpen(true);\n  }, [onStepChange, setOpen]);\n  var idOfPreviousHotspot = (_b = getStepInfo(annotations, currentStepIndex - 1).step) === null || _b === void 0 ? void 0 : _b.hotspotId;\n  var idOfNextHotspot = (_c = getStepInfo(annotations, currentStepIndex + 1).step) === null || _c === void 0 ? void 0 : _c.hotspotId;\n  var previousHotspotIsAvailable = (_d = idOfPreviousHotspot !== undefined && availableHotspots[idOfPreviousHotspot]) !== null && _d !== void 0 ? _d : false;\n  var nextHotspotIsAvailable = (_e = idOfNextHotspot !== undefined && availableHotspots[idOfNextHotspot]) !== null && _e !== void 0 ? _e : false;\n  var getContentForId = useCallback(function (id, direction) {\n    if (currentTutorial === null || currentTutorial === void 0 ? void 0 : currentTutorial.completed) {\n      return null;\n    }\n    var globalStepIndex = id2index[id];\n    if (globalStepIndex === undefined) {\n      // This hotspot is not used in the current tutorial.\n      return null;\n    }\n    if (!task || !step || !open || id !== currentId) {\n      return React.createElement(ClosedAnnotation, {\n        globalStepIndex: globalStepIndex,\n        i18nStrings: i18nStrings,\n        onOpen: onOpen,\n        focusOnRender: id === currentId\n      });\n    }\n    return React.createElement(OpenAnnotation, {\n      i18nStrings: i18nStrings,\n      direction: direction,\n      title: i18nStrings.taskTitle(taskIndex, task.title),\n      content: step.content,\n      alert: step.warningAlert,\n      showPreviousButton: currentStepIndex !== 0,\n      showFinishButton: currentStepIndex + 1 === totalStepCount,\n      taskLocalStepIndex: localIndex,\n      totalLocalSteps: task.steps.length,\n      nextButtonEnabled: nextHotspotIsAvailable,\n      onNextButtonClick: openNextStep,\n      onFinish: onFinish,\n      previousButtonEnabled: previousHotspotIsAvailable,\n      onPreviousButtonClick: openPreviousStep,\n      onDismiss: onDismiss\n    });\n  }, [id2index, currentTutorial, task, step, open, currentId, currentStepIndex, i18nStrings, taskIndex, localIndex, totalStepCount, nextHotspotIsAvailable, openNextStep, onFinish, previousHotspotIsAvailable, openPreviousStep, onDismiss, onOpen]);\n  var registerHotspot = useCallback(function (id) {\n    var _a;\n    if (!id2index || id2index[id] === undefined) {\n      // This hotspot is not used in the current tutorial.\n      return;\n    }\n    /*\n      To ensure that all hotspots are immediately known to all triggered useEffects, we\n      need to update the availableHotspotsRef BEFORE the setAvailableHotspots calls, since\n      they will be batched and delayed until after the useEffects are run.\n    */\n    availableHotspotsRef.current = __assign(__assign({}, availableHotspotsRef.current), (_a = {}, _a[id] = true, _a));\n    setAvailableHotspots(function (availableHotspots) {\n      var _a;\n      if (availableHotspots[id]) {\n        return availableHotspots;\n      }\n      return __assign(__assign({}, availableHotspots), (_a = {}, _a[id] = true, _a));\n    });\n  },\n  // We need to react on id2index changes for registering new hotspots when the map changes.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [id2index]);\n  var unregisterHotspot = useCallback(function (id) {\n    if (!availableHotspotsRef.current[id]) {\n      // Prevents unnecessary re-renders.\n      return;\n    }\n    /*\n      To ensure that all hotspots are immediately known to all triggered useEffects, we\n      need to update the availableHotspotsRef BEFORE the setAvailableHotspots calls, since\n      they will be batched and delayed until after the useEffects are run.\n    */\n    availableHotspotsRef.current = removeKey(id, availableHotspotsRef.current);\n    setAvailableHotspots(function (availableHotspots) {\n      if (!availableHotspots[id]) {\n        return availableHotspots;\n      }\n      return removeKey(id, availableHotspots);\n    });\n  }, []);\n  var context = {\n    getContentForId: getContentForId,\n    registerHotspot: registerHotspot,\n    unregisterHotspot: unregisterHotspot,\n    onStartTutorial: onStartTutorial,\n    onExitTutorial: onExitTutorial,\n    currentStepIndex: currentStepIndex,\n    currentTutorial: currentTutorial\n  };\n  return React.createElement(hotspotContext.Provider, {\n    value: context\n  }, children);\n}\napplyDisplayName(AnnotationContext, 'AnnotationContext');\nfunction removeKey(key, object) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var _a = object,\n    _b = key,\n    _ = _a[_b],\n    remainingObject = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n  return remainingObject;\n}","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useMemo","useRef","useState","OpenAnnotation","ClosedAnnotation","hotspotContext","fireNonCancelableEvent","useTelemetry","applyDisplayName","getStepInfo","annotations","index","taskIndex","annotations_1","_i","task","steps","length","step","localIndex","undefined","emptyTasks","AnnotationContext","_a","currentTutorial","children","onStepChange","onFinishHandler","onStartTutorial","onExitTutorial","i18nStrings","open","setOpen","currentStepIndex","setCurrentStepIndex","availableHotspots","setAvailableHotspots","availableHotspotsRef","tasks","currentId","hotspotId","totalStepCount","map","reduce","a","b","id2index","mapping","counter","annotations_2","annotation","_b","step_1","openNextStep","newStepIndex","Math","min","reason","openPreviousStep","max","onFinish","isCurrentHotspotAvailable","current","findNearestHotspot","nearestHotspot","nearestDistance","Infinity","keys","distanceFromCurrentHotspot","abs","onDismiss","onOpen","stepIndex","idOfPreviousHotspot","idOfNextHotspot","previousHotspotIsAvailable","nextHotspotIsAvailable","getContentForId","id","direction","completed","globalStepIndex","focusOnRender","title","taskTitle","content","alert","warningAlert","showPreviousButton","showFinishButton","taskLocalStepIndex","totalLocalSteps","nextButtonEnabled","onNextButtonClick","previousButtonEnabled","onPreviousButtonClick","registerHotspot","__assign","unregisterHotspot","removeKey","context","Provider","value","key","object","_","remainingObject"],"sources":["/Users/dcastro/node_modules/src/annotation-context/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { OpenAnnotation } from './annotation/open-annotation';\nimport { ClosedAnnotation } from './annotation/closed-annotation';\nimport { AnnotationContextProps } from './interfaces';\nimport { HotspotContext, hotspotContext } from './context';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { HotspotProps } from '../hotspot/interfaces';\nimport { useTelemetry } from '../internal/hooks/use-telemetry';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\n\nexport { AnnotationContextProps };\n\nexport function getStepInfo(annotations: readonly AnnotationContextProps.Task[], index: number) {\n  if (index >= 0) {\n    let taskIndex = 0;\n    for (const task of annotations) {\n      if (task.steps.length <= index) {\n        index -= task.steps.length;\n        taskIndex++;\n        continue;\n      }\n      return { task, step: task.steps[index], localIndex: index, taskIndex };\n    }\n  }\n  return { task: undefined, step: undefined, localIndex: 0, taskIndex: 0 };\n}\n\n// constant empty array to keep hook dependency stable\nconst emptyTasks: ReadonlyArray<AnnotationContextProps.Task> = [];\n\nexport default function AnnotationContext({\n  currentTutorial,\n  children,\n  onStepChange,\n  onFinish: onFinishHandler,\n  onStartTutorial,\n  onExitTutorial,\n  i18nStrings,\n}: AnnotationContextProps): JSX.Element {\n  useTelemetry('AnnotationContext');\n\n  const [open, setOpen] = useState(true);\n\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n  useEffect(() => {\n    // When a tutorial is started, we reset the progress to the first step.\n    setCurrentStepIndex(0);\n    setOpen(true);\n  }, [currentTutorial, setOpen]);\n\n  const [availableHotspots, setAvailableHotspots] = useState<Record<string, true | undefined>>({});\n  // availableHotspots is mirrored in this ref to prevent endless loops\n  // in between registerHotspot and unregisterHotspot callbacks.\n  const availableHotspotsRef = useRef<Record<string, true | undefined>>(availableHotspots);\n\n  const annotations = currentTutorial ? currentTutorial.tasks : emptyTasks;\n  const { task, step, localIndex, taskIndex } = getStepInfo(annotations, currentStepIndex);\n  const currentId = step?.hotspotId;\n  const totalStepCount = annotations.map(a => a.steps.length).reduce((a, b) => a + b, 0);\n\n  const id2index = useMemo(() => {\n    const mapping: Record<string, number> = {};\n\n    let counter = 0;\n    for (const annotation of annotations) {\n      for (const step of annotation.steps) {\n        if (mapping[step.hotspotId] === undefined) {\n          mapping[step.hotspotId] = counter;\n        }\n        counter++;\n      }\n    }\n\n    return mapping;\n  }, [annotations]);\n\n  const openNextStep = useCallback(() => {\n    const newStepIndex = Math.min(currentStepIndex + 1, totalStepCount);\n    setCurrentStepIndex(newStepIndex);\n    fireNonCancelableEvent(onStepChange, { step: newStepIndex, reason: 'next' });\n  }, [currentStepIndex, onStepChange, totalStepCount]);\n\n  const openPreviousStep = useCallback(() => {\n    const newStepIndex = Math.max(currentStepIndex - 1, 0);\n    setCurrentStepIndex(newStepIndex);\n    fireNonCancelableEvent(onStepChange, { step: newStepIndex, reason: 'previous' });\n  }, [onStepChange, currentStepIndex]);\n\n  const onFinish = useCallback(() => fireNonCancelableEvent(onFinishHandler), [onFinishHandler]);\n\n  /**\n   * If the currently open hotspot disappears from the page (e.g. because of a react-router navigation),\n   * this Effect detects the nearest available hotspot and changes to it. This allows us to e.g. automatically\n   * advance to the first step on the new page (or the last step on the previous page, in case the user\n   * navigates back).\n   */\n  const isCurrentHotspotAvailable = currentId ? availableHotspots[currentId] : null;\n  useEffect(() => {\n    if (!currentId || availableHotspotsRef.current[currentId]) {\n      return;\n    }\n\n    const findNearestHotspot = () => {\n      let nearestHotspot: string | undefined = undefined;\n      let nearestDistance = Infinity;\n      for (const hotspotId of Object.keys(availableHotspotsRef.current)) {\n        const distanceFromCurrentHotspot = Math.abs(id2index[hotspotId] - currentStepIndex);\n        if (distanceFromCurrentHotspot < nearestDistance) {\n          nearestDistance = distanceFromCurrentHotspot;\n          nearestHotspot = hotspotId;\n        }\n      }\n      return nearestHotspot;\n    };\n\n    const nearestHotspot = findNearestHotspot();\n    if (nearestHotspot) {\n      const newStepIndex = id2index[nearestHotspot];\n      setCurrentStepIndex(newStepIndex);\n      setOpen(true);\n      fireNonCancelableEvent(onStepChange, { step: newStepIndex, reason: 'auto-fallback' });\n    }\n  }, [annotations, isCurrentHotspotAvailable, currentId, currentStepIndex, id2index, onStepChange]);\n\n  const onDismiss = useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onOpen = useCallback(\n    (stepIndex: number) => {\n      setCurrentStepIndex(stepIndex);\n      fireNonCancelableEvent(onStepChange, { step: stepIndex, reason: 'open' });\n      setOpen(true);\n    },\n    [onStepChange, setOpen]\n  );\n\n  const idOfPreviousHotspot = getStepInfo(annotations, currentStepIndex - 1).step?.hotspotId;\n  const idOfNextHotspot = getStepInfo(annotations, currentStepIndex + 1).step?.hotspotId;\n  const previousHotspotIsAvailable =\n    (idOfPreviousHotspot !== undefined && availableHotspots[idOfPreviousHotspot]) ?? false;\n  const nextHotspotIsAvailable = (idOfNextHotspot !== undefined && availableHotspots[idOfNextHotspot]) ?? false;\n\n  const getContentForId = useCallback(\n    (id: string, direction: HotspotProps['direction']) => {\n      if (currentTutorial?.completed) {\n        return null;\n      }\n\n      const globalStepIndex = id2index[id];\n      if (globalStepIndex === undefined) {\n        // This hotspot is not used in the current tutorial.\n        return null;\n      }\n\n      if (!task || !step || !open || id !== currentId) {\n        return (\n          <ClosedAnnotation\n            globalStepIndex={globalStepIndex}\n            i18nStrings={i18nStrings}\n            onOpen={onOpen}\n            focusOnRender={id === currentId}\n          />\n        );\n      }\n\n      return (\n        <OpenAnnotation\n          i18nStrings={i18nStrings}\n          direction={direction}\n          title={i18nStrings.taskTitle(taskIndex, task.title)}\n          content={step.content}\n          alert={step.warningAlert}\n          showPreviousButton={currentStepIndex !== 0}\n          showFinishButton={currentStepIndex + 1 === totalStepCount}\n          taskLocalStepIndex={localIndex}\n          totalLocalSteps={task.steps.length}\n          nextButtonEnabled={nextHotspotIsAvailable}\n          onNextButtonClick={openNextStep}\n          onFinish={onFinish}\n          previousButtonEnabled={previousHotspotIsAvailable}\n          onPreviousButtonClick={openPreviousStep}\n          onDismiss={onDismiss}\n        />\n      );\n    },\n    [\n      id2index,\n      currentTutorial,\n      task,\n      step,\n      open,\n      currentId,\n      currentStepIndex,\n      i18nStrings,\n      taskIndex,\n      localIndex,\n      totalStepCount,\n      nextHotspotIsAvailable,\n      openNextStep,\n      onFinish,\n      previousHotspotIsAvailable,\n      openPreviousStep,\n      onDismiss,\n      onOpen,\n    ]\n  );\n\n  const registerHotspot = useCallback(\n    (id: string) => {\n      if (!id2index || id2index[id] === undefined) {\n        // This hotspot is not used in the current tutorial.\n        return;\n      }\n\n      /*\n        To ensure that all hotspots are immediately known to all triggered useEffects, we\n        need to update the availableHotspotsRef BEFORE the setAvailableHotspots calls, since\n        they will be batched and delayed until after the useEffects are run.\n      */\n      availableHotspotsRef.current = { ...availableHotspotsRef.current, [id]: true } as const;\n\n      setAvailableHotspots(availableHotspots => {\n        if (availableHotspots[id]) {\n          return availableHotspots;\n        }\n\n        return { ...availableHotspots, [id]: true } as const;\n      });\n    },\n    // We need to react on id2index changes for registering new hotspots when the map changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [id2index]\n  );\n\n  const unregisterHotspot = useCallback((id: string) => {\n    if (!availableHotspotsRef.current[id]) {\n      // Prevents unnecessary re-renders.\n      return;\n    }\n\n    /*\n      To ensure that all hotspots are immediately known to all triggered useEffects, we\n      need to update the availableHotspotsRef BEFORE the setAvailableHotspots calls, since\n      they will be batched and delayed until after the useEffects are run.\n    */\n    availableHotspotsRef.current = removeKey(id, availableHotspotsRef.current);\n\n    setAvailableHotspots(availableHotspots => {\n      if (!availableHotspots[id]) {\n        return availableHotspots;\n      }\n\n      return removeKey(id, availableHotspots);\n    });\n  }, []);\n\n  const context: HotspotContext = {\n    getContentForId,\n    registerHotspot,\n    unregisterHotspot,\n    onStartTutorial,\n    onExitTutorial,\n    currentStepIndex,\n    currentTutorial,\n  };\n\n  return <hotspotContext.Provider value={context}>{children}</hotspotContext.Provider>;\n}\n\napplyDisplayName(AnnotationContext, 'AnnotationContext');\n\nfunction removeKey<T extends Record<string, any>>(key: keyof T, object: T) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { [key]: _, ...remainingObject } = object;\n  return remainingObject;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}