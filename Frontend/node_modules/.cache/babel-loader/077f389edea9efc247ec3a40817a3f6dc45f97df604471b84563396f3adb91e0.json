{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * The Tools component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the split panel, which exists only if there is a split panel in side position;\n * the tools, or drawer, that contains the hide tools form and the children passed through the API;\n * the show tools form that contains the triggers for both the drawer and the\n * split panel in large viewports;\n */\nexport default function Tools(_a) {\n  var children = _a.children;\n  var _b = useContext(AppLayoutContext),\n    ariaLabels = _b.ariaLabels,\n    handleSplitPanelClick = _b.handleSplitPanelClick,\n    handleToolsClick = _b.handleToolsClick,\n    hasDefaultToolsWidth = _b.hasDefaultToolsWidth,\n    isNavigationOpen = _b.isNavigationOpen,\n    isMobile = _b.isMobile,\n    isSplitPanelOpen = _b.isSplitPanelOpen,\n    isToolsOpen = _b.isToolsOpen,\n    splitPanel = _b.splitPanel,\n    tools = _b.tools,\n    toolsHide = _b.toolsHide,\n    toolsWidth = _b.toolsWidth,\n    isAnyPanelOpen = _b.isAnyPanelOpen,\n    navigationHide = _b.navigationHide,\n    toolsFocusControl = _b.toolsFocusControl;\n  var _c = useContext(SplitPanelContext),\n    splitPanelPosition = _c.position,\n    openButtonAriaLabel = _c.openButtonAriaLabel;\n  var hasSplitPanel = getSplitPanelStatus(splitPanel, splitPanelPosition);\n  var hasToolsForm = getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);\n  var hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);\n  var focusRefs = toolsFocusControl.refs;\n  if (toolsHide && !hasSplitPanel) {\n    return null;\n  }\n  var isUnfocusable = isMobile && isAnyPanelOpen && isNavigationOpen && !navigationHide;\n  return React.createElement(Transition, {\n    \"in\": isToolsOpen !== null && isToolsOpen !== void 0 ? isToolsOpen : false\n  }, function (state, transitionEventsRef) {\n    var _a, _b, _c, _d;\n    var _e, _f, _g;\n    return React.createElement(\"div\", {\n      className: clsx(styles['tools-container'], (_a = {}, _a[testutilStyles['drawer-closed']] = !isToolsOpen, _a[styles.unfocusable] = isUnfocusable, _a)),\n      style: (_b = {}, _b[customCssProps.toolsAnimationStartingOpacity] = \"\".concat(hasSplitPanel && isSplitPanelOpen ? 1 : 0),\n      // Overwrite the default tools width (depends on breakpoints) only when the `toolsWidth` property has been set.\n      _b[customCssProps.toolsWidth] = hasDefaultToolsWidth ? '' : \"\".concat(toolsWidth, \"px\"), _b),\n      onBlur: function (e) {\n        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n          toolsFocusControl.loseFocus();\n        }\n      }\n    }, children, !toolsHide && React.createElement(\"aside\", {\n      \"aria-hidden\": !isToolsOpen ? true : false,\n      \"aria-label\": (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _e !== void 0 ? _e : undefined,\n      className: clsx(styles.tools, (_c = {}, _c[styles.animating] = state === 'entering', _c[styles['has-tools-form-persistence']] = hasToolsFormPersistence, _c[styles['is-tools-open']] = isToolsOpen, _c), testutilStyles.tools),\n      ref: state !== 'exiting' ? transitionEventsRef : undefined\n    }, React.createElement(\"div\", {\n      className: clsx(styles['animated-content'])\n    }, React.createElement(\"div\", {\n      className: clsx(styles['hide-tools'])\n    }, React.createElement(InternalButton, {\n      ariaLabel: (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose) !== null && _f !== void 0 ? _f : undefined,\n      iconName: isMobile ? 'close' : 'angle-right',\n      onClick: function () {\n        return handleToolsClick(false);\n      },\n      variant: \"icon\",\n      formAction: \"none\",\n      className: testutilStyles['tools-close'],\n      ref: focusRefs.close,\n      ariaExpanded: true,\n      __nativeAttributes: {\n        'aria-haspopup': true\n      }\n    })), tools)), !isMobile && React.createElement(\"aside\", {\n      \"aria-hidden\": !hasToolsForm ? true : false,\n      \"aria-label\": (_g = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _g !== void 0 ? _g : undefined,\n      className: clsx(styles['show-tools'], (_d = {}, _d[styles.animating] = state === 'exiting', _d[styles['has-tools-form']] = hasToolsForm, _d[styles['has-tools-form-persistence']] = hasToolsFormPersistence, _d), splitPanelStyles.root),\n      ref: state === 'exiting' ? transitionEventsRef : undefined\n    }, !toolsHide && React.createElement(TriggerButton, {\n      ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle,\n      iconName: \"status-info\",\n      onClick: function () {\n        return handleToolsClick(!isToolsOpen);\n      },\n      selected: hasSplitPanel && isToolsOpen,\n      className: testutilStyles['tools-toggle'],\n      ref: focusRefs.toggle\n    }), hasSplitPanel && React.createElement(TriggerButton, {\n      ariaLabel: openButtonAriaLabel,\n      iconName: \"view-vertical\",\n      onClick: function () {\n        return handleSplitPanelClick();\n      },\n      selected: hasSplitPanel && isSplitPanelOpen,\n      className: splitPanelStyles['open-button']\n    })));\n  });\n}\n/**\n * Determine the default state of the Tools component. Mobile viewports should be\n * closed by default under all circumstances. If the toolsOpen prop has not been\n * set then it should be closed as well. Otherwise, default to the toolsOpen prop.\n */\nexport function getToolsDefaultState(isMobile, stateFromProps) {\n  var isToolsOpen;\n  if (isMobile || stateFromProps === undefined) {\n    isToolsOpen = false;\n  } else {\n    isToolsOpen = stateFromProps;\n  }\n  return isToolsOpen;\n}\n/**\n * This simple function returns the presence of the split panel as a child of the\n * Tools component. It must exist and be in side position.\n */\nfunction getSplitPanelStatus(splitPanel, splitPanelPosition) {\n  return splitPanel && splitPanelPosition === 'side' ? true : false;\n}\n/**\n * By default the Tools form is styled as display: none; This behavior should\n * be unchanged in mobile viewports where the Tools form is always suppressed.\n * In large viewports, however the Tools form and its corresponding buttons\n * should be present in the UI under the below circumstances.\n */\nfunction getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide) {\n  var hasToolsForm = false;\n  if (!isMobile) {\n    // Both the Split Panel and Tools button are needed\n    if (hasSplitPanel && !toolsHide) {\n      hasToolsForm = true;\n    }\n    // The Split Panel button is needed\n    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {\n      hasToolsForm = true;\n    }\n    // The Tools button is needed\n    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {\n      hasToolsForm = true;\n    }\n  }\n  return hasToolsForm;\n}\n/**\n * Under two scenarios the Tools form that contains the triggers\n * for the Tools content and the Split Panel may be persistent\n * in the UI (as opposed to disappearing when one of the drawers\n * is open). This will also add a white background as opposed to the\n * default transparent background. The buttons will present and in a\n * selected / not selected state.\n */\nfunction getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide) {\n  var hasToolsFormPersistence = false;\n  // Both Tools and Split Panel exist and one or both is open\n  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {\n    hasToolsFormPersistence = true;\n  }\n  return hasToolsFormPersistence;\n}","map":{"version":3,"mappings":"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","names":["React","useContext","clsx","InternalButton","AppLayoutContext","SplitPanelContext","TriggerButton","styles","splitPanelStyles","testutilStyles","Transition","customCssProps","Tools","_a","children","ariaLabels","handleSplitPanelClick","handleToolsClick","hasDefaultToolsWidth","isNavigationOpen","isMobile","isSplitPanelOpen","isToolsOpen","splitPanel","tools","toolsHide","toolsWidth","isAnyPanelOpen","navigationHide","toolsFocusControl","splitPanelPosition","openButtonAriaLabel","hasSplitPanel","getSplitPanelStatus","hasToolsForm","getToolsFormStatus","hasToolsFormPersistence","getToolsFormPersistence","focusRefs","isUnfocusable","state","transitionEventsRef","className","unfocusable","style","_b","toolsAnimationStartingOpacity","onBlur","e","relatedTarget","currentTarget","contains","loseFocus","undefined","_c","animating","ref","ariaLabel","toolsClose","iconName","onClick","variant","formAction","close","ariaExpanded","__nativeAttributes","_d","root","toolsToggle","selected","toggle","getToolsDefaultState","stateFromProps"],"sources":["/Users/dcastro/node_modules/src/app-layout/visual-refresh/tools.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\ninterface ToolsProps {\n  children: React.ReactNode;\n}\n\n/**\n * The Tools component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the split panel, which exists only if there is a split panel in side position;\n * the tools, or drawer, that contains the hide tools form and the children passed through the API;\n * the show tools form that contains the triggers for both the drawer and the\n * split panel in large viewports;\n */\nexport default function Tools({ children }: ToolsProps) {\n  const {\n    ariaLabels,\n    handleSplitPanelClick,\n    handleToolsClick,\n    hasDefaultToolsWidth,\n    isNavigationOpen,\n    isMobile,\n    isSplitPanelOpen,\n    isToolsOpen,\n    splitPanel,\n    tools,\n    toolsHide,\n    toolsWidth,\n    isAnyPanelOpen,\n    navigationHide,\n    toolsFocusControl,\n  } = useContext(AppLayoutContext);\n\n  const { position: splitPanelPosition, openButtonAriaLabel } = useContext(SplitPanelContext);\n\n  const hasSplitPanel = getSplitPanelStatus(splitPanel, splitPanelPosition);\n  const hasToolsForm = getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);\n  const hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);\n\n  const { refs: focusRefs } = toolsFocusControl;\n\n  if (toolsHide && !hasSplitPanel) {\n    return null;\n  }\n\n  const isUnfocusable = isMobile && isAnyPanelOpen && isNavigationOpen && !navigationHide;\n\n  return (\n    <Transition in={isToolsOpen ?? false}>\n      {(state, transitionEventsRef) => (\n        <div\n          className={clsx(styles['tools-container'], {\n            [testutilStyles['drawer-closed']]: !isToolsOpen,\n            [styles.unfocusable]: isUnfocusable,\n          })}\n          style={{\n            [customCssProps.toolsAnimationStartingOpacity]: `${hasSplitPanel && isSplitPanelOpen ? 1 : 0}`,\n            // Overwrite the default tools width (depends on breakpoints) only when the `toolsWidth` property has been set.\n            [customCssProps.toolsWidth]: hasDefaultToolsWidth ? '' : `${toolsWidth}px`,\n          }}\n          onBlur={e => {\n            if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n              toolsFocusControl.loseFocus();\n            }\n          }}\n        >\n          {children}\n\n          {!toolsHide && (\n            <aside\n              aria-hidden={!isToolsOpen ? true : false}\n              aria-label={ariaLabels?.tools ?? undefined}\n              className={clsx(\n                styles.tools,\n                {\n                  [styles.animating]: state === 'entering',\n                  [styles['has-tools-form-persistence']]: hasToolsFormPersistence,\n                  [styles['is-tools-open']]: isToolsOpen,\n                },\n                testutilStyles.tools\n              )}\n              ref={state !== 'exiting' ? transitionEventsRef : undefined}\n            >\n              <div className={clsx(styles['animated-content'])}>\n                <div className={clsx(styles['hide-tools'])}>\n                  <InternalButton\n                    ariaLabel={ariaLabels?.toolsClose ?? undefined}\n                    iconName={isMobile ? 'close' : 'angle-right'}\n                    onClick={() => handleToolsClick(false)}\n                    variant=\"icon\"\n                    formAction=\"none\"\n                    className={testutilStyles['tools-close']}\n                    ref={focusRefs.close}\n                    ariaExpanded={true}\n                    __nativeAttributes={{ 'aria-haspopup': true }}\n                  />\n                </div>\n\n                {tools}\n              </div>\n            </aside>\n          )}\n\n          {!isMobile && (\n            <aside\n              aria-hidden={!hasToolsForm ? true : false}\n              aria-label={ariaLabels?.tools ?? undefined}\n              className={clsx(\n                styles['show-tools'],\n                {\n                  [styles.animating]: state === 'exiting',\n                  [styles['has-tools-form']]: hasToolsForm,\n                  [styles['has-tools-form-persistence']]: hasToolsFormPersistence,\n                },\n                splitPanelStyles.root\n              )}\n              ref={state === 'exiting' ? transitionEventsRef : undefined}\n            >\n              {!toolsHide && (\n                <TriggerButton\n                  ariaLabel={ariaLabels?.toolsToggle}\n                  iconName=\"status-info\"\n                  onClick={() => handleToolsClick(!isToolsOpen)}\n                  selected={hasSplitPanel && isToolsOpen}\n                  className={testutilStyles['tools-toggle']}\n                  ref={focusRefs.toggle}\n                />\n              )}\n\n              {hasSplitPanel && (\n                <TriggerButton\n                  ariaLabel={openButtonAriaLabel}\n                  iconName=\"view-vertical\"\n                  onClick={() => handleSplitPanelClick()}\n                  selected={hasSplitPanel && isSplitPanelOpen}\n                  className={splitPanelStyles['open-button']}\n                  // TODO should this button also get focus handling? (i.e. when the split panel is toggled)\n                />\n              )}\n            </aside>\n          )}\n        </div>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * Determine the default state of the Tools component. Mobile viewports should be\n * closed by default under all circumstances. If the toolsOpen prop has not been\n * set then it should be closed as well. Otherwise, default to the toolsOpen prop.\n */\nexport function getToolsDefaultState(isMobile: boolean, stateFromProps?: boolean) {\n  let isToolsOpen;\n\n  if (isMobile || stateFromProps === undefined) {\n    isToolsOpen = false;\n  } else {\n    isToolsOpen = stateFromProps;\n  }\n\n  return isToolsOpen;\n}\n\n/**\n * This simple function returns the presence of the split panel as a child of the\n * Tools component. It must exist and be in side position.\n */\nfunction getSplitPanelStatus(splitPanel: React.ReactNode, splitPanelPosition: string) {\n  return splitPanel && splitPanelPosition === 'side' ? true : false;\n}\n\n/**\n * By default the Tools form is styled as display: none; This behavior should\n * be unchanged in mobile viewports where the Tools form is always suppressed.\n * In large viewports, however the Tools form and its corresponding buttons\n * should be present in the UI under the below circumstances.\n */\nfunction getToolsFormStatus(\n  hasSplitPanel: boolean,\n  isMobile: boolean,\n  isSplitPanelOpen?: boolean,\n  isToolsOpen?: boolean,\n  toolsHide?: boolean\n) {\n  let hasToolsForm = false;\n\n  if (!isMobile) {\n    // Both the Split Panel and Tools button are needed\n    if (hasSplitPanel && !toolsHide) {\n      hasToolsForm = true;\n    }\n\n    // The Split Panel button is needed\n    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {\n      hasToolsForm = true;\n    }\n\n    // The Tools button is needed\n    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {\n      hasToolsForm = true;\n    }\n  }\n\n  return hasToolsForm;\n}\n\n/**\n * Under two scenarios the Tools form that contains the triggers\n * for the Tools content and the Split Panel may be persistent\n * in the UI (as opposed to disappearing when one of the drawers\n * is open). This will also add a white background as opposed to the\n * default transparent background. The buttons will present and in a\n * selected / not selected state.\n */\nfunction getToolsFormPersistence(\n  hasSplitPanel: boolean,\n  isSplitPanelOpen?: boolean,\n  isToolsOpen?: boolean,\n  toolsHide?: boolean\n) {\n  let hasToolsFormPersistence = false;\n\n  // Both Tools and Split Panel exist and one or both is open\n  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {\n    hasToolsFormPersistence = true;\n  }\n\n  return hasToolsFormPersistence;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}