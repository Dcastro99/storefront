{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { fireCancelableEvent, isPlainLeftClick } from '../../../internal/events';\nimport { useUniqueId } from '../../../internal/hooks/use-unique-id';\nimport useFocusVisible from '../../../internal/hooks/focus-visible';\nimport InternalIcon from '../../../icon/internal';\nimport { useNavigate } from './router';\nimport styles from '../../styles.css.js';\nvar ListItem = function (_a) {\n  var children = _a.children,\n    startIcon = _a.startIcon,\n    endIcon = _a.endIcon;\n  return React.createElement(React.Fragment, null, startIcon && React.createElement(\"span\", {\n    className: styles['overflow-menu-list-item-icon']\n  }, startIcon), React.createElement(\"span\", {\n    className: styles['overflow-menu-list-item-text']\n  }, children), endIcon && endIcon);\n};\nvar LinkItem = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    external = _a.external,\n    href = _a.href,\n    startIcon = _a.startIcon,\n    endIcon = _a.endIcon,\n    onFollow = _a.onFollow,\n    context = _a.context,\n    testId = _a.testId;\n  var focusVisible = useFocusVisible();\n  var rel = external ? 'noopener noreferrer' : undefined;\n  var target = external ? '_blank' : undefined;\n  var anchorProps = {\n    rel: rel,\n    target: target,\n    href: href,\n    onClick: function (event) {\n      if (isPlainLeftClick(event)) {\n        onFollow === null || onFollow === void 0 ? void 0 : onFollow(event);\n      }\n    }\n  };\n  var buttonProps = {\n    role: 'button',\n    tabIndex: 0,\n    onKeyDown: function (event) {\n      if (event.key === ' ') {\n        event.preventDefault();\n      }\n    },\n    onKeyUp: function (event) {\n      if (event.key === ' ' || event.key === 'Enter') {\n        onFollow === null || onFollow === void 0 ? void 0 : onFollow(event);\n      }\n    },\n    onClick: onFollow\n  };\n  return React.createElement(\"a\", __assign({\n    ref: ref,\n    className: clsx(styles['overflow-menu-control'], styles['overflow-menu-control-link'], context && styles[\"overflow-menu-control-\".concat(context)])\n  }, typeof href === 'string' ? anchorProps : buttonProps, focusVisible, testId ? {\n    'data-testid': testId\n  } : {}), React.createElement(ListItem, {\n    startIcon: startIcon,\n    endIcon: endIcon\n  }, children));\n});\nvar ButtonItem = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    startIcon = _a.startIcon,\n    endIcon = _a.endIcon,\n    onClick = _a.onFollow,\n    testId = _a.testId;\n  var focusVisible = useFocusVisible();\n  return React.createElement(\"button\", __assign({\n    ref: ref,\n    className: styles['overflow-menu-control'],\n    onClick: onClick\n  }, focusVisible, typeof testId === 'string' ? {\n    'data-testid': testId\n  } : {}), React.createElement(ListItem, {\n    startIcon: startIcon,\n    endIcon: endIcon\n  }, children));\n});\nvar NavigationItem = forwardRef(function (_a, ref) {\n  var startIcon = _a.startIcon,\n    children = _a.children,\n    index = _a.index,\n    testId = _a.testId,\n    definition = __rest(_a, [\"startIcon\", \"children\", \"index\", \"testId\"]);\n  var navigate = useNavigate();\n  return React.createElement(ButtonItem, {\n    ref: ref,\n    startIcon: startIcon,\n    endIcon: React.createElement(InternalIcon, {\n      name: \"angle-right\"\n    }),\n    testId: testId,\n    onFollow: function () {\n      return navigate('dropdown-menu', {\n        definition: definition,\n        headerText: definition.text || definition.title,\n        headerSecondaryText: definition.description,\n        utilityIndex: index\n      });\n    }\n  }, children);\n});\nvar ExpandableItem = function (_a) {\n  var children = _a.children,\n    onItemClick = _a.onItemClick,\n    definition = __rest(_a, [\"children\", \"onItemClick\"]);\n  var focusVisible = useFocusVisible();\n  var _b = useState(false),\n    expanded = _b[0],\n    setExpanded = _b[1];\n  var headerId = useUniqueId('overflow-menu-item');\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", __assign({\n    className: clsx(styles['overflow-menu-control'], styles['overflow-menu-control-expandable-menu-trigger']),\n    onClick: function () {\n      return setExpanded(function (value) {\n        return !value;\n      });\n    },\n    \"aria-expanded\": expanded\n  }, focusVisible), React.createElement(ListItem, {\n    endIcon: React.createElement(\"span\", {\n      className: clsx(styles.icon, expanded && styles.expanded)\n    }, React.createElement(InternalIcon, {\n      name: \"caret-up-filled\"\n    }))\n  }, React.createElement(\"span\", {\n    id: headerId\n  }, children))), expanded && React.createElement(\"ul\", {\n    className: clsx(styles['overflow-menu-list'], styles['overflow-menu-list-submenu']),\n    \"aria-labelledby\": headerId\n  }, definition.items.map(function (item, index) {\n    var isGroup = typeof item.items !== 'undefined';\n    return React.createElement(\"li\", {\n      key: index,\n      className: clsx(styles[\"overflow-menu-list-item\"], styles[\"overflow-menu-list-item-dropdown-menu\"])\n    }, dropdownComponentFactory(item, isGroup, onItemClick));\n  })));\n};\nfunction utilityComponentFactory(utility, index, ref) {\n  var label = utility.text || utility.title;\n  var hasIcon = !!utility.iconName || !!utility.iconUrl || !!utility.iconAlt || !!utility.iconSvg;\n  var startIcon = hasIcon && React.createElement(InternalIcon, {\n    name: utility.iconName,\n    url: utility.iconUrl,\n    alt: utility.iconAlt,\n    svg: utility.iconSvg\n  });\n  switch (utility.type) {\n    case 'button':\n      {\n        var handleClick = function (event) {\n          fireCancelableEvent(utility.onClick, {}, event);\n        };\n        if (utility.variant === 'primary-button') {\n          return React.createElement(ButtonItem, {\n            ref: ref,\n            startIcon: startIcon,\n            onFollow: handleClick,\n            testId: \"__\".concat(index)\n          }, label);\n        }\n        return React.createElement(LinkItem, {\n          ref: ref,\n          startIcon: startIcon,\n          href: utility.href,\n          external: utility.external,\n          testId: \"__\".concat(index),\n          onFollow: handleClick\n        }, label, utility.external && React.createElement(React.Fragment, null, ' ', React.createElement(\"span\", {\n          \"aria-label\": utility.externalIconAriaLabel,\n          role: utility.externalIconAriaLabel ? 'img' : undefined\n        }, React.createElement(InternalIcon, {\n          name: \"external\",\n          size: \"normal\"\n        }))));\n      }\n    case 'menu-dropdown':\n      {\n        return React.createElement(NavigationItem, __assign({\n          ref: ref,\n          startIcon: startIcon,\n          index: index\n        }, utility, {\n          testId: \"__\".concat(index)\n        }), label);\n      }\n  }\n}\nfunction dropdownComponentFactory(item, expandable, onItemClick) {\n  var label = item.text;\n  var hasIcon = !!item.iconName || !!item.iconUrl || !!item.iconAlt || !!item.iconSvg;\n  var startIcon = hasIcon && React.createElement(InternalIcon, {\n    name: item.iconName,\n    url: item.iconUrl,\n    alt: item.iconAlt,\n    svg: item.iconSvg\n  });\n  if (expandable) {\n    return React.createElement(ExpandableItem, __assign({}, item, {\n      onItemClick: onItemClick\n    }), label);\n  }\n  return React.createElement(LinkItem, {\n    startIcon: startIcon,\n    href: item.href,\n    external: item.external,\n    context: \"dropdown-menu\",\n    testId: item.id,\n    onFollow: function () {\n      return onItemClick(item);\n    }\n  }, label, item.external && React.createElement(React.Fragment, null, ' ', React.createElement(\"span\", {\n    \"aria-label\": item.externalIconAriaLabel,\n    role: item.externalIconAriaLabel ? 'img' : undefined\n  }, React.createElement(InternalIcon, {\n    name: \"external\",\n    size: \"normal\"\n  }))));\n}\nexport var UtilityMenuItem = forwardRef(function (_a, ref) {\n  var index = _a.index,\n    props = __rest(_a, [\"index\"]);\n  return React.createElement(\"li\", {\n    className: clsx(styles[\"overflow-menu-list-item\"], styles[\"overflow-menu-list-item-utility\"])\n  }, utilityComponentFactory(props, index, ref));\n});\nexport var SubmenuItem = function (props) {\n  var expandable = typeof props.items !== 'undefined';\n  return React.createElement(\"li\", {\n    className: clsx(styles[\"overflow-menu-list-item\"], styles[\"overflow-menu-list-item-submenu\"], expandable && styles[\"overflow-menu-list-item-expandable\"])\n  }, dropdownComponentFactory(props, expandable, props.onItemClick));\n};","map":{"version":3,"mappings":"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","names":["React","forwardRef","useState","clsx","fireCancelableEvent","isPlainLeftClick","useUniqueId","useFocusVisible","InternalIcon","useNavigate","styles","ListItem","_a","children","startIcon","endIcon","className","LinkItem","ref","external","href","onFollow","context","testId","focusVisible","rel","undefined","target","anchorProps","onClick","event","buttonProps","role","tabIndex","onKeyDown","key","preventDefault","onKeyUp","ButtonItem","NavigationItem","index","definition","navigate","name","headerText","text","title","headerSecondaryText","description","utilityIndex","ExpandableItem","onItemClick","expanded","setExpanded","headerId","value","icon","id","items","map","item","isGroup","dropdownComponentFactory","utilityComponentFactory","utility","label","hasIcon","iconName","iconUrl","iconAlt","iconSvg","url","alt","svg","type","handleClick","variant","externalIconAriaLabel","size","expandable","UtilityMenuItem","props","SubmenuItem"],"sources":["/Users/dcastro/node_modules/src/top-navigation/parts/overflow-menu/menu-item.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { fireCancelableEvent, isPlainLeftClick } from '../../../internal/events';\nimport { useUniqueId } from '../../../internal/hooks/use-unique-id';\nimport useFocusVisible from '../../../internal/hooks/focus-visible';\n\nimport { LinkProps } from '../../../link/interfaces';\nimport { ButtonDropdownProps } from '../../../button-dropdown/interfaces';\nimport InternalIcon from '../../../icon/internal';\n\nimport { useNavigate } from './router';\nimport { TopNavigationProps } from '../../interfaces';\nimport styles from '../../styles.css.js';\n\ninterface ListItemProps {\n  startIcon?: React.ReactNode;\n  endIcon?: React.ReactNode;\n  context?: 'dropdown-menu';\n  children?: React.ReactNode;\n  testId?: string;\n}\n\nconst ListItem = ({ children, startIcon, endIcon }: ListItemProps) => {\n  return (\n    <>\n      {startIcon && <span className={styles['overflow-menu-list-item-icon']}>{startIcon}</span>}\n      <span className={styles['overflow-menu-list-item-text']}>{children}</span>\n      {endIcon && endIcon}\n    </>\n  );\n};\n\ninterface LinkItemProps extends ButtonItemProps, Pick<LinkProps, 'href' | 'external'> {}\n\nconst LinkItem = forwardRef(\n  (\n    { children, external, href, startIcon, endIcon, onFollow, context, testId }: LinkItemProps,\n    ref: React.Ref<HTMLAnchorElement>\n  ) => {\n    const focusVisible = useFocusVisible();\n    const rel = external ? 'noopener noreferrer' : undefined;\n    const target = external ? '_blank' : undefined;\n\n    const anchorProps = {\n      rel,\n      target,\n      href,\n      onClick(event: React.MouseEvent) {\n        if (isPlainLeftClick(event)) {\n          onFollow?.(event);\n        }\n      },\n    };\n\n    const buttonProps = {\n      role: 'button',\n      tabIndex: 0,\n      onKeyDown(event: React.KeyboardEvent) {\n        if (event.key === ' ') {\n          event.preventDefault();\n        }\n      },\n      onKeyUp(event: React.KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Enter') {\n          onFollow?.(event);\n        }\n      },\n      onClick: onFollow,\n    };\n\n    return (\n      <a\n        ref={ref}\n        className={clsx(\n          styles['overflow-menu-control'],\n          styles['overflow-menu-control-link'],\n          context && styles[`overflow-menu-control-${context}`]\n        )}\n        {...(typeof href === 'string' ? anchorProps : buttonProps)}\n        {...focusVisible}\n        {...(testId ? { 'data-testid': testId } : {})}\n      >\n        <ListItem startIcon={startIcon} endIcon={endIcon}>\n          {children}\n        </ListItem>\n      </a>\n    );\n  }\n);\n\ninterface ButtonItemProps extends ListItemProps {\n  onFollow?: (event: React.SyntheticEvent) => void;\n}\n\nconst ButtonItem = forwardRef(\n  (\n    { children, startIcon, endIcon, onFollow: onClick, testId }: ButtonItemProps & { testId?: string },\n    ref: React.Ref<HTMLButtonElement>\n  ) => {\n    const focusVisible = useFocusVisible();\n\n    return (\n      <button\n        ref={ref}\n        className={styles['overflow-menu-control']}\n        onClick={onClick}\n        {...focusVisible}\n        {...(typeof testId === 'string' ? { 'data-testid': testId } : {})}\n      >\n        <ListItem startIcon={startIcon} endIcon={endIcon}>\n          {children}\n        </ListItem>\n      </button>\n    );\n  }\n);\n\nconst NavigationItem = forwardRef(\n  (\n    {\n      startIcon,\n      children,\n      index,\n      testId,\n      ...definition\n    }: ButtonItemProps & TopNavigationProps.MenuDropdownUtility & { index: number; testId?: string },\n    ref: React.Ref<HTMLButtonElement>\n  ) => {\n    const navigate = useNavigate();\n    return (\n      <ButtonItem\n        ref={ref}\n        startIcon={startIcon}\n        endIcon={<InternalIcon name=\"angle-right\" />}\n        testId={testId}\n        onFollow={() =>\n          navigate('dropdown-menu', {\n            definition,\n            headerText: definition.text || definition.title,\n            headerSecondaryText: definition.description,\n            utilityIndex: index,\n          })\n        }\n      >\n        {children}\n      </ButtonItem>\n    );\n  }\n);\n\nconst ExpandableItem: React.FC<\n  ButtonItemProps & ButtonDropdownProps.ItemGroup & { onItemClick: (item: ButtonDropdownProps.Item) => void }\n> = ({ children, onItemClick, ...definition }) => {\n  const focusVisible = useFocusVisible();\n  const [expanded, setExpanded] = useState(false);\n  const headerId = useUniqueId('overflow-menu-item');\n\n  return (\n    <>\n      <button\n        className={clsx(styles['overflow-menu-control'], styles['overflow-menu-control-expandable-menu-trigger'])}\n        onClick={() => setExpanded(value => !value)}\n        aria-expanded={expanded}\n        {...focusVisible}\n      >\n        <ListItem\n          endIcon={\n            <span className={clsx(styles.icon, expanded && styles.expanded)}>\n              <InternalIcon name=\"caret-up-filled\" />\n            </span>\n          }\n        >\n          <span id={headerId}>{children}</span>\n        </ListItem>\n      </button>\n      {expanded && (\n        <ul\n          className={clsx(styles['overflow-menu-list'], styles['overflow-menu-list-submenu'])}\n          aria-labelledby={headerId}\n        >\n          {definition.items.map((item, index) => {\n            const isGroup = typeof (item as ButtonDropdownProps.ItemGroup).items !== 'undefined';\n\n            return (\n              <li\n                key={index}\n                className={clsx(styles[`overflow-menu-list-item`], styles[`overflow-menu-list-item-dropdown-menu`])}\n              >\n                {dropdownComponentFactory(item, isGroup, onItemClick)}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nfunction utilityComponentFactory(\n  utility: TopNavigationProps.Utility,\n  index: number,\n  ref?: React.Ref<HTMLAnchorElement & HTMLButtonElement>\n) {\n  const label = utility.text || utility.title;\n  const hasIcon = !!utility.iconName || !!utility.iconUrl || !!utility.iconAlt || !!utility.iconSvg;\n  const startIcon = hasIcon && (\n    <InternalIcon name={utility.iconName} url={utility.iconUrl} alt={utility.iconAlt} svg={utility.iconSvg} />\n  );\n\n  switch (utility.type) {\n    case 'button': {\n      const handleClick = (event: Event | React.SyntheticEvent) => {\n        fireCancelableEvent(utility.onClick, {}, event);\n      };\n\n      if (utility.variant === 'primary-button') {\n        return (\n          <ButtonItem ref={ref} startIcon={startIcon} onFollow={handleClick} testId={`__${index}`}>\n            {label}\n          </ButtonItem>\n        );\n      }\n\n      return (\n        <LinkItem\n          ref={ref}\n          startIcon={startIcon}\n          href={utility.href}\n          external={utility.external}\n          testId={`__${index}`}\n          onFollow={handleClick}\n        >\n          {label}\n          {utility.external && (\n            <>\n              {' '}\n              <span aria-label={utility.externalIconAriaLabel} role={utility.externalIconAriaLabel ? 'img' : undefined}>\n                <InternalIcon name=\"external\" size=\"normal\" />\n              </span>\n            </>\n          )}\n        </LinkItem>\n      );\n    }\n    case 'menu-dropdown': {\n      return (\n        <NavigationItem\n          ref={ref}\n          startIcon={startIcon}\n          index={index}\n          {...(utility as TopNavigationProps.MenuDropdownUtility)}\n          testId={`__${index}`}\n        >\n          {label}\n        </NavigationItem>\n      );\n    }\n  }\n}\n\nfunction dropdownComponentFactory(\n  item: ButtonDropdownProps.ItemOrGroup,\n  expandable: boolean,\n  onItemClick: (item: ButtonDropdownProps.Item) => void\n) {\n  const label = item.text;\n  const hasIcon = !!item.iconName || !!item.iconUrl || !!item.iconAlt || !!item.iconSvg;\n  const startIcon = hasIcon && (\n    <InternalIcon name={item.iconName} url={item.iconUrl} alt={item.iconAlt} svg={item.iconSvg} />\n  );\n\n  if (expandable) {\n    return (\n      <ExpandableItem {...(item as ButtonDropdownProps.ItemGroup)} onItemClick={onItemClick}>\n        {label}\n      </ExpandableItem>\n    );\n  }\n\n  return (\n    <LinkItem\n      startIcon={startIcon}\n      href={item.href}\n      external={item.external}\n      context=\"dropdown-menu\"\n      testId={item.id}\n      onFollow={() => onItemClick(item as ButtonDropdownProps.Item)}\n    >\n      {label}\n      {item.external && (\n        <>\n          {' '}\n          <span aria-label={item.externalIconAriaLabel} role={item.externalIconAriaLabel ? 'img' : undefined}>\n            <InternalIcon name=\"external\" size=\"normal\" />\n          </span>\n        </>\n      )}\n    </LinkItem>\n  );\n}\n\ntype UtilityMenuItemProps = TopNavigationProps.Utility & { index: number };\n\nexport const UtilityMenuItem = forwardRef(\n  ({ index, ...props }: UtilityMenuItemProps, ref: React.Ref<HTMLAnchorElement & HTMLButtonElement>) => {\n    return (\n      <li className={clsx(styles[`overflow-menu-list-item`], styles[`overflow-menu-list-item-utility`])}>\n        {utilityComponentFactory(props, index, ref)}\n      </li>\n    );\n  }\n);\n\ntype SubmenuItemProps = ButtonDropdownProps.ItemOrGroup & { onItemClick: (item: ButtonDropdownProps.Item) => void };\n\nexport const SubmenuItem = (props: SubmenuItemProps) => {\n  const expandable = typeof (props as ButtonDropdownProps.ItemGroup).items !== 'undefined';\n\n  return (\n    <li\n      className={clsx(\n        styles[`overflow-menu-list-item`],\n        styles[`overflow-menu-list-item-submenu`],\n        expandable && styles[`overflow-menu-list-item-expandable`]\n      )}\n    >\n      {dropdownComponentFactory(props, expandable, props.onItemClick)}\n    </li>\n  );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}