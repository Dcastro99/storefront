{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport { fireNonCancelableEvent } from '../../events';\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport InternalLink from '../../../link/internal';\nimport styles from './styles.css.js';\nexport function getChartStatus(_a) {\n  var externalData = _a.externalData,\n    visibleData = _a.visibleData,\n    statusType = _a.statusType;\n  var isEmpty = !visibleData || visibleData.length === 0;\n  var isNoMatch = isEmpty && visibleData.length !== externalData.length;\n  var showChart = statusType === 'finished' && !isEmpty;\n  return {\n    isEmpty: isEmpty,\n    isNoMatch: isNoMatch,\n    showChart: showChart\n  };\n}\nvar ChartStatusContainer = function (_a) {\n  var statusType = _a.statusType,\n    errorText = _a.errorText,\n    loadingText = _a.loadingText,\n    recoveryText = _a.recoveryText,\n    noMatch = _a.noMatch,\n    empty = _a.empty,\n    onRecoveryClick = _a.onRecoveryClick,\n    isNoMatch = _a.isNoMatch,\n    isEmpty = _a.isEmpty,\n    showChart = _a.showChart;\n  var statusContainer = useMemo(function () {\n    var handleRecoveryClick = function (event) {\n      event.preventDefault();\n      fireNonCancelableEvent(onRecoveryClick);\n    };\n    if (statusType === 'error') {\n      return React.createElement(\"span\", null, React.createElement(InternalStatusIndicator, {\n        type: \"error\"\n      }, errorText), ' ', recoveryText && React.createElement(InternalLink, {\n        onFollow: handleRecoveryClick,\n        variant: \"recovery\"\n      }, recoveryText));\n    }\n    if (statusType === 'loading') {\n      return React.createElement(InternalStatusIndicator, {\n        type: \"loading\"\n      }, loadingText);\n    }\n    if (isNoMatch) {\n      return React.createElement(\"div\", {\n        className: styles.empty\n      }, noMatch);\n    }\n    if (isEmpty) {\n      return React.createElement(\"div\", {\n        className: styles.empty\n      }, empty);\n    }\n  }, [statusType, onRecoveryClick, isEmpty, isNoMatch, recoveryText, loadingText, errorText, empty, noMatch]);\n  return React.createElement(\"div\", {\n    className: styles.root,\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\"\n  }, !showChart && statusContainer);\n};\nexport default ChartStatusContainer;","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AAGtC,SAASC,sBAAsB,QAAmC,cAAc;AAChF,OAAOC,uBAAuB,MAAM,oCAAoC;AACxE,OAAOC,YAAY,MAAM,wBAAwB;AAEjD,OAAOC,MAAM,MAAM,iBAAiB;AAoBpC,OAAM,SAAUC,cAAc,CAAOC,EAQpC;MAPCC,YAAY;IACZC,WAAW;IACXC,UAAU;EAMV,IAAMC,OAAO,GAAG,CAACF,WAAW,IAAIA,WAAW,CAACG,MAAM,KAAK,CAAC;EACxD,IAAMC,SAAS,GAAGF,OAAO,IAAIF,WAAW,CAACG,MAAM,KAAKJ,YAAY,CAACI,MAAM;EACvE,IAAME,SAAS,GAAGJ,UAAU,KAAK,UAAU,IAAI,CAACC,OAAO;EACvD,OAAO;IAAEA,OAAO;IAAEE,SAAS;IAAEC,SAAS;EAAA,CAAE;AAC1C;AAEA,IAAMC,oBAAoB,GAAG,UAACR,EAWF;MAV1BG,UAAU;IACVM,SAAS;IACTC,WAAW;IACXC,YAAY;IACZC,OAAO;IACPC,KAAK;IACLC,eAAe;IACfR,SAAS;IACTF,OAAO;IACPG,SAAS;EAET,IAAMQ,eAAe,GAAGrB,OAAO,CAAC;IAC9B,IAAMsB,mBAAmB,GAAG,UAACC,KAAkB;MAC7CA,KAAK,CAACC,cAAc,EAAE;MACtBvB,sBAAsB,CAACmB,eAAe,CAAC;IACzC,CAAC;IACD,IAAIX,UAAU,KAAK,OAAO,EAAE;MAC1B,OACEV,kCACEA,oBAACG,uBAAuB;QAACuB,IAAI,EAAC;MAAO,GAAEV,SAAS,CAA2B,EAAC,GAAG,EAC9EE,YAAY,IACXlB,oBAACI,YAAY;QAACuB,QAAQ,EAAEJ,mBAAmB;QAAEK,OAAO,EAAC;MAAU,GAC5DV,YAAY,CAEhB,CACI;;IAIX,IAAIR,UAAU,KAAK,SAAS,EAAE;MAC5B,OAAOV,oBAACG,uBAAuB;QAACuB,IAAI,EAAC;MAAS,GAAET,WAAW,CAA2B;;IAGxF,IAAIJ,SAAS,EAAE;MACb,OAAOb;QAAK6B,SAAS,EAAExB,MAAM,CAACe;MAAK,GAAGD,OAAO,CAAO;;IAGtD,IAAIR,OAAO,EAAE;MACX,OAAOX;QAAK6B,SAAS,EAAExB,MAAM,CAACe;MAAK,GAAGA,KAAK,CAAO;;EAEtD,CAAC,EAAE,CAACV,UAAU,EAAEW,eAAe,EAAEV,OAAO,EAAEE,SAAS,EAAEK,YAAY,EAAED,WAAW,EAAED,SAAS,EAAEI,KAAK,EAAED,OAAO,CAAC,CAAC;EAE3G,OACEnB;IAAK6B,SAAS,EAAExB,MAAM,CAACyB,IAAI;IAAA,aAAY,QAAQ;IAAA,eAAa;EAAM,GAC/D,CAAChB,SAAS,IAAIQ,eAAe,CAC1B;AAEV,CAAC;AAED,eAAeP,oBAAoB","names":["React","useMemo","fireNonCancelableEvent","InternalStatusIndicator","InternalLink","styles","getChartStatus","_a","externalData","visibleData","statusType","isEmpty","length","isNoMatch","showChart","ChartStatusContainer","errorText","loadingText","recoveryText","noMatch","empty","onRecoveryClick","statusContainer","handleRecoveryClick","event","preventDefault","type","onFollow","variant","className","root"],"sources":["/Users/dcastro/node_modules/src/internal/components/chart-status-container/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\n\nimport { BaseComponentProps } from '../../base-component';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../../events';\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport InternalLink from '../../../link/internal';\n\nimport styles from './styles.css.js';\n\ninterface ChartStatusContainerProps extends BaseComponentProps {\n  statusType: 'loading' | 'finished' | 'error';\n\n  empty?: React.ReactNode;\n  noMatch?: React.ReactNode;\n\n  loadingText?: string;\n  errorText?: string;\n  recoveryText?: string;\n\n  onRecoveryClick?: NonCancelableEventHandler;\n\n  // From `getChartStatus`\n  isEmpty?: boolean;\n  isNoMatch?: boolean;\n  showChart?: boolean;\n}\n\nexport function getChartStatus<T, U>({\n  externalData,\n  visibleData,\n  statusType,\n}: {\n  externalData: ReadonlyArray<T>;\n  visibleData: ReadonlyArray<U>;\n  statusType: 'loading' | 'finished' | 'error';\n}) {\n  const isEmpty = !visibleData || visibleData.length === 0;\n  const isNoMatch = isEmpty && visibleData.length !== externalData.length;\n  const showChart = statusType === 'finished' && !isEmpty;\n  return { isEmpty, isNoMatch, showChart };\n}\n\nconst ChartStatusContainer = ({\n  statusType,\n  errorText,\n  loadingText,\n  recoveryText,\n  noMatch,\n  empty,\n  onRecoveryClick,\n  isNoMatch,\n  isEmpty,\n  showChart,\n}: ChartStatusContainerProps) => {\n  const statusContainer = useMemo(() => {\n    const handleRecoveryClick = (event: CustomEvent) => {\n      event.preventDefault();\n      fireNonCancelableEvent(onRecoveryClick);\n    };\n    if (statusType === 'error') {\n      return (\n        <span>\n          <InternalStatusIndicator type=\"error\">{errorText}</InternalStatusIndicator>{' '}\n          {recoveryText && (\n            <InternalLink onFollow={handleRecoveryClick} variant=\"recovery\">\n              {recoveryText}\n            </InternalLink>\n          )}\n        </span>\n      );\n    }\n\n    if (statusType === 'loading') {\n      return <InternalStatusIndicator type=\"loading\">{loadingText}</InternalStatusIndicator>;\n    }\n\n    if (isNoMatch) {\n      return <div className={styles.empty}>{noMatch}</div>;\n    }\n\n    if (isEmpty) {\n      return <div className={styles.empty}>{empty}</div>;\n    }\n  }, [statusType, onRecoveryClick, isEmpty, isNoMatch, recoveryText, loadingText, errorText, empty, noMatch]);\n\n  return (\n    <div className={styles.root} aria-live=\"polite\" aria-atomic=\"true\">\n      {!showChart && statusContainer}\n    </div>\n  );\n};\n\nexport default ChartStatusContainer;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}