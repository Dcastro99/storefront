{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState } from 'react';\nimport { useCallback, useRef } from 'react';\nimport { Transition as ReactTransitionGroupTransition } from 'react-transition-group';\nimport { useReducedMotion } from '../../hooks/use-visual-mode';\n/**\n * This component is a wrapper around the CSSTransition component.\n *\n * It provides a second parameter in its rendering function that must be\n * attached to the node that is transitioning.\n */\nexport function Transition(_a) {\n  var isIn = _a[\"in\"],\n    children = _a.children,\n    _b = _a.exit,\n    exit = _b === void 0 ? true : _b,\n    _c = _a.onStatusChange,\n    onStatusChange = _c === void 0 ? function () {\n      return void 0;\n    } : _c,\n    _d = _a.disabled,\n    disabled = _d === void 0 ? false : _d,\n    transitionChangeDelay = _a.transitionChangeDelay,\n    rest = __rest(_a, [\"in\", \"children\", \"exit\", \"onStatusChange\", \"disabled\", \"transitionChangeDelay\"]);\n  var transitionRootElement = useRef(null);\n  // the initial state of the transition should be either 'exited' or 'entered' depending\n  // on the `in` property, this mimicks how internally the Transition component works here:\n  // https://github.com/reactjs/react-transition-group/blob/6cbd6aaedaf8e9472007640b429ddb48c6c24158/src/Transition.js#L121\n  var _e = useState(isIn ? 'entered' : 'exited'),\n    transitionState = _e[0],\n    setTransitionState = _e[1];\n  var motionDisabled = useReducedMotion(transitionRootElement) || disabled;\n  var addTransitionEndListener = useCallback(function (done) {\n    var node = transitionRootElement.current;\n    if (node === null) {\n      return;\n    }\n    var listener = function (e) {\n      if (e.target === node) {\n        node.removeEventListener('transitionend', listener);\n        node.removeEventListener('animationend', listener);\n        done();\n      }\n    };\n    node.addEventListener('transitionend', listener);\n    node.addEventListener('animationend', listener);\n  }, []);\n  return React.createElement(ReactTransitionGroupTransition, __assign({\n    addEndListener: addTransitionEndListener,\n    timeout: motionDisabled ? 0 : undefined,\n    \"in\": isIn,\n    nodeRef: transitionRootElement,\n    exit: exit,\n    onEnter: function (isAppearing) {\n      if (!isAppearing) {\n        setTransitionState('enter');\n        onStatusChange('enter');\n      }\n    },\n    onEntering: function (isAppearing) {\n      var _a;\n      if (!isAppearing) {\n        // This line forces the browser to recalculate the layout because we want the starting state in the 'enter' style\n        // to be applied before the animation starts.\n        void ((_a = transitionRootElement.current) === null || _a === void 0 ? void 0 : _a.offsetHeight);\n        if (transitionChangeDelay === null || transitionChangeDelay === void 0 ? void 0 : transitionChangeDelay.entering) {\n          setTimeout(function () {\n            setTransitionState('entering');\n            onStatusChange('entering');\n          }, transitionChangeDelay === null || transitionChangeDelay === void 0 ? void 0 : transitionChangeDelay.entering);\n        } else {\n          setTransitionState('entering');\n          onStatusChange('entering');\n        }\n      }\n    },\n    onEntered: function (isAppearing) {\n      if (!isAppearing) {\n        setTransitionState('entered');\n        onStatusChange('entered');\n      }\n    },\n    onExit: function () {\n      setTransitionState('exit');\n      onStatusChange('exit');\n    },\n    onExiting: function () {\n      setTransitionState('exiting');\n      onStatusChange('exiting');\n    },\n    onExited: function () {\n      setTransitionState('exited');\n      onStatusChange('exited');\n    }\n  }, rest), function () {\n    return children(transitionState, transitionRootElement);\n  });\n}","map":{"version":3,"mappings":"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","names":["React","useState","useCallback","useRef","Transition","ReactTransitionGroupTransition","useReducedMotion","_a","isIn","children","_b","exit","_c","onStatusChange","_d","disabled","transitionChangeDelay","rest","transitionRootElement","transitionState","setTransitionState","motionDisabled","addTransitionEndListener","done","node","current","listener","e","target","removeEventListener","addEventListener","addEndListener","timeout","undefined","nodeRef","onEnter","isAppearing","onEntering","offsetHeight","entering","setTimeout","onEntered","onExit","onExiting","onExited"],"sources":["/Users/dcastro/node_modules/src/internal/components/transition/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState } from 'react';\nimport { MutableRefObject, useCallback, useRef } from 'react';\nimport {\n  Transition as ReactTransitionGroupTransition,\n  TransitionStatus as ReactTransitionGroupTransitionStatus,\n} from 'react-transition-group';\nimport { useReducedMotion } from '../../hooks/use-visual-mode';\n\nexport type TransitionStatus = ReactTransitionGroupTransitionStatus | 'enter' | 'exit';\n\nexport interface TransitionProps {\n  in: boolean;\n  exit?: boolean;\n\n  disabled?: boolean;\n\n  children: (state: TransitionStatus, transitioningElementRef: MutableRefObject<any>) => React.ReactNode;\n  onStatusChange?: (status: TransitionStatus) => void;\n  transitionChangeDelay?: { entering?: number };\n}\n\n/**\n * This component is a wrapper around the CSSTransition component.\n *\n * It provides a second parameter in its rendering function that must be\n * attached to the node that is transitioning.\n */\nexport function Transition({\n  in: isIn,\n  children,\n  exit = true,\n  onStatusChange = () => void 0,\n  disabled = false,\n  transitionChangeDelay,\n  ...rest\n}: TransitionProps) {\n  const transitionRootElement = useRef<HTMLElement>(null);\n  // the initial state of the transition should be either 'exited' or 'entered' depending\n  // on the `in` property, this mimicks how internally the Transition component works here:\n  // https://github.com/reactjs/react-transition-group/blob/6cbd6aaedaf8e9472007640b429ddb48c6c24158/src/Transition.js#L121\n  const [transitionState, setTransitionState] = useState<TransitionStatus>(isIn ? 'entered' : 'exited');\n  const motionDisabled = useReducedMotion(transitionRootElement) || disabled;\n\n  const addTransitionEndListener = useCallback((done: () => void) => {\n    const node = transitionRootElement.current;\n\n    if (node === null) {\n      return;\n    }\n    const listener = (e: TransitionEvent | AnimationEvent) => {\n      if (e.target === node) {\n        node.removeEventListener('transitionend', listener);\n        node.removeEventListener('animationend', listener);\n        done();\n      }\n    };\n    node.addEventListener('transitionend', listener);\n    node.addEventListener('animationend', listener);\n  }, []);\n\n  return (\n    <ReactTransitionGroupTransition\n      addEndListener={addTransitionEndListener}\n      timeout={motionDisabled ? 0 : undefined}\n      in={isIn}\n      nodeRef={transitionRootElement}\n      exit={exit}\n      onEnter={isAppearing => {\n        if (!isAppearing) {\n          setTransitionState('enter');\n          onStatusChange('enter');\n        }\n      }}\n      onEntering={isAppearing => {\n        if (!isAppearing) {\n          // This line forces the browser to recalculate the layout because we want the starting state in the 'enter' style\n          // to be applied before the animation starts.\n          void transitionRootElement.current?.offsetHeight;\n\n          if (transitionChangeDelay?.entering) {\n            setTimeout(() => {\n              setTransitionState('entering');\n              onStatusChange('entering');\n            }, transitionChangeDelay?.entering);\n          } else {\n            setTransitionState('entering');\n            onStatusChange('entering');\n          }\n        }\n      }}\n      onEntered={isAppearing => {\n        if (!isAppearing) {\n          setTransitionState('entered');\n          onStatusChange('entered');\n        }\n      }}\n      onExit={() => {\n        setTransitionState('exit');\n        onStatusChange('exit');\n      }}\n      onExiting={() => {\n        setTransitionState('exiting');\n        onStatusChange('exiting');\n      }}\n      onExited={() => {\n        setTransitionState('exited');\n        onStatusChange('exited');\n      }}\n      {...rest}\n    >\n      {() => children(transitionState, transitionRootElement)}\n    </ReactTransitionGroupTransition>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}