{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport FocusLock from 'react-focus-lock';\nimport Header from '../header';\nimport { UtilityMenuItem } from '../menu-item';\nimport styles from '../../../styles.css.js';\nimport { useUniqueId } from '../../../../internal/hooks/use-unique-id';\nvar UtilitiesView = function (_a) {\n  var headerText = _a.headerText,\n    dismissIconAriaLabel = _a.dismissIconAriaLabel,\n    onClose = _a.onClose,\n    _b = _a.items,\n    items = _b === void 0 ? [] : _b,\n    focusIndex = _a.focusIndex;\n  var headerId = useUniqueId('overflow-menu-header');\n  var ref = useRef(null);\n  useEffect(function () {\n    var _a;\n    // A focus index is used to set the focus back to the submenu trigger\n    // returning from a submenu.\n    if (typeof focusIndex === 'number') {\n      (_a = ref.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [focusIndex]);\n  return React.createElement(FocusLock, {\n    returnFocus: true\n  }, React.createElement(Header, {\n    dismissIconAriaLabel: dismissIconAriaLabel,\n    onClose: onClose\n  }, React.createElement(\"span\", {\n    id: headerId\n  }, headerText)), React.createElement(\"ul\", {\n    className: styles['overflow-menu-list'],\n    \"aria-labelledby\": headerId\n  }, items.map(function (utility, index) {\n    return React.createElement(UtilityMenuItem, __assign({\n      key: index,\n      index: index,\n      ref: index === focusIndex ? ref : undefined\n    }, utility));\n  })));\n};\nexport default UtilitiesView;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,SAAS,MAAM,kBAAkB;AAExC,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAASC,eAAe,QAAQ,cAAc;AAK9C,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,SAASC,WAAW,QAAQ,0CAA0C;AAOtE,IAAMC,aAAa,GAAG,UAACC,EAAyF;MAAvFC,UAAU;IAAEC,oBAAoB;IAAEC,OAAO;IAAEC,aAAU;IAAVC,KAAK,mBAAG,EAAE;IAAEC,UAAU;EACxF,IAAMC,QAAQ,GAAGT,WAAW,CAAC,sBAAsB,CAAC;EACpD,IAAMU,GAAG,GAAGf,MAAM,CAAwC,IAAI,CAAC;EAE/DD,SAAS,CAAC;;IACR;IACA;IACA,IAAI,OAAOc,UAAU,KAAK,QAAQ,EAAE;MAClC,SAAG,CAACG,OAAO,0CAAEC,KAAK,EAAE;;EAExB,CAAC,EAAE,CAACJ,UAAU,CAAC,CAAC;EAEhB,OACEf,oBAACG,SAAS;IAACiB,WAAW,EAAE;EAAI,GAC1BpB,oBAACI,MAAM;IAACO,oBAAoB,EAAEA,oBAAoB;IAAEC,OAAO,EAAEA;EAAO,GAClEZ;IAAMqB,EAAE,EAAEL;EAAQ,GAAGN,UAAU,CAAQ,CAChC,EACTV;IAAIsB,SAAS,EAAEhB,MAAM,CAAC,oBAAoB,CAAC;IAAA,mBAAmBU;EAAQ,GACnEF,KAAK,CAACS,GAAG,CAAC,UAACC,OAAO,EAAEC,KAAK;IAAK,OAC7BzB,oBAACK,eAAe;MAACqB,GAAG,EAAED,KAAK;MAAEA,KAAK,EAAEA,KAAK;MAAER,GAAG,EAAEQ,KAAK,KAAKV,UAAU,GAAGE,GAAG,GAAGU;IAAS,GAAMH,OAAO,EAAI;EAD1E,CAE9B,CAAC,CACC,CACK;AAEhB,CAAC;AAED,eAAehB,aAAa","names":["React","useEffect","useRef","FocusLock","Header","UtilityMenuItem","styles","useUniqueId","UtilitiesView","_a","headerText","dismissIconAriaLabel","onClose","_b","items","focusIndex","headerId","ref","current","focus","returnFocus","id","className","map","utility","index","key","undefined"],"sources":["/Users/dcastro/node_modules/src/top-navigation/parts/overflow-menu/views/utilities.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport FocusLock from 'react-focus-lock';\n\nimport Header from '../header';\nimport { UtilityMenuItem } from '../menu-item';\n\nimport { TopNavigationProps } from '../../../interfaces';\n\nimport { View } from '..';\nimport styles from '../../../styles.css.js';\nimport { useUniqueId } from '../../../../internal/hooks/use-unique-id';\n\ninterface UtilitiesViewProps extends View {\n  items: TopNavigationProps['utilities'];\n  focusIndex?: number;\n}\n\nconst UtilitiesView = ({ headerText, dismissIconAriaLabel, onClose, items = [], focusIndex }: UtilitiesViewProps) => {\n  const headerId = useUniqueId('overflow-menu-header');\n  const ref = useRef<HTMLAnchorElement & HTMLButtonElement>(null);\n\n  useEffect(() => {\n    // A focus index is used to set the focus back to the submenu trigger\n    // returning from a submenu.\n    if (typeof focusIndex === 'number') {\n      ref.current?.focus();\n    }\n  }, [focusIndex]);\n\n  return (\n    <FocusLock returnFocus={true}>\n      <Header dismissIconAriaLabel={dismissIconAriaLabel} onClose={onClose}>\n        <span id={headerId}>{headerText}</span>\n      </Header>\n      <ul className={styles['overflow-menu-list']} aria-labelledby={headerId}>\n        {items.map((utility, index) => (\n          <UtilityMenuItem key={index} index={index} ref={index === focusIndex ? ref : undefined} {...utility} />\n        ))}\n      </ul>\n    </FocusLock>\n  );\n};\n\nexport default UtilitiesView;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}