{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { useContainerQuery } from '../../hooks/container-queries';\nexport default memo(LabelsMeasure);\n// Places the invisible left-hand side labels to calculate their maximum width.\nfunction LabelsMeasure(_a) {\n  var scale = _a.scale,\n    ticks = _a.ticks,\n    tickFormatter = _a.tickFormatter,\n    autoWidth = _a.autoWidth;\n  var _b = useContainerQuery(function (rect) {\n      return rect.width;\n    }),\n    width = _b[0],\n    ref = _b[1];\n  // Tell elements's width to the parent.\n  useEffect(function () {\n    autoWidth(width || 0);\n  }, [autoWidth, width]);\n  var labelMapper = function (value) {\n    var scaledValue = scale.d3Scale(value);\n    if (scaledValue === undefined || !isFinite(scaledValue)) {\n      return null;\n    }\n    return React.createElement(\"div\", {\n      key: \"\".concat(value),\n      className: styles['labels-left__label'],\n      \"aria-hidden\": \"true\"\n    }, tickFormatter ? tickFormatter(value) : value.toString());\n  };\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: clsx(styles['labels-left'], styles['labels-left--hidden'])\n  }, ticks.map(labelMapper));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,IAAI,EAAEC,SAAS,QAAQ,OAAO;AAC9C,OAAOC,IAAI,MAAM,MAAM;AAIvB,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,iBAAiB,QAAQ,+BAA+B;AAUjE,eAAeJ,IAAI,CAACK,aAAa,CAAyB;AAE1D;AACA,SAASA,aAAa,CAACC,EAA8D;MAA5DC,KAAK;IAAEC,KAAK;IAAEC,aAAa;IAAEC,SAAS;EACvD,SAAeN,iBAAiB,CAAS,cAAI;MAAI,WAAI,CAACO,KAAK;IAAV,CAAU,CAAC;IAA3DA,KAAK;IAAEC,GAAG,QAAiD;EAElE;EACAX,SAAS,CAAC;IACRS,SAAS,CAACC,KAAK,IAAI,CAAC,CAAC;EACvB,CAAC,EAAE,CAACD,SAAS,EAAEC,KAAK,CAAC,CAAC;EAEtB,IAAME,WAAW,GAAG,UAACC,KAAqB;IACxC,IAAMC,WAAW,GAAGR,KAAK,CAACS,OAAO,CAACF,KAAY,CAAC;IAC/C,IAAIC,WAAW,KAAKE,SAAS,IAAI,CAACC,QAAQ,CAACH,WAAW,CAAC,EAAE;MACvD,OAAO,IAAI;;IAGb,OACEhB;MAAKoB,GAAG,EAAE,UAAGL,KAAK,CAAE;MAAEM,SAAS,EAAEjB,MAAM,CAAC,oBAAoB,CAAC;MAAA,eAAc;IAAM,GAC9EM,aAAa,GAAGA,aAAa,CAACK,KAAY,CAAC,GAAGA,KAAK,CAACO,QAAQ,EAAE,CAC3D;EAEV,CAAC;EAED,OACEtB;IAAKa,GAAG,EAAEA,GAAG;IAAEQ,SAAS,EAAElB,IAAI,CAACC,MAAM,CAAC,aAAa,CAAC,EAAEA,MAAM,CAAC,qBAAqB,CAAC;EAAC,GACjFK,KAAK,CAACc,GAAG,CAACT,WAAW,CAAC,CACnB;AAEV","names":["React","memo","useEffect","clsx","styles","useContainerQuery","LabelsMeasure","_a","scale","ticks","tickFormatter","autoWidth","width","ref","labelMapper","value","scaledValue","d3Scale","undefined","isFinite","key","className","toString","map"],"sources":["/Users/dcastro/node_modules/src/internal/components/cartesian-chart/labels-measure.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useEffect } from 'react';\nimport clsx from 'clsx';\n\nimport { ChartScale, NumericChartScale } from './scales';\n\nimport styles from './styles.css.js';\nimport { useContainerQuery } from '../../hooks/container-queries';\nimport { ChartDataTypes } from '../../../mixed-line-bar-chart/interfaces';\n\ninterface LabelsMeasureProps {\n  scale: ChartScale | NumericChartScale;\n  ticks: readonly ChartDataTypes[];\n  tickFormatter?: (value: ChartDataTypes) => string;\n  autoWidth: (value: number) => void;\n}\n\nexport default memo(LabelsMeasure) as typeof LabelsMeasure;\n\n// Places the invisible left-hand side labels to calculate their maximum width.\nfunction LabelsMeasure({ scale, ticks, tickFormatter, autoWidth }: LabelsMeasureProps) {\n  const [width, ref] = useContainerQuery<number>(rect => rect.width);\n\n  // Tell elements's width to the parent.\n  useEffect(() => {\n    autoWidth(width || 0);\n  }, [autoWidth, width]);\n\n  const labelMapper = (value: ChartDataTypes) => {\n    const scaledValue = scale.d3Scale(value as any);\n    if (scaledValue === undefined || !isFinite(scaledValue)) {\n      return null;\n    }\n\n    return (\n      <div key={`${value}`} className={styles['labels-left__label']} aria-hidden=\"true\">\n        {tickFormatter ? tickFormatter(value as any) : value.toString()}\n      </div>\n    );\n  };\n\n  return (\n    <div ref={ref} className={clsx(styles['labels-left'], styles['labels-left--hidden'])}>\n      {ticks.map(labelMapper)}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}