{"ast":null,"code":"import { __assign } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport styles from './styles.css.js';\nimport { isSameMonth, isAfter, isBefore, isSameDay, addWeeks, addDays, isLastDayOfMonth, getDaysInMonth, isToday } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport { getDateLabel, renderDayName } from '../../../calendar/utils/intl';\nimport clsx from 'clsx';\nimport { formatDate } from '../../../internal/utils/date-time';\nimport useFocusVisible from '../../../internal/hooks/focus-visible/index.js';\nimport ScreenreaderOnly from '../../../internal/components/screenreader-only/index.js';\nexport function Grid(_a) {\n  var baseDate = _a.baseDate,\n    selectedStartDate = _a.selectedStartDate,\n    selectedEndDate = _a.selectedEndDate,\n    rangeStartDate = _a.rangeStartDate,\n    rangeEndDate = _a.rangeEndDate,\n    focusedDate = _a.focusedDate,\n    focusedDateRef = _a.focusedDateRef,\n    onSelectDate = _a.onSelectDate,\n    onGridKeyDownHandler = _a.onGridKeyDownHandler,\n    onFocusedDateChange = _a.onFocusedDateChange,\n    isDateEnabled = _a.isDateEnabled,\n    locale = _a.locale,\n    startOfWeek = _a.startOfWeek,\n    todayAriaLabel = _a.todayAriaLabel,\n    ariaLabelledby = _a.ariaLabelledby,\n    className = _a.className;\n  var baseDateTime = baseDate === null || baseDate === void 0 ? void 0 : baseDate.getTime();\n  // `baseDateTime` is used as a more stable replacement for baseDate\n  var weeks = useMemo(function () {\n    return getCalendarMonth(baseDate, {\n      firstDayOfWeek: startOfWeek\n    });\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [baseDateTime, startOfWeek]);\n  var weekdays = weeks[0].map(function (date) {\n    return date.getDay();\n  });\n  var focusVisible = useFocusVisible();\n  return React.createElement(\"table\", {\n    role: \"grid\",\n    \"aria-labelledby\": ariaLabelledby,\n    className: clsx(styles.grid, className)\n  }, React.createElement(\"thead\", null, React.createElement(\"tr\", null, weekdays.map(function (dayIndex) {\n    return React.createElement(\"th\", {\n      key: dayIndex,\n      scope: \"col\",\n      className: clsx(styles['grid-cell'], styles['day-header'])\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, renderDayName(locale, dayIndex, 'short')), React.createElement(ScreenreaderOnly, null, renderDayName(locale, dayIndex, 'long')));\n  }))), React.createElement(\"tbody\", {\n    onKeyDown: onGridKeyDownHandler\n  }, weeks.map(function (week, weekIndex) {\n    return React.createElement(\"tr\", {\n      key: weekIndex,\n      className: styles.week\n    }, week.map(function (date, dateIndex) {\n      var _a, _b, _c;\n      var isStartDate = !!selectedStartDate && isSameDay(date, selectedStartDate);\n      var isEndDate = !!selectedEndDate && isSameDay(date, selectedEndDate);\n      var isSelected = isStartDate || isEndDate;\n      var isRangeStartDate = !!rangeStartDate && isSameDay(date, rangeStartDate);\n      var isRangeEndDate = !!rangeEndDate && isSameDay(date, rangeEndDate);\n      var isFocused = !!focusedDate && isSameDay(date, focusedDate) && isSameMonth(date, baseDate);\n      var dateIsInRange = isStartDate || isEndDate || isInRange(date, rangeStartDate, rangeEndDate);\n      var inRangeStartWeek = rangeStartDate && isInRange(date, rangeStartDate, addDays(addWeeks(rangeStartDate, 1), -1));\n      var inRangeEndWeek = rangeEndDate && isInRange(date, rangeEndDate, addDays(addWeeks(rangeEndDate, -1), 1));\n      var onlyOneSelected = !!rangeStartDate && !!rangeEndDate ? isSameDay(rangeStartDate, rangeEndDate) : !selectedStartDate || !selectedEndDate;\n      var isEnabled = !isDateEnabled || isDateEnabled(date);\n      var isFocusable = isFocused && isEnabled;\n      var baseClasses = (_a = {}, _a[styles.day] = true, _a[styles['grid-cell']] = true, _a[styles['in-first-row']] = weekIndex === 0, _a[styles['in-first-column']] = dateIndex === 0, _a);\n      if (!isSameMonth(date, baseDate)) {\n        return React.createElement(\"td\", {\n          key: \"\".concat(weekIndex, \":\").concat(dateIndex),\n          ref: isFocused ? focusedDateRef : undefined,\n          className: clsx(baseClasses, (_b = {}, _b[styles['in-previous-month']] = isBefore(date, baseDate), _b[styles['last-day-of-month']] = isLastDayOfMonth(date), _b[styles['in-next-month']] = isAfter(date, baseDate), _b))\n        });\n      }\n      var handlers = {};\n      if (isEnabled) {\n        handlers.onClick = function () {\n          return onSelectDate(date);\n        };\n        handlers.onFocus = function () {\n          return onFocusedDateChange(date);\n        };\n      }\n      // Can't be focused.\n      var tabIndex = undefined;\n      if (isFocusable && isEnabled) {\n        // Next focus target.\n        tabIndex = 0;\n      } else if (isEnabled) {\n        // Can be focused programmatically.\n        tabIndex = -1;\n      }\n      // Screen-reader announcement for the focused day.\n      var dayAnnouncement = getDateLabel(locale, date, 'short');\n      if (isToday(date)) {\n        dayAnnouncement += '. ' + todayAriaLabel;\n      }\n      return React.createElement(\"td\", __assign({\n        ref: isFocused ? focusedDateRef : undefined,\n        key: \"\".concat(weekIndex, \":\").concat(dateIndex),\n        className: clsx(baseClasses, (_c = {}, _c[styles['in-current-month']] = isSameMonth(date, baseDate), _c[styles.enabled] = isEnabled, _c[styles.selected] = isSelected, _c[styles['start-date']] = isStartDate, _c[styles['end-date']] = isEndDate, _c[styles['range-start-date']] = isRangeStartDate, _c[styles['range-end-date']] = isRangeEndDate, _c[styles['no-range']] = isSelected && onlyOneSelected, _c[styles['in-range']] = dateIsInRange, _c[styles['in-range-border-top']] = !!inRangeStartWeek || date.getDate() <= 7, _c[styles['in-range-border-bottom']] = !!inRangeEndWeek || date.getDate() > getDaysInMonth(date) - 7, _c[styles['in-range-border-left']] = dateIndex === 0 || date.getDate() === 1 || isRangeStartDate, _c[styles['in-range-border-right']] = dateIndex === week.length - 1 || isLastDayOfMonth(date) || isRangeEndDate, _c[styles.today] = isToday(date), _c)),\n        \"aria-selected\": isEnabled ? isSelected || dateIsInRange : undefined,\n        \"aria-current\": isToday(date) ? 'date' : undefined,\n        \"data-date\": formatDate(date),\n        \"aria-disabled\": !isEnabled,\n        tabIndex: tabIndex\n      }, handlers, focusVisible), React.createElement(\"span\", {\n        className: styles['day-inner'],\n        \"aria-hidden\": \"true\"\n      }, date.getDate()), React.createElement(ScreenreaderOnly, null, dayAnnouncement));\n    }));\n  })));\n}\nfunction isInRange(date, dateOne, dateTwo) {\n  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {\n    return false;\n  }\n  var inRange = isAfter(date, dateOne) && isBefore(date, dateTwo) || isAfter(date, dateTwo) && isBefore(date, dateOne);\n  return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);\n}","map":{"version":3,"mappings":"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","names":["React","useMemo","styles","isSameMonth","isAfter","isBefore","isSameDay","addWeeks","addDays","isLastDayOfMonth","getDaysInMonth","isToday","getCalendarMonth","getDateLabel","renderDayName","clsx","formatDate","useFocusVisible","ScreenreaderOnly","Grid","_a","baseDate","selectedStartDate","selectedEndDate","rangeStartDate","rangeEndDate","focusedDate","focusedDateRef","onSelectDate","onGridKeyDownHandler","onFocusedDateChange","isDateEnabled","locale","startOfWeek","todayAriaLabel","ariaLabelledby","className","baseDateTime","getTime","weeks","firstDayOfWeek","weekdays","map","getDay","focusVisible","role","grid","key","dayIndex","scope","onKeyDown","week","weekIndex","date","dateIndex","isStartDate","isEndDate","isSelected","isRangeStartDate","isRangeEndDate","isFocused","dateIsInRange","isInRange","inRangeStartWeek","inRangeEndWeek","onlyOneSelected","isEnabled","isFocusable","baseClasses","day","ref","undefined","_b","handlers","onClick","onFocus","tabIndex","dayAnnouncement","_c","enabled","selected","getDate","length","today","dateOne","dateTwo","inRange"],"sources":["/Users/dcastro/node_modules/src/date-range-picker/calendar/grids/grid.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport styles from './styles.css.js';\nimport {\n  isSameMonth,\n  isAfter,\n  isBefore,\n  isSameDay,\n  addWeeks,\n  addDays,\n  isLastDayOfMonth,\n  getDaysInMonth,\n  isToday,\n} from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport { DateChangeHandler, DayIndex } from '../index';\nimport { DateRangePickerProps } from '../../interfaces';\nimport { getDateLabel, renderDayName } from '../../../calendar/utils/intl';\nimport clsx from 'clsx';\nimport { formatDate } from '../../../internal/utils/date-time';\nimport useFocusVisible from '../../../internal/hooks/focus-visible/index.js';\nimport ScreenreaderOnly from '../../../internal/components/screenreader-only/index.js';\n\n/**\n * Calendar grid supports two mechanisms of keyboard navigation:\n * - Native screen-reader table navigation (semantic table markup);\n * - Keyboard arrow-keys navigation (a custom key-down handler).\n *\n * The implementation largely follows the w3 example (https://www.w3.org/WAI/ARIA/apg/example-index/dialog-modal/datepicker-dialog) and shares the following issues:\n * - (table navigation) Chrome+VO - weekday is announced twice when navigating to the calendar's header;\n * - (table navigation) Safari+VO - \"dimmed\" state is announced twice;\n * - (table navigation) Firefox/Chrome+NVDA - cannot use table navigation if any cell has a focus;\n * - (keyboard navigation) Firefox+NVDA - every day is announced as \"not selected\";\n * - (keyboard navigation) Safari/Chrome+VO - weekdays are not announced;\n * - (keyboard navigation) Safari/Chrome+VO - days are not announced as interactive (clickable or selectable);\n * - (keyboard navigation) Safari/Chrome+VO - day announcements are not interruptive and can be missed if navigating fast.\n */\n\nexport interface GridProps {\n  baseDate: Date;\n  selectedStartDate: Date | null;\n  selectedEndDate: Date | null;\n\n  rangeStartDate: Date | null;\n  rangeEndDate: Date | null;\n\n  focusedDate: Date | null;\n  focusedDateRef: React.RefObject<HTMLTableCellElement>;\n\n  onSelectDate: DateChangeHandler;\n  onGridKeyDownHandler: (e: React.KeyboardEvent) => void;\n  onFocusedDateChange: React.Dispatch<React.SetStateAction<Date | null>>;\n\n  isDateEnabled: DateRangePickerProps.IsDateEnabledFunction;\n\n  locale: string;\n  startOfWeek: DayIndex;\n  todayAriaLabel: string;\n  ariaLabelledby: string;\n\n  className?: string;\n}\n\nexport function Grid({\n  baseDate,\n  selectedStartDate,\n  selectedEndDate,\n  rangeStartDate,\n  rangeEndDate,\n  focusedDate,\n\n  focusedDateRef,\n\n  onSelectDate,\n  onGridKeyDownHandler,\n  onFocusedDateChange,\n\n  isDateEnabled,\n\n  locale,\n  startOfWeek,\n  todayAriaLabel,\n  ariaLabelledby,\n\n  className,\n}: GridProps) {\n  const baseDateTime = baseDate?.getTime();\n  // `baseDateTime` is used as a more stable replacement for baseDate\n  const weeks = useMemo<Date[][]>(\n    () => getCalendarMonth(baseDate, { firstDayOfWeek: startOfWeek }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [baseDateTime, startOfWeek]\n  );\n  const weekdays = weeks[0].map(date => date.getDay());\n\n  const focusVisible = useFocusVisible();\n\n  return (\n    <table role=\"grid\" aria-labelledby={ariaLabelledby} className={clsx(styles.grid, className)}>\n      <thead>\n        <tr>\n          {weekdays.map(dayIndex => (\n            <th key={dayIndex} scope=\"col\" className={clsx(styles['grid-cell'], styles['day-header'])}>\n              <span aria-hidden=\"true\">{renderDayName(locale, dayIndex, 'short')}</span>\n              <ScreenreaderOnly>{renderDayName(locale, dayIndex, 'long')}</ScreenreaderOnly>\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody onKeyDown={onGridKeyDownHandler}>\n        {weeks.map((week, weekIndex) => {\n          return (\n            <tr key={weekIndex} className={styles.week}>\n              {week.map((date, dateIndex) => {\n                const isStartDate = !!selectedStartDate && isSameDay(date, selectedStartDate);\n                const isEndDate = !!selectedEndDate && isSameDay(date, selectedEndDate);\n                const isSelected = isStartDate || isEndDate;\n                const isRangeStartDate = !!rangeStartDate && isSameDay(date, rangeStartDate);\n                const isRangeEndDate = !!rangeEndDate && isSameDay(date, rangeEndDate);\n\n                const isFocused = !!focusedDate && isSameDay(date, focusedDate) && isSameMonth(date, baseDate);\n\n                const dateIsInRange = isStartDate || isEndDate || isInRange(date, rangeStartDate, rangeEndDate);\n                const inRangeStartWeek =\n                  rangeStartDate && isInRange(date, rangeStartDate, addDays(addWeeks(rangeStartDate, 1), -1));\n                const inRangeEndWeek =\n                  rangeEndDate && isInRange(date, rangeEndDate, addDays(addWeeks(rangeEndDate, -1), 1));\n                const onlyOneSelected =\n                  !!rangeStartDate && !!rangeEndDate\n                    ? isSameDay(rangeStartDate, rangeEndDate)\n                    : !selectedStartDate || !selectedEndDate;\n\n                const isEnabled = !isDateEnabled || isDateEnabled(date);\n                const isFocusable = isFocused && isEnabled;\n\n                const baseClasses = {\n                  [styles.day]: true,\n                  [styles['grid-cell']]: true,\n                  [styles['in-first-row']]: weekIndex === 0,\n                  [styles['in-first-column']]: dateIndex === 0,\n                };\n\n                if (!isSameMonth(date, baseDate)) {\n                  return (\n                    <td\n                      key={`${weekIndex}:${dateIndex}`}\n                      ref={isFocused ? focusedDateRef : undefined}\n                      className={clsx(baseClasses, {\n                        [styles['in-previous-month']]: isBefore(date, baseDate),\n                        [styles['last-day-of-month']]: isLastDayOfMonth(date),\n                        [styles['in-next-month']]: isAfter(date, baseDate),\n                      })}\n                    ></td>\n                  );\n                }\n\n                const handlers: React.HTMLAttributes<HTMLDivElement> = {};\n                if (isEnabled) {\n                  handlers.onClick = () => onSelectDate(date);\n                  handlers.onFocus = () => onFocusedDateChange(date);\n                }\n\n                // Can't be focused.\n                let tabIndex = undefined;\n                if (isFocusable && isEnabled) {\n                  // Next focus target.\n                  tabIndex = 0;\n                } else if (isEnabled) {\n                  // Can be focused programmatically.\n                  tabIndex = -1;\n                }\n\n                // Screen-reader announcement for the focused day.\n                let dayAnnouncement = getDateLabel(locale, date, 'short');\n                if (isToday(date)) {\n                  dayAnnouncement += '. ' + todayAriaLabel;\n                }\n\n                return (\n                  <td\n                    ref={isFocused ? focusedDateRef : undefined}\n                    key={`${weekIndex}:${dateIndex}`}\n                    className={clsx(baseClasses, {\n                      [styles['in-current-month']]: isSameMonth(date, baseDate),\n                      [styles.enabled]: isEnabled,\n                      [styles.selected]: isSelected,\n                      [styles['start-date']]: isStartDate,\n                      [styles['end-date']]: isEndDate,\n                      [styles['range-start-date']]: isRangeStartDate,\n                      [styles['range-end-date']]: isRangeEndDate,\n                      [styles['no-range']]: isSelected && onlyOneSelected,\n                      [styles['in-range']]: dateIsInRange,\n                      [styles['in-range-border-top']]: !!inRangeStartWeek || date.getDate() <= 7,\n                      [styles['in-range-border-bottom']]: !!inRangeEndWeek || date.getDate() > getDaysInMonth(date) - 7,\n                      [styles['in-range-border-left']]: dateIndex === 0 || date.getDate() === 1 || isRangeStartDate,\n                      [styles['in-range-border-right']]:\n                        dateIndex === week.length - 1 || isLastDayOfMonth(date) || isRangeEndDate,\n                      [styles.today]: isToday(date),\n                    })}\n                    aria-selected={isEnabled ? isSelected || dateIsInRange : undefined}\n                    aria-current={isToday(date) ? 'date' : undefined}\n                    data-date={formatDate(date)}\n                    aria-disabled={!isEnabled}\n                    tabIndex={tabIndex}\n                    {...handlers}\n                    {...focusVisible}\n                  >\n                    <span className={styles['day-inner']} aria-hidden=\"true\">\n                      {date.getDate()}\n                    </span>\n                    <ScreenreaderOnly>{dayAnnouncement}</ScreenreaderOnly>\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nfunction isInRange(date: Date, dateOne: Date | null, dateTwo: Date | null) {\n  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {\n    return false;\n  }\n\n  const inRange =\n    (isAfter(date, dateOne) && isBefore(date, dateTwo)) || (isAfter(date, dateTwo) && isBefore(date, dateOne));\n\n  return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}