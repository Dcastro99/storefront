{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useImperativeHandle, useRef } from 'react';\nimport styles from './styles.css.js';\nimport { getCardsPerRow } from './cards-layout-helper';\nimport { getBaseProps } from '../internal/base-component';\nimport { useContainerQuery } from '../internal/hooks/container-queries/use-container-query';\nimport ToolsHeader from '../table/tools-header';\nimport { getItemKey } from '../table/utils';\nimport { focusMarkers, useFocusMove, useSelection } from '../table/use-selection';\nimport SelectionControl from '../table/selection-control';\nimport InternalContainer from '../container/internal';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport stickyScrolling from '../table/sticky-scrolling';\nimport { useSupportsStickyHeader } from '../container/use-sticky-header';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nvar Cards = React.forwardRef(function (_a, ref) {\n  var _b = _a.items,\n    items = _b === void 0 ? [] : _b,\n    cardDefinition = _a.cardDefinition,\n    _c = _a.cardsPerRow,\n    cardsPerRow = _c === void 0 ? [] : _c,\n    header = _a.header,\n    filter = _a.filter,\n    pagination = _a.pagination,\n    preferences = _a.preferences,\n    empty = _a.empty,\n    loading = _a.loading,\n    loadingText = _a.loadingText,\n    trackBy = _a.trackBy,\n    selectedItems = _a.selectedItems,\n    selectionType = _a.selectionType,\n    isItemDisabled = _a.isItemDisabled,\n    onSelectionChange = _a.onSelectionChange,\n    ariaLabels = _a.ariaLabels,\n    visibleSections = _a.visibleSections,\n    stickyHeader = _a.stickyHeader,\n    stickyHeaderVerticalOffset = _a.stickyHeaderVerticalOffset,\n    _d = _a.variant,\n    variant = _d === void 0 ? 'container' : _d,\n    rest = __rest(_a, [\"items\", \"cardDefinition\", \"cardsPerRow\", \"header\", \"filter\", \"pagination\", \"preferences\", \"empty\", \"loading\", \"loadingText\", \"trackBy\", \"selectedItems\", \"selectionType\", \"isItemDisabled\", \"onSelectionChange\", \"ariaLabels\", \"visibleSections\", \"stickyHeader\", \"stickyHeaderVerticalOffset\", \"variant\"]);\n  var __internalRootRef = useBaseComponent('Cards').__internalRootRef;\n  var baseProps = getBaseProps(rest);\n  var isRefresh = useVisualRefresh();\n  var computedVariant = isRefresh ? variant : 'container';\n  var instanceUniqueId = useUniqueId('cards');\n  var cardsId = (baseProps === null || baseProps === void 0 ? void 0 : baseProps.id) || instanceUniqueId;\n  var cardsHeaderId = header ? \"\".concat(cardsId, \"-header\") : undefined;\n  var _e = useContainerQuery(function (_a) {\n      var width = _a.width;\n      return getCardsPerRow(width, cardsPerRow);\n    }, [cardsPerRow]),\n    columns = _e[0],\n    measureRef = _e[1];\n  var refObject = useRef(null);\n  var mergedRef = useMergeRefs(measureRef, refObject, __internalRootRef);\n  var _f = useSelection({\n      items: items,\n      trackBy: trackBy,\n      selectedItems: selectedItems,\n      selectionType: selectionType,\n      isItemDisabled: isItemDisabled,\n      onSelectionChange: onSelectionChange,\n      ariaLabels: ariaLabels\n    }),\n    isItemSelected = _f.isItemSelected,\n    getItemSelectionProps = _f.getItemSelectionProps,\n    updateShiftToggle = _f.updateShiftToggle;\n  var hasToolsHeader = header || filter || pagination || preferences;\n  var headerRef = useRef(null);\n  var _g = stickyScrolling(refObject, headerRef),\n    scrollToTop = _g.scrollToTop,\n    scrollToItem = _g.scrollToItem;\n  stickyHeader = useSupportsStickyHeader() && stickyHeader;\n  var onCardFocus = function (event) {\n    if (stickyHeader) {\n      scrollToItem(event.currentTarget);\n    }\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      scrollToTop: function () {\n        if (stickyHeader) {\n          scrollToTop();\n        }\n      }\n    };\n  }, [stickyHeader, scrollToTop]);\n  var status;\n  if (loading) {\n    status = React.createElement(\"div\", {\n      className: styles.loading\n    }, React.createElement(InternalStatusIndicator, {\n      type: \"loading\"\n    }, loadingText));\n  } else if (empty && !items.length) {\n    status = React.createElement(\"div\", {\n      className: styles.empty\n    }, empty);\n  }\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: mergedRef\n  }), React.createElement(InternalContainer, {\n    header: hasToolsHeader && React.createElement(\"div\", {\n      className: clsx(styles.header, isRefresh && styles['header-refresh'], styles[\"header-variant-\".concat(computedVariant)])\n    }, React.createElement(ToolsHeader, {\n      header: header,\n      filter: filter,\n      pagination: pagination,\n      preferences: preferences\n    })),\n    disableContentPaddings: true,\n    disableHeaderPaddings: computedVariant === 'full-page',\n    variant: computedVariant === 'container' ? 'cards' : computedVariant,\n    __stickyHeader: stickyHeader,\n    __stickyOffset: stickyHeaderVerticalOffset,\n    __headerRef: headerRef,\n    __headerId: cardsHeaderId\n  }, React.createElement(\"div\", {\n    className: clsx(hasToolsHeader && styles['has-header'])\n  }, status !== null && status !== void 0 ? status : React.createElement(CardsList, {\n    items: items,\n    cardDefinition: cardDefinition,\n    trackBy: trackBy,\n    selectionType: selectionType,\n    columns: columns,\n    isItemSelected: isItemSelected,\n    getItemSelectionProps: getItemSelectionProps,\n    visibleSections: visibleSections,\n    updateShiftToggle: updateShiftToggle,\n    onFocus: onCardFocus,\n    ariaDescribedby: cardsHeaderId,\n    ariaLabelledby: cardsHeaderId\n  }))));\n});\nexport default Cards;\nvar CardsList = function (_a) {\n  var items = _a.items,\n    cardDefinition = _a.cardDefinition,\n    trackBy = _a.trackBy,\n    selectionType = _a.selectionType,\n    columns = _a.columns,\n    isItemSelected = _a.isItemSelected,\n    getItemSelectionProps = _a.getItemSelectionProps,\n    visibleSections = _a.visibleSections,\n    updateShiftToggle = _a.updateShiftToggle,\n    onFocus = _a.onFocus,\n    ariaLabelledby = _a.ariaLabelledby,\n    ariaDescribedby = _a.ariaDescribedby;\n  var selectable = !!selectionType;\n  var _b = useFocusMove(selectionType, items.length),\n    moveFocusDown = _b.moveFocusDown,\n    moveFocusUp = _b.moveFocusUp;\n  var visibleSectionsDefinition = cardDefinition.sections || [];\n  visibleSectionsDefinition = visibleSections ? visibleSectionsDefinition.filter(function (section) {\n    return section.id && visibleSections.indexOf(section.id) !== -1;\n  }) : visibleSectionsDefinition;\n  var listRole = undefined;\n  var listItemRole = undefined;\n  if (selectable) {\n    listRole = 'group';\n    listItemRole = 'presentation';\n  }\n  return React.createElement(\"ol\", __assign({\n    className: clsx(styles.list, styles[\"list-grid-\".concat(columns || 1)]),\n    role: listRole,\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby\n  }, focusMarkers && focusMarkers.root), items.map(function (item, index) {\n    var _a;\n    return React.createElement(\"li\", __assign({\n      className: clsx(styles.card, (_a = {}, _a[styles['card-selectable']] = selectable, _a[styles['card-selected']] = selectable && isItemSelected(item), _a)),\n      key: getItemKey(trackBy, item, index),\n      onFocus: onFocus\n    }, focusMarkers && focusMarkers.item, {\n      role: listItemRole\n    }), React.createElement(\"div\", {\n      className: styles['card-inner']\n    }, React.createElement(\"div\", {\n      className: styles['card-header']\n    }, React.createElement(\"span\", {\n      className: styles['card-header-inner']\n    }, cardDefinition.header ? cardDefinition.header(item) : ''), selectable && React.createElement(\"div\", {\n      className: styles['selection-control']\n    }, React.createElement(SelectionControl, __assign({\n      onFocusDown: moveFocusDown,\n      onFocusUp: moveFocusUp,\n      onShiftToggle: updateShiftToggle\n    }, getItemSelectionProps(item))))), visibleSectionsDefinition.map(function (_a, index) {\n      var _b = _a.width,\n        width = _b === void 0 ? 100 : _b,\n        header = _a.header,\n        content = _a.content,\n        id = _a.id;\n      return React.createElement(\"div\", {\n        key: id || index,\n        className: styles.section,\n        style: {\n          width: \"\".concat(width, \"%\")\n        }\n      }, header ? React.createElement(\"div\", {\n        className: styles['section-header']\n      }, header) : '', content ? React.createElement(\"div\", {\n        className: styles['section-content']\n      }, content(item)) : '');\n    })));\n  }));\n};\napplyDisplayName(Cards, 'Cards');","map":{"version":3,"mappings":"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","names":["clsx","React","useImperativeHandle","useRef","styles","getCardsPerRow","getBaseProps","useContainerQuery","ToolsHeader","getItemKey","focusMarkers","useFocusMove","useSelection","SelectionControl","InternalContainer","InternalStatusIndicator","applyDisplayName","stickyScrolling","useSupportsStickyHeader","useBaseComponent","useVisualRefresh","useMergeRefs","useUniqueId","Cards","forwardRef","_a","ref","items","cardDefinition","_c","cardsPerRow","header","filter","pagination","preferences","empty","loading","loadingText","trackBy","selectedItems","selectionType","isItemDisabled","onSelectionChange","ariaLabels","visibleSections","stickyHeader","stickyHeaderVerticalOffset","_d","variant","rest","baseProps","isRefresh","computedVariant","instanceUniqueId","cardsId","id","cardsHeaderId","undefined","width","columns","measureRef","refObject","mergedRef","__internalRootRef","isItemSelected","getItemSelectionProps","updateShiftToggle","hasToolsHeader","headerRef","scrollToTop","scrollToItem","onCardFocus","event","currentTarget","status","className","type","length","root","disableContentPaddings","disableHeaderPaddings","__stickyHeader","__stickyOffset","__headerRef","__headerId","CardsList","onFocus","ariaDescribedby","ariaLabelledby","selectable","moveFocusDown","moveFocusUp","visibleSectionsDefinition","sections","section","indexOf","listRole","listItemRole","list","role","map","item","index","card","key","onFocusDown","onFocusUp","onShiftToggle","_b","content","style"],"sources":["/Users/dcastro/node_modules/src/cards/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { FocusEventHandler, useImperativeHandle, useRef } from 'react';\nimport { CardsForwardRefType, CardsProps } from './interfaces';\nimport styles from './styles.css.js';\nimport { getCardsPerRow } from './cards-layout-helper';\nimport { getBaseProps } from '../internal/base-component';\nimport { useContainerQuery } from '../internal/hooks/container-queries/use-container-query';\nimport ToolsHeader from '../table/tools-header';\nimport { getItemKey } from '../table/utils';\nimport { focusMarkers, useFocusMove, useSelection } from '../table/use-selection';\nimport SelectionControl, { SelectionControlProps } from '../table/selection-control';\nimport InternalContainer from '../container/internal';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport stickyScrolling from '../table/sticky-scrolling';\nimport { useSupportsStickyHeader } from '../container/use-sticky-header';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\n\nexport { CardsProps };\n\nconst Cards = React.forwardRef(function <T = any>(\n  {\n    items = [],\n    cardDefinition,\n    cardsPerRow = [],\n    header,\n    filter,\n    pagination,\n    preferences,\n    empty,\n    loading,\n    loadingText,\n    trackBy,\n    selectedItems,\n    selectionType,\n    isItemDisabled,\n    onSelectionChange,\n    ariaLabels,\n    visibleSections,\n    stickyHeader,\n    stickyHeaderVerticalOffset,\n    variant = 'container',\n    ...rest\n  }: CardsProps<T>,\n  ref: React.Ref<CardsProps.Ref>\n) {\n  const { __internalRootRef } = useBaseComponent('Cards');\n  const baseProps = getBaseProps(rest);\n  const isRefresh = useVisualRefresh();\n  const computedVariant = isRefresh ? variant : 'container';\n\n  const instanceUniqueId = useUniqueId('cards');\n  const cardsId = baseProps?.id || instanceUniqueId;\n  const cardsHeaderId = header ? `${cardsId}-header` : undefined;\n\n  const [columns, measureRef] = useContainerQuery<number>(\n    ({ width }) => getCardsPerRow(width, cardsPerRow),\n    [cardsPerRow]\n  );\n  const refObject = useRef(null);\n  const mergedRef = useMergeRefs(measureRef, refObject, __internalRootRef);\n\n  const { isItemSelected, getItemSelectionProps, updateShiftToggle } = useSelection({\n    items,\n    trackBy,\n    selectedItems,\n    selectionType,\n    isItemDisabled,\n    onSelectionChange,\n    ariaLabels,\n  });\n  const hasToolsHeader = header || filter || pagination || preferences;\n  const headerRef = useRef<HTMLDivElement>(null);\n  const { scrollToTop, scrollToItem } = stickyScrolling(refObject, headerRef);\n  stickyHeader = useSupportsStickyHeader() && stickyHeader;\n  const onCardFocus: FocusEventHandler<HTMLElement> = event => {\n    if (stickyHeader) {\n      scrollToItem(event.currentTarget);\n    }\n  };\n  useImperativeHandle(\n    ref,\n    () => ({\n      scrollToTop: () => {\n        if (stickyHeader) {\n          scrollToTop();\n        }\n      },\n    }),\n    [stickyHeader, scrollToTop]\n  );\n  let status;\n  if (loading) {\n    status = (\n      <div className={styles.loading}>\n        <InternalStatusIndicator type=\"loading\">{loadingText}</InternalStatusIndicator>\n      </div>\n    );\n  } else if (empty && !items.length) {\n    status = <div className={styles.empty}>{empty}</div>;\n  }\n\n  return (\n    <div {...baseProps} className={clsx(baseProps.className, styles.root)} ref={mergedRef}>\n      <InternalContainer\n        header={\n          hasToolsHeader && (\n            <div\n              className={clsx(\n                styles.header,\n                isRefresh && styles['header-refresh'],\n                styles[`header-variant-${computedVariant}`]\n              )}\n            >\n              <ToolsHeader header={header} filter={filter} pagination={pagination} preferences={preferences} />\n            </div>\n          )\n        }\n        disableContentPaddings={true}\n        disableHeaderPaddings={computedVariant === 'full-page'}\n        variant={computedVariant === 'container' ? 'cards' : computedVariant}\n        __stickyHeader={stickyHeader}\n        __stickyOffset={stickyHeaderVerticalOffset}\n        __headerRef={headerRef}\n        __headerId={cardsHeaderId}\n      >\n        <div className={clsx(hasToolsHeader && styles['has-header'])}>\n          {status ?? (\n            <CardsList\n              items={items}\n              cardDefinition={cardDefinition}\n              trackBy={trackBy}\n              selectionType={selectionType}\n              columns={columns}\n              isItemSelected={isItemSelected}\n              getItemSelectionProps={getItemSelectionProps}\n              visibleSections={visibleSections}\n              updateShiftToggle={updateShiftToggle}\n              onFocus={onCardFocus}\n              ariaDescribedby={cardsHeaderId}\n              ariaLabelledby={cardsHeaderId}\n            />\n          )}\n        </div>\n      </InternalContainer>\n    </div>\n  );\n}) as CardsForwardRefType;\n\nexport default Cards;\n\nconst CardsList = <T,>({\n  items,\n  cardDefinition,\n  trackBy,\n  selectionType,\n  columns,\n  isItemSelected,\n  getItemSelectionProps,\n  visibleSections,\n  updateShiftToggle,\n  onFocus,\n  ariaLabelledby,\n  ariaDescribedby,\n}: Pick<CardsProps<T>, 'items' | 'cardDefinition' | 'trackBy' | 'selectionType' | 'visibleSections'> & {\n  columns: number | null;\n  isItemSelected: (item: T) => boolean;\n  getItemSelectionProps: (item: T) => SelectionControlProps;\n  updateShiftToggle: (state: boolean) => void;\n  onFocus: FocusEventHandler<HTMLElement>;\n  ariaLabelledby?: string;\n  ariaDescribedby?: string;\n}) => {\n  const selectable = !!selectionType;\n\n  const { moveFocusDown, moveFocusUp } = useFocusMove(selectionType, items.length);\n\n  let visibleSectionsDefinition = cardDefinition.sections || [];\n  visibleSectionsDefinition = visibleSections\n    ? visibleSectionsDefinition.filter(\n        (section: CardsProps.SectionDefinition<T>) => section.id && visibleSections.indexOf(section.id) !== -1\n      )\n    : visibleSectionsDefinition;\n\n  let listRole: 'group' | undefined = undefined;\n  let listItemRole: 'presentation' | undefined = undefined;\n\n  if (selectable) {\n    listRole = 'group';\n    listItemRole = 'presentation';\n  }\n\n  return (\n    <ol\n      className={clsx(styles.list, styles[`list-grid-${columns || 1}`])}\n      role={listRole}\n      aria-labelledby={ariaLabelledby}\n      aria-describedby={ariaDescribedby}\n      {...(focusMarkers && focusMarkers.root)}\n    >\n      {items.map((item, index) => (\n        <li\n          className={clsx(styles.card, {\n            [styles['card-selectable']]: selectable,\n            [styles['card-selected']]: selectable && isItemSelected(item),\n          })}\n          key={getItemKey(trackBy, item, index)}\n          onFocus={onFocus}\n          {...(focusMarkers && focusMarkers.item)}\n          role={listItemRole}\n        >\n          <div className={styles['card-inner']}>\n            <div className={styles['card-header']}>\n              <span className={styles['card-header-inner']}>\n                {cardDefinition.header ? cardDefinition.header(item) : ''}\n              </span>\n              {selectable && (\n                <div className={styles['selection-control']}>\n                  <SelectionControl\n                    onFocusDown={moveFocusDown}\n                    onFocusUp={moveFocusUp}\n                    onShiftToggle={updateShiftToggle}\n                    {...getItemSelectionProps(item)}\n                  />\n                </div>\n              )}\n            </div>\n            {visibleSectionsDefinition.map(({ width = 100, header, content, id }, index) => (\n              <div key={id || index} className={styles.section} style={{ width: `${width}%` }}>\n                {header ? <div className={styles['section-header']}>{header}</div> : ''}\n                {content ? <div className={styles['section-content']}>{content(item)}</div> : ''}\n              </div>\n            ))}\n          </div>\n        </li>\n      ))}\n    </ol>\n  );\n};\n\napplyDisplayName(Cards, 'Cards');\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}