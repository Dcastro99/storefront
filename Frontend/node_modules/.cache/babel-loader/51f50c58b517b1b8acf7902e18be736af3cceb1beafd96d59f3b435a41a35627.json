{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireKeyboardEvent, fireNonCancelableEvent } from '../internal/events';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { convertAutoComplete } from '../input/utils';\nvar Textarea = React.forwardRef(function (_a, ref) {\n  var _b;\n  var value = _a.value,\n    _c = _a.autoComplete,\n    autoComplete = _c === void 0 ? true : _c,\n    disabled = _a.disabled,\n    readOnly = _a.readOnly,\n    disableBrowserAutocorrect = _a.disableBrowserAutocorrect,\n    disableBrowserSpellcheck = _a.disableBrowserSpellcheck,\n    onKeyDown = _a.onKeyDown,\n    onKeyUp = _a.onKeyUp,\n    onChange = _a.onChange,\n    onBlur = _a.onBlur,\n    onFocus = _a.onFocus,\n    ariaRequired = _a.ariaRequired,\n    name = _a.name,\n    rows = _a.rows,\n    placeholder = _a.placeholder,\n    autoFocus = _a.autoFocus,\n    ariaLabel = _a.ariaLabel,\n    rest = __rest(_a, [\"value\", \"autoComplete\", \"disabled\", \"readOnly\", \"disableBrowserAutocorrect\", \"disableBrowserSpellcheck\", \"onKeyDown\", \"onKeyUp\", \"onChange\", \"onBlur\", \"onFocus\", \"ariaRequired\", \"name\", \"rows\", \"placeholder\", \"autoFocus\", \"ariaLabel\"]);\n  var __internalRootRef = useBaseComponent('Textarea').__internalRootRef;\n  var _d = useFormFieldContext(rest),\n    ariaLabelledby = _d.ariaLabelledby,\n    ariaDescribedby = _d.ariaDescribedby,\n    controlId = _d.controlId,\n    invalid = _d.invalid;\n  var baseProps = getBaseProps(rest);\n  var textareaRef = useRef(null);\n  useForwardFocus(ref, textareaRef);\n  var attributes = {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-required': ariaRequired ? 'true' : undefined,\n    'aria-invalid': invalid ? 'true' : undefined,\n    name: name,\n    placeholder: placeholder,\n    autoFocus: autoFocus,\n    className: clsx(styles.textarea, (_b = {}, _b[styles['textarea-readonly']] = readOnly, _b[styles['textarea-invalid']] = invalid, _b)),\n    autoComplete: convertAutoComplete(autoComplete),\n    disabled: disabled,\n    readOnly: readOnly ? true : undefined,\n    rows: rows || 3,\n    onKeyDown: onKeyDown && function (event) {\n      return fireKeyboardEvent(onKeyDown, event);\n    },\n    onKeyUp: onKeyUp && function (event) {\n      return fireKeyboardEvent(onKeyUp, event);\n    },\n    // We set a default value on the component in order to force it into the controlled mode.\n    value: value || '',\n    onChange: onChange && function (event) {\n      return fireNonCancelableEvent(onChange, {\n        value: event.target.value\n      });\n    },\n    onBlur: onBlur && function () {\n      return fireNonCancelableEvent(onBlur);\n    },\n    onFocus: onFocus && function () {\n      return fireNonCancelableEvent(onFocus);\n    }\n  };\n  if (disableBrowserAutocorrect) {\n    attributes.autoCorrect = 'off';\n    attributes.autoCapitalize = 'off';\n  }\n  if (disableBrowserSpellcheck) {\n    attributes.spellCheck = 'false';\n  }\n  return React.createElement(\"span\", __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: __internalRootRef\n  }), React.createElement(\"textarea\", __assign({\n    ref: textareaRef,\n    id: controlId\n  }, attributes, {\n    spellCheck: false\n  })));\n});\napplyDisplayName(Textarea, 'Textarea');\nexport default Textarea;","map":{"version":3,"mappings":"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","names":["React","useRef","getBaseProps","fireKeyboardEvent","fireNonCancelableEvent","useFormFieldContext","useForwardFocus","clsx","styles","applyDisplayName","useBaseComponent","convertAutoComplete","Textarea","forwardRef","_a","ref","_c","autoComplete","disabled","readOnly","disableBrowserAutocorrect","disableBrowserSpellcheck","onKeyDown","onKeyUp","onChange","onBlur","onFocus","ariaRequired","name","rows","placeholder","autoFocus","ariaLabel","rest","ariaLabelledby","ariaDescribedby","controlId","invalid","baseProps","textareaRef","attributes","undefined","className","textarea","_b","event","value","target","autoCorrect","autoCapitalize","spellCheck","root","__internalRootRef","id"],"sources":["/Users/dcastro/node_modules/src/textarea/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Ref, useRef } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireKeyboardEvent, fireNonCancelableEvent } from '../internal/events';\nimport { TextareaProps } from './interfaces';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { convertAutoComplete } from '../input/utils';\n\nexport { TextareaProps };\n\nconst Textarea = React.forwardRef(\n  (\n    {\n      value,\n      autoComplete = true,\n      disabled,\n      readOnly,\n      disableBrowserAutocorrect,\n      disableBrowserSpellcheck,\n      onKeyDown,\n      onKeyUp,\n      onChange,\n      onBlur,\n      onFocus,\n      ariaRequired,\n      name,\n      rows,\n      placeholder,\n      autoFocus,\n      ariaLabel,\n      ...rest\n    }: TextareaProps,\n    ref: Ref<TextareaProps.Ref>\n  ) => {\n    const { __internalRootRef } = useBaseComponent('Textarea');\n    const { ariaLabelledby, ariaDescribedby, controlId, invalid } = useFormFieldContext(rest);\n    const baseProps = getBaseProps(rest);\n\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    useForwardFocus(ref, textareaRef);\n\n    const attributes: React.TextareaHTMLAttributes<HTMLTextAreaElement> = {\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      'aria-describedby': ariaDescribedby,\n      'aria-required': ariaRequired ? 'true' : undefined,\n      'aria-invalid': invalid ? 'true' : undefined,\n      name,\n      placeholder,\n      autoFocus,\n      className: clsx(styles.textarea, {\n        [styles['textarea-readonly']]: readOnly,\n        [styles['textarea-invalid']]: invalid,\n      }),\n      autoComplete: convertAutoComplete(autoComplete),\n      disabled,\n      readOnly: readOnly ? true : undefined,\n      rows: rows || 3,\n      onKeyDown: onKeyDown && (event => fireKeyboardEvent(onKeyDown, event)),\n      onKeyUp: onKeyUp && (event => fireKeyboardEvent(onKeyUp, event)),\n      // We set a default value on the component in order to force it into the controlled mode.\n      value: value || '',\n      onChange: onChange && (event => fireNonCancelableEvent(onChange, { value: event.target.value })),\n      onBlur: onBlur && (() => fireNonCancelableEvent(onBlur)),\n      onFocus: onFocus && (() => fireNonCancelableEvent(onFocus)),\n    };\n\n    if (disableBrowserAutocorrect) {\n      attributes.autoCorrect = 'off';\n      attributes.autoCapitalize = 'off';\n    }\n\n    if (disableBrowserSpellcheck) {\n      attributes.spellCheck = 'false';\n    }\n\n    return (\n      <span {...baseProps} className={clsx(styles.root, baseProps.className)} ref={__internalRootRef}>\n        <textarea ref={textareaRef} id={controlId} {...attributes} spellCheck={false} />\n      </span>\n    );\n  }\n);\n\napplyDisplayName(Textarea, 'Textarea');\nexport default Textarea;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}