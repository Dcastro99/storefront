{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { matchesX, getKeyValue } from './utils';\nimport styles from './styles.css.js';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nexport default function BarSeries(_a) {\n  var _b;\n  var axis = _a.axis,\n    series = _a.series,\n    color = _a.color,\n    xScale = _a.xScale,\n    yScale = _a.yScale,\n    highlighted = _a.highlighted,\n    dimmed = _a.dimmed,\n    highlightedGroupIndex = _a.highlightedGroupIndex,\n    stackedBarOffsets = _a.stackedBarOffsets,\n    totalSeriesCount = _a.totalSeriesCount,\n    seriesIndex = _a.seriesIndex,\n    plotSize = _a.plotSize,\n    chartAreaClipPath = _a.chartAreaClipPath;\n  var isRefresh = useVisualRefresh();\n  var xCoordinates = useMemo(function () {\n    var _a;\n    if (series.type !== 'bar' || !xScale.isCategorical()) {\n      return [];\n    }\n    var yContinuosScale = yScale.d3Scale;\n    var xPoints = series.data.map(function (_a) {\n      var x = _a.x;\n      return xScale.d3Scale(x) || NaN;\n    });\n    var zeroY = (_a = yScale.d3Scale(0)) !== null && _a !== void 0 ? _a : NaN;\n    var baseY = isFinite(zeroY) ? Math.min(plotSize, zeroY) : plotSize;\n    var barWidth = xScale.d3Scale.bandwidth();\n    var PADDING = 4;\n    var MINWIDTH = 4;\n    if (!stackedBarOffsets && totalSeriesCount > 1) {\n      // Regular grouped bars\n      barWidth = (barWidth - (totalSeriesCount - 1) * PADDING) / totalSeriesCount;\n      barWidth = Math.max(barWidth, MINWIDTH);\n    }\n    return xPoints.map(function (x, i) {\n      var _a, _b;\n      var d = series.data[i];\n      var barX = x;\n      var yValue = d.y;\n      if (stackedBarOffsets) {\n        // Stacked bars\n        var offsetMap = d.y < 0 ? stackedBarOffsets.negativeOffsets : stackedBarOffsets.positiveOffsets;\n        yValue = d.y + (offsetMap[getKeyValue(d.x)] || 0);\n      } else if (totalSeriesCount > 1) {\n        // Regular grouped bars\n        barX += seriesIndex * (barWidth + PADDING);\n      }\n      // Account for negative values growing \"down\" instead of \"up\"\n      yValue = yValue < 0 ? yValue - d.y : yValue;\n      return {\n        x: barX,\n        y: (_a = yContinuosScale(yValue)) !== null && _a !== void 0 ? _a : NaN,\n        width: barWidth,\n        height: Math.abs(((_b = yContinuosScale(d.y)) !== null && _b !== void 0 ? _b : NaN) - baseY)\n      };\n    });\n  }, [series, xScale, yScale, plotSize, stackedBarOffsets, totalSeriesCount, seriesIndex]);\n  var highlightedXValue = highlightedGroupIndex !== null ? xScale.domain[highlightedGroupIndex] : null;\n  return React.createElement(\"g\", {\n    \"aria-label\": series.title,\n    clipPath: \"url(#\".concat(chartAreaClipPath, \")\"),\n    className: clsx(styles.series, styles['series--bar'], (_b = {}, _b[styles['series--highlighted']] = highlighted, _b[styles['series--dimmed']] = dimmed, _b))\n  }, xCoordinates.map(function (_a, i) {\n    var _b;\n    var x = _a.x,\n      y = _a.y,\n      width = _a.width,\n      height = _a.height;\n    return isFinite(x) && isFinite(height) && React.createElement(\"rect\", {\n      key: \"bar-\".concat(i),\n      fill: color,\n      x: axis === 'x' ? x : y - height,\n      y: axis === 'x' ? y : x,\n      width: axis === 'x' ? width : height,\n      height: axis === 'x' ? height : width,\n      rx: isRefresh ? '4px' : '0px',\n      className: clsx(styles.series__rect, (_b = {}, _b[styles['series--dimmed']] = highlightedXValue !== null && !matchesX(highlightedXValue, series.data[i].x), _b))\n    });\n  }));\n}","map":{"version":3,"mappings":"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","names":["React","useMemo","clsx","matchesX","getKeyValue","styles","useVisualRefresh","BarSeries","_a","axis","series","color","xScale","yScale","highlighted","dimmed","highlightedGroupIndex","stackedBarOffsets","totalSeriesCount","seriesIndex","plotSize","chartAreaClipPath","isRefresh","xCoordinates","type","isCategorical","yContinuosScale","d3Scale","xPoints","data","map","x","NaN","zeroY","baseY","isFinite","Math","min","barWidth","bandwidth","PADDING","MINWIDTH","max","i","d","barX","yValue","y","offsetMap","negativeOffsets","positiveOffsets","width","height","abs","highlightedXValue","domain","title","clipPath","className","_b","key","fill","rx","series__rect"],"sources":["/Users/dcastro/node_modules/src/mixed-line-bar-chart/bar-series.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { ScaleContinuousNumeric, ScaleTime } from 'd3-scale';\n\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport { ChartDataTypes, MixedLineBarChartProps } from './interfaces';\nimport { matchesX, getKeyValue, StackedOffsets } from './utils';\nimport styles from './styles.css.js';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nexport interface BarSeriesProps<T> {\n  axis: 'x' | 'y';\n\n  series: MixedLineBarChartProps.BarDataSeries<T>;\n\n  color: string;\n  totalSeriesCount: number;\n  seriesIndex: number;\n\n  xScale: ChartScale;\n  yScale: NumericChartScale;\n\n  plotSize: number;\n  chartAreaClipPath: string;\n\n  highlighted: boolean;\n  dimmed: boolean;\n  highlightedGroupIndex: number | null;\n\n  // Contains the cumulative offset for each x value in a stacked bar chart\n  stackedBarOffsets?: StackedOffsets;\n}\n\nexport default function BarSeries<T extends ChartDataTypes>({\n  axis,\n  series,\n  color,\n  xScale,\n  yScale,\n  highlighted,\n  dimmed,\n  highlightedGroupIndex,\n  stackedBarOffsets,\n  totalSeriesCount,\n  seriesIndex,\n  plotSize,\n  chartAreaClipPath,\n}: BarSeriesProps<T>) {\n  const isRefresh = useVisualRefresh();\n\n  const xCoordinates = useMemo(() => {\n    if (series.type !== 'bar' || !xScale.isCategorical()) {\n      return [];\n    }\n\n    const yContinuosScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number> = yScale.d3Scale;\n    const xPoints = (series.data as ReadonlyArray<MixedLineBarChartProps.Datum<ChartDataTypes>>).map(\n      ({ x }) => xScale.d3Scale(x) || NaN\n    );\n\n    const zeroY = yScale.d3Scale(0) ?? NaN;\n    const baseY = isFinite(zeroY) ? Math.min(plotSize, zeroY) : plotSize;\n\n    let barWidth = xScale.d3Scale.bandwidth();\n\n    const PADDING = 4;\n    const MINWIDTH = 4;\n\n    if (!stackedBarOffsets && totalSeriesCount > 1) {\n      // Regular grouped bars\n      barWidth = (barWidth - (totalSeriesCount - 1) * PADDING) / totalSeriesCount;\n      barWidth = Math.max(barWidth, MINWIDTH);\n    }\n\n    return xPoints.map((x, i) => {\n      const d = series.data[i];\n      let barX = x;\n      let yValue = d.y;\n\n      if (stackedBarOffsets) {\n        // Stacked bars\n        const offsetMap = d.y < 0 ? stackedBarOffsets.negativeOffsets : stackedBarOffsets.positiveOffsets;\n        yValue = d.y + (offsetMap[getKeyValue(d.x)] || 0);\n      } else if (totalSeriesCount > 1) {\n        // Regular grouped bars\n        barX += seriesIndex * (barWidth + PADDING);\n      }\n\n      // Account for negative values growing \"down\" instead of \"up\"\n      yValue = yValue < 0 ? yValue - d.y : yValue;\n\n      return {\n        x: barX,\n        y: yContinuosScale(yValue) ?? NaN,\n        width: barWidth,\n        height: Math.abs((yContinuosScale(d.y) ?? NaN) - baseY),\n      };\n    });\n  }, [series, xScale, yScale, plotSize, stackedBarOffsets, totalSeriesCount, seriesIndex]);\n\n  const highlightedXValue = highlightedGroupIndex !== null ? xScale.domain[highlightedGroupIndex] : null;\n\n  return (\n    <g\n      aria-label={series.title}\n      clipPath={`url(#${chartAreaClipPath})`}\n      className={clsx(styles.series, styles['series--bar'], {\n        [styles['series--highlighted']]: highlighted,\n        [styles['series--dimmed']]: dimmed,\n      })}\n    >\n      {xCoordinates.map(\n        ({ x, y, width, height }, i) =>\n          isFinite(x) &&\n          isFinite(height) && (\n            <rect\n              key={`bar-${i}`}\n              fill={color}\n              x={axis === 'x' ? x : y - height}\n              y={axis === 'x' ? y : x}\n              width={axis === 'x' ? width : height}\n              height={axis === 'x' ? height : width}\n              rx={isRefresh ? '4px' : '0px'}\n              className={clsx(styles.series__rect, {\n                [styles['series--dimmed']]:\n                  highlightedXValue !== null && !matchesX(highlightedXValue, series.data[i].x),\n              })}\n            />\n          )\n      )}\n    </g>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}