{"ast":null,"code":"import { __assign, __rest, __spreadArray } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { isGroup } from '../internal/components/option/utils/filter-options';\nimport DropdownFooter from '../internal/components/dropdown-footer/index.js';\nimport { prepareOptions } from '../internal/components/option/utils/prepare-options';\nimport Dropdown from '../internal/components/dropdown';\nimport { useDropdownStatus } from '../internal/components/dropdown-status';\nimport { useSelect } from '../select/utils/use-select';\nimport { useNativeSearch } from '../select/utils/use-native-search';\nimport { useLoadItems } from '../select/utils/use-load-items';\nimport { useAnnouncement } from '../select/utils/use-announcement';\nimport { findOptionIndex } from '../select/utils/connect-options';\nimport PlainList from '../select/parts/plain-list';\nimport VirtualList from '../select/parts/virtual-list';\nimport { checkOptionValueField } from '../select/utils/check-option-value-field.js';\nimport Filter from '../select/parts/filter';\nimport Trigger from '../select/parts/trigger';\nimport TokenGroup from '../token-group/index.js';\nimport styles from './styles.css.js';\nvar InternalMultiselect = React.forwardRef(function (_a, externalRef) {\n  var _b;\n  var _c = _a.options,\n    options = _c === void 0 ? [] : _c,\n    _d = _a.filteringType,\n    filteringType = _d === void 0 ? 'none' : _d,\n    filteringPlaceholder = _a.filteringPlaceholder,\n    filteringAriaLabel = _a.filteringAriaLabel,\n    ariaRequired = _a.ariaRequired,\n    placeholder = _a.placeholder,\n    disabled = _a.disabled,\n    ariaLabel = _a.ariaLabel,\n    _e = _a.statusType,\n    statusType = _e === void 0 ? 'finished' : _e,\n    empty = _a.empty,\n    loadingText = _a.loadingText,\n    finishedText = _a.finishedText,\n    errorText = _a.errorText,\n    recoveryText = _a.recoveryText,\n    noMatch = _a.noMatch,\n    selectedAriaLabel = _a.selectedAriaLabel,\n    renderHighlightedAriaLive = _a.renderHighlightedAriaLive,\n    _f = _a.selectedOptions,\n    selectedOptions = _f === void 0 ? [] : _f,\n    deselectAriaLabel = _a.deselectAriaLabel,\n    _g = _a.keepOpen,\n    keepOpen = _g === void 0 ? true : _g,\n    tokenLimit = _a.tokenLimit,\n    i18nStrings = _a.i18nStrings,\n    onBlur = _a.onBlur,\n    onFocus = _a.onFocus,\n    onLoadItems = _a.onLoadItems,\n    onChange = _a.onChange,\n    virtualScroll = _a.virtualScroll,\n    _h = _a.hideTokens,\n    hideTokens = _h === void 0 ? false : _h,\n    expandToViewport = _a.expandToViewport,\n    _j = _a.__internalRootRef,\n    __internalRootRef = _j === void 0 ? null : _j,\n    restProps = __rest(_a, [\"options\", \"filteringType\", \"filteringPlaceholder\", \"filteringAriaLabel\", \"ariaRequired\", \"placeholder\", \"disabled\", \"ariaLabel\", \"statusType\", \"empty\", \"loadingText\", \"finishedText\", \"errorText\", \"recoveryText\", \"noMatch\", \"selectedAriaLabel\", \"renderHighlightedAriaLive\", \"selectedOptions\", \"deselectAriaLabel\", \"keepOpen\", \"tokenLimit\", \"i18nStrings\", \"onBlur\", \"onFocus\", \"onLoadItems\", \"onChange\", \"virtualScroll\", \"hideTokens\", \"expandToViewport\", \"__internalRootRef\"]);\n  checkOptionValueField('Multiselect', 'options', options);\n  var baseProps = getBaseProps(restProps);\n  var formFieldContext = useFormFieldContext(restProps);\n  var _k = useLoadItems({\n      onLoadItems: onLoadItems,\n      options: options,\n      statusType: statusType\n    }),\n    handleLoadMore = _k.handleLoadMore,\n    handleRecoveryClick = _k.handleRecoveryClick,\n    fireLoadItems = _k.fireLoadItems;\n  var useInteractiveGroups = true;\n  var _l = useState(''),\n    filteringValue = _l[0],\n    setFilteringValue = _l[1];\n  var _m = prepareOptions(options, filteringType, filteringValue),\n    filteredOptions = _m.filteredOptions,\n    parentMap = _m.parentMap;\n  var updateSelectedOption = useCallback(function (option) {\n    var filtered = filteredOptions.filter(function (item) {\n      return item.type !== 'parent';\n    }).map(function (item) {\n      return item.option;\n    });\n    // switch between selection and deselection behavior, ignores disabled options to prevent\n    // getting stuck on one behavior when an option is disabled and its state cannot be changed\n    var isAllChildrenSelected = function (optionsArray) {\n      return optionsArray.every(function (item) {\n        return findOptionIndex(selectedOptions, item) > -1 || item.disabled;\n      });\n    };\n    var intersection = function (visibleOptions, options) {\n      return visibleOptions.filter(function (item) {\n        return findOptionIndex(options, item) > -1 && !item.disabled;\n      });\n    };\n    var union = function (visibleOptions, options) {\n      return visibleOptions.filter(function (item) {\n        return findOptionIndex(options, item) === -1;\n      }).concat(options);\n    };\n    var select = function (options, selectedOptions) {\n      return union(selectedOptions, options);\n    };\n    var unselect = function (options, selectedOptions) {\n      return selectedOptions.filter(function (option) {\n        return findOptionIndex(options, option) === -1;\n      });\n    };\n    var newSelectedOptions = __spreadArray([], selectedOptions, true);\n    if (isGroup(option)) {\n      var visibleOptions = intersection(__spreadArray([], option.options, true), filtered);\n      newSelectedOptions = isAllChildrenSelected(visibleOptions) ? unselect(visibleOptions, newSelectedOptions) : select(visibleOptions, newSelectedOptions);\n    } else {\n      newSelectedOptions = isAllChildrenSelected([option]) ? unselect([option], newSelectedOptions) : select([option], newSelectedOptions);\n    }\n    fireNonCancelableEvent(onChange, {\n      selectedOptions: newSelectedOptions\n    });\n  }, [onChange, selectedOptions, filteredOptions]);\n  var rootRef = useRef(null);\n  var selfControlId = useUniqueId('trigger');\n  var controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;\n  var scrollToIndex = useRef(null);\n  var _o = useSelect({\n      selectedOptions: selectedOptions,\n      updateSelectedOption: updateSelectedOption,\n      options: filteredOptions,\n      filteringType: filteringType,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      externalRef: externalRef,\n      keepOpen: keepOpen,\n      fireLoadItems: fireLoadItems,\n      setFilteringValue: setFilteringValue,\n      useInteractiveGroups: useInteractiveGroups\n    }),\n    isOpen = _o.isOpen,\n    highlightType = _o.highlightType,\n    highlightedOption = _o.highlightedOption,\n    highlightedIndex = _o.highlightedIndex,\n    getTriggerProps = _o.getTriggerProps,\n    getFilterProps = _o.getFilterProps,\n    getRecoveryProps = _o.getRecoveryProps,\n    getMenuProps = _o.getMenuProps,\n    getOptionProps = _o.getOptionProps,\n    highlightOption = _o.highlightOption,\n    announceSelected = _o.announceSelected;\n  var handleNativeSearch = useNativeSearch({\n    isEnabled: filteringType === 'none' && isOpen,\n    options: filteredOptions,\n    highlightOption: highlightOption,\n    highlightedOption: highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.option,\n    useInteractiveGroups: useInteractiveGroups\n  });\n  var isEmpty = !options || options.length === 0;\n  var isNoMatch = filteredOptions && filteredOptions.length === 0;\n  var dropdownStatus = useDropdownStatus({\n    statusType: statusType,\n    empty: empty,\n    loadingText: loadingText,\n    finishedText: finishedText,\n    errorText: errorText,\n    recoveryText: recoveryText,\n    isEmpty: isEmpty,\n    isNoMatch: isNoMatch,\n    noMatch: noMatch,\n    onRecoveryClick: handleRecoveryClick,\n    recoveryProps: getRecoveryProps()\n  });\n  var filter = React.createElement(Filter, __assign({\n    filteringType: filteringType,\n    placeholder: filteringPlaceholder,\n    ariaLabel: filteringAriaLabel,\n    ariaRequired: ariaRequired,\n    value: filteringValue\n  }, getFilterProps()));\n  var trigger = React.createElement(Trigger, __assign({\n    placeholder: placeholder,\n    disabled: disabled,\n    ariaLabel: ariaLabel,\n    triggerProps: getTriggerProps(disabled),\n    selectedOption: null,\n    isOpen: isOpen\n  }, formFieldContext, {\n    controlId: controlId\n  }));\n  var menuProps = __assign(__assign({}, getMenuProps()), {\n    onLoadMore: handleLoadMore,\n    ariaLabelledby: controlId\n  });\n  var announcement = useAnnouncement({\n    announceSelected: announceSelected,\n    highlightedOption: highlightedOption,\n    getParent: function (option) {\n      var _a;\n      return (_a = parentMap.get(option)) === null || _a === void 0 ? void 0 : _a.option;\n    },\n    selectedAriaLabel: selectedAriaLabel,\n    renderHighlightedAriaLive: renderHighlightedAriaLive\n  });\n  var tokens = selectedOptions.map(function (option) {\n    return {\n      label: option.label,\n      disabled: disabled || option.disabled,\n      labelTag: option.labelTag,\n      description: option.description,\n      iconAlt: option.iconAlt,\n      iconName: option.iconName,\n      iconUrl: option.iconUrl,\n      iconSvg: option.iconSvg,\n      tags: option.tags,\n      dismissLabel: deselectAriaLabel ? deselectAriaLabel(option) : undefined\n    };\n  });\n  useEffect(function () {\n    var _a;\n    (_a = scrollToIndex.current) === null || _a === void 0 ? void 0 : _a.call(scrollToIndex, highlightedIndex);\n  }, [highlightedIndex]);\n  var ListComponent = virtualScroll ? VirtualList : PlainList;\n  var handleMouseDown = function (event) {\n    var target = event.target;\n    if (target !== document.activeElement) {\n      // prevent currently focused element from losing it\n      event.preventDefault();\n    }\n  };\n  var showTokens = !hideTokens && tokens.length > 0;\n  var handleTokenDismiss = function (_a) {\n    var detail = _a.detail;\n    var optionToDeselect = selectedOptions[detail.itemIndex];\n    updateSelectedOption(optionToDeselect);\n    var targetRef = getTriggerProps().ref;\n    if (targetRef.current) {\n      targetRef.current.focus();\n    }\n  };\n  var tokenGroupI18nStrings = {\n    limitShowFewer: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowFewer,\n    limitShowMore: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowMore\n  };\n  var mergedRef = useMergeRefs(rootRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    ref: mergedRef,\n    className: clsx(styles.root, baseProps.className),\n    onKeyPress: handleNativeSearch\n  }), React.createElement(Dropdown, {\n    open: isOpen,\n    trigger: trigger,\n    header: filter,\n    onMouseDown: handleMouseDown,\n    footer: dropdownStatus.isSticky ? React.createElement(DropdownFooter, {\n      content: dropdownStatus.content\n    }) : null,\n    expandToViewport: expandToViewport\n  }, React.createElement(ListComponent, {\n    listBottom: !dropdownStatus.isSticky ? React.createElement(DropdownFooter, {\n      content: dropdownStatus.content\n    }) : null,\n    menuProps: menuProps,\n    getOptionProps: getOptionProps,\n    filteredOptions: filteredOptions,\n    filteringValue: filteringValue,\n    ref: scrollToIndex,\n    hasDropdownStatus: dropdownStatus.content !== null,\n    checkboxes: true,\n    useInteractiveGroups: useInteractiveGroups,\n    screenReaderContent: announcement,\n    highlightType: highlightType\n  })), showTokens && React.createElement(TokenGroup, {\n    limit: tokenLimit,\n    items: tokens,\n    onDismiss: handleTokenDismiss,\n    i18nStrings: tokenGroupI18nStrings\n  }));\n});\nexport default InternalMultiselect;","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useRef","useState","clsx","useMergeRefs","useFormFieldContext","getBaseProps","fireNonCancelableEvent","useUniqueId","isGroup","DropdownFooter","prepareOptions","Dropdown","useDropdownStatus","useSelect","useNativeSearch","useLoadItems","useAnnouncement","findOptionIndex","PlainList","VirtualList","checkOptionValueField","Filter","Trigger","TokenGroup","styles","InternalMultiselect","forwardRef","_a","externalRef","options","_d","filteringType","filteringPlaceholder","filteringAriaLabel","ariaRequired","placeholder","disabled","ariaLabel","_e","statusType","empty","loadingText","finishedText","errorText","recoveryText","noMatch","selectedAriaLabel","renderHighlightedAriaLive","_f","selectedOptions","deselectAriaLabel","_g","keepOpen","tokenLimit","i18nStrings","onBlur","onFocus","onLoadItems","onChange","virtualScroll","_h","hideTokens","expandToViewport","_j","__internalRootRef","restProps","baseProps","formFieldContext","handleLoadMore","handleRecoveryClick","fireLoadItems","useInteractiveGroups","filteringValue","setFilteringValue","filteredOptions","parentMap","updateSelectedOption","option","filtered","filter","type","map","isAllChildrenSelected","optionsArray","every","item","intersection","visibleOptions","union","concat","select","unselect","newSelectedOptions","rootRef","selfControlId","controlId","scrollToIndex","isOpen","highlightType","highlightedOption","highlightedIndex","getTriggerProps","getFilterProps","getRecoveryProps","getMenuProps","getOptionProps","highlightOption","announceSelected","handleNativeSearch","isEnabled","isEmpty","length","isNoMatch","dropdownStatus","onRecoveryClick","recoveryProps","value","trigger","triggerProps","selectedOption","menuProps","onLoadMore","ariaLabelledby","announcement","getParent","get","tokens","label","labelTag","description","iconAlt","iconName","iconUrl","iconSvg","tags","dismissLabel","undefined","current","ListComponent","handleMouseDown","event","target","document","activeElement","preventDefault","showTokens","handleTokenDismiss","detail","optionToDeselect","itemIndex","targetRef","ref","focus","tokenGroupI18nStrings","limitShowFewer","tokenLimitShowFewer","limitShowMore","tokenLimitShowMore","mergedRef","className","root","onKeyPress","open","header","onMouseDown","footer","isSticky","content","listBottom","hasDropdownStatus","checkboxes","screenReaderContent","limit","items","onDismiss"],"sources":["/Users/dcastro/node_modules/src/multiselect/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\n\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component/index.js';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { isGroup } from '../internal/components/option/utils/filter-options';\n\nimport DropdownFooter from '../internal/components/dropdown-footer/index.js';\nimport { prepareOptions } from '../internal/components/option/utils/prepare-options';\nimport { OptionDefinition, OptionGroup } from '../internal/components/option/interfaces';\nimport Dropdown from '../internal/components/dropdown';\nimport { useDropdownStatus } from '../internal/components/dropdown-status';\n\nimport { useSelect, MenuProps } from '../select/utils/use-select';\nimport { useNativeSearch } from '../select/utils/use-native-search';\nimport { useLoadItems } from '../select/utils/use-load-items';\nimport { useAnnouncement } from '../select/utils/use-announcement';\nimport { findOptionIndex } from '../select/utils/connect-options';\nimport PlainList, { SelectListProps } from '../select/parts/plain-list';\nimport VirtualList from '../select/parts/virtual-list';\nimport { checkOptionValueField } from '../select/utils/check-option-value-field.js';\nimport Filter from '../select/parts/filter';\nimport Trigger from '../select/parts/trigger';\n\nimport TokenGroup, { TokenGroupProps } from '../token-group/index.js';\n\nimport { MultiselectProps } from './interfaces';\nimport styles from './styles.css.js';\n\ntype InternalMultiselectProps = MultiselectProps & InternalBaseComponentProps;\n\nconst InternalMultiselect = React.forwardRef(\n  (\n    {\n      options = [],\n      filteringType = 'none',\n      filteringPlaceholder,\n      filteringAriaLabel,\n      ariaRequired,\n      placeholder,\n      disabled,\n      ariaLabel,\n      statusType = 'finished',\n      empty,\n      loadingText,\n      finishedText,\n      errorText,\n      recoveryText,\n      noMatch,\n      selectedAriaLabel,\n      renderHighlightedAriaLive,\n      selectedOptions = [],\n      deselectAriaLabel,\n      keepOpen = true,\n      tokenLimit,\n      i18nStrings,\n      onBlur,\n      onFocus,\n      onLoadItems,\n      onChange,\n      virtualScroll,\n      hideTokens = false,\n      expandToViewport,\n      __internalRootRef = null,\n      ...restProps\n    }: InternalMultiselectProps,\n    externalRef: React.Ref<MultiselectProps.Ref>\n  ) => {\n    checkOptionValueField('Multiselect', 'options', options);\n\n    const baseProps = getBaseProps(restProps);\n    const formFieldContext = useFormFieldContext(restProps);\n\n    const { handleLoadMore, handleRecoveryClick, fireLoadItems } = useLoadItems({\n      onLoadItems,\n      options,\n      statusType,\n    });\n    const useInteractiveGroups = true;\n    const [filteringValue, setFilteringValue] = useState('');\n    const { filteredOptions, parentMap } = prepareOptions(options, filteringType, filteringValue);\n\n    const updateSelectedOption = useCallback(\n      (option: OptionDefinition | OptionGroup) => {\n        const filtered = filteredOptions.filter(item => item.type !== 'parent').map(item => item.option);\n\n        // switch between selection and deselection behavior, ignores disabled options to prevent\n        // getting stuck on one behavior when an option is disabled and its state cannot be changed\n        const isAllChildrenSelected = (optionsArray: OptionDefinition[]) =>\n          optionsArray.every(item => findOptionIndex(selectedOptions, item) > -1 || item.disabled);\n        const intersection = (visibleOptions: OptionDefinition[], options: OptionDefinition[]) =>\n          visibleOptions.filter(item => findOptionIndex(options, item) > -1 && !item.disabled);\n        const union = (visibleOptions: OptionDefinition[], options: OptionDefinition[]) =>\n          visibleOptions.filter(item => findOptionIndex(options, item) === -1).concat(options);\n        const select = (options: OptionDefinition[], selectedOptions: OptionDefinition[]) => {\n          return union(selectedOptions, options);\n        };\n        const unselect = (options: OptionDefinition[], selectedOptions: OptionDefinition[]) => {\n          return selectedOptions.filter(option => findOptionIndex(options, option) === -1);\n        };\n        let newSelectedOptions = [...selectedOptions];\n\n        if (isGroup(option)) {\n          const visibleOptions = intersection([...option.options], filtered);\n          newSelectedOptions = isAllChildrenSelected(visibleOptions)\n            ? unselect(visibleOptions, newSelectedOptions)\n            : select(visibleOptions, newSelectedOptions);\n        } else {\n          newSelectedOptions = isAllChildrenSelected([option])\n            ? unselect([option], newSelectedOptions)\n            : select([option], newSelectedOptions);\n        }\n\n        fireNonCancelableEvent(onChange, {\n          selectedOptions: newSelectedOptions,\n        });\n      },\n      [onChange, selectedOptions, filteredOptions]\n    );\n\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    const selfControlId = useUniqueId('trigger');\n    const controlId = formFieldContext.controlId ?? selfControlId;\n\n    const scrollToIndex = useRef<SelectListProps.SelectListRef>(null);\n    const {\n      isOpen,\n      highlightType,\n      highlightedOption,\n      highlightedIndex,\n      getTriggerProps,\n      getFilterProps,\n      getRecoveryProps,\n      getMenuProps,\n      getOptionProps,\n      highlightOption,\n      announceSelected,\n    } = useSelect({\n      selectedOptions,\n      updateSelectedOption,\n      options: filteredOptions,\n      filteringType,\n      onFocus,\n      onBlur,\n      externalRef,\n      keepOpen,\n      fireLoadItems,\n      setFilteringValue,\n      useInteractiveGroups,\n    });\n\n    const handleNativeSearch = useNativeSearch({\n      isEnabled: filteringType === 'none' && isOpen,\n      options: filteredOptions,\n      highlightOption: highlightOption,\n      highlightedOption: highlightedOption?.option,\n      useInteractiveGroups,\n    });\n\n    const isEmpty = !options || options.length === 0;\n    const isNoMatch = filteredOptions && filteredOptions.length === 0;\n    const dropdownStatus = useDropdownStatus({\n      statusType,\n      empty,\n      loadingText,\n      finishedText,\n      errorText,\n      recoveryText,\n      isEmpty,\n      isNoMatch,\n      noMatch,\n      onRecoveryClick: handleRecoveryClick,\n      recoveryProps: getRecoveryProps(),\n    });\n\n    const filter = (\n      <Filter\n        filteringType={filteringType}\n        placeholder={filteringPlaceholder}\n        ariaLabel={filteringAriaLabel}\n        ariaRequired={ariaRequired}\n        value={filteringValue}\n        {...getFilterProps()}\n      />\n    );\n\n    const trigger = (\n      <Trigger\n        placeholder={placeholder}\n        disabled={disabled}\n        ariaLabel={ariaLabel}\n        triggerProps={getTriggerProps(disabled)}\n        selectedOption={null}\n        isOpen={isOpen}\n        {...formFieldContext}\n        controlId={controlId}\n      />\n    );\n\n    const menuProps: MenuProps = {\n      ...getMenuProps(),\n      onLoadMore: handleLoadMore,\n      ariaLabelledby: controlId,\n    };\n\n    const announcement = useAnnouncement({\n      announceSelected,\n      highlightedOption,\n      getParent: option => parentMap.get(option)?.option as undefined | OptionGroup,\n      selectedAriaLabel,\n      renderHighlightedAriaLive,\n    });\n\n    const tokens: TokenGroupProps['items'] = selectedOptions.map(option => ({\n      label: option.label,\n      disabled: disabled || option.disabled,\n      labelTag: option.labelTag,\n      description: option.description,\n      iconAlt: option.iconAlt,\n      iconName: option.iconName,\n      iconUrl: option.iconUrl,\n      iconSvg: option.iconSvg,\n      tags: option.tags,\n      dismissLabel: deselectAriaLabel ? deselectAriaLabel(option) : undefined,\n    }));\n\n    useEffect(() => {\n      scrollToIndex.current?.(highlightedIndex);\n    }, [highlightedIndex]);\n\n    const ListComponent = virtualScroll ? VirtualList : PlainList;\n\n    const handleMouseDown = (event: React.MouseEvent) => {\n      const target = event.target as HTMLElement;\n\n      if (target !== document.activeElement) {\n        // prevent currently focused element from losing it\n        event.preventDefault();\n      }\n    };\n\n    const showTokens = !hideTokens && tokens.length > 0;\n    const handleTokenDismiss: TokenGroupProps['onDismiss'] = ({ detail }) => {\n      const optionToDeselect = selectedOptions[detail.itemIndex];\n      updateSelectedOption(optionToDeselect);\n      const targetRef = getTriggerProps().ref;\n      if (targetRef.current) {\n        targetRef.current.focus();\n      }\n    };\n\n    const tokenGroupI18nStrings: TokenGroupProps.I18nStrings = {\n      limitShowFewer: i18nStrings?.tokenLimitShowFewer,\n      limitShowMore: i18nStrings?.tokenLimitShowMore,\n    };\n\n    const mergedRef = useMergeRefs(rootRef, __internalRootRef);\n\n    return (\n      <div\n        {...baseProps}\n        ref={mergedRef}\n        className={clsx(styles.root, baseProps.className)}\n        onKeyPress={handleNativeSearch}\n      >\n        <Dropdown\n          open={isOpen}\n          trigger={trigger}\n          header={filter}\n          onMouseDown={handleMouseDown}\n          footer={dropdownStatus.isSticky ? <DropdownFooter content={dropdownStatus.content} /> : null}\n          expandToViewport={expandToViewport}\n        >\n          <ListComponent\n            listBottom={!dropdownStatus.isSticky ? <DropdownFooter content={dropdownStatus.content} /> : null}\n            menuProps={menuProps}\n            getOptionProps={getOptionProps}\n            filteredOptions={filteredOptions}\n            filteringValue={filteringValue}\n            ref={scrollToIndex}\n            hasDropdownStatus={dropdownStatus.content !== null}\n            checkboxes={true}\n            useInteractiveGroups={useInteractiveGroups}\n            screenReaderContent={announcement}\n            highlightType={highlightType}\n          />\n        </Dropdown>\n        {showTokens && (\n          <TokenGroup\n            limit={tokenLimit}\n            items={tokens}\n            onDismiss={handleTokenDismiss}\n            i18nStrings={tokenGroupI18nStrings}\n          />\n        )}\n      </div>\n    );\n  }\n);\n\nexport default InternalMultiselect;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}