{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useLayoutEffect, useRef } from 'react';\nexport function useFocusControl(isOpen, restoreFocus) {\n  if (restoreFocus === void 0) {\n    restoreFocus = false;\n  }\n  var refs = {\n    toggle: useRef(null),\n    close: useRef(null)\n  };\n  var previousFocusedElement = useRef();\n  var setFocus = useCallback(function () {\n    var _a, _b;\n    // due to mounting/remounting, this hook gets called multiple times for a single change,\n    // so we ignore any calls where the refs are undefined\n    if (!(refs.toggle.current || refs.close.current)) {\n      return;\n    }\n    if (isOpen) {\n      previousFocusedElement.current = document.activeElement;\n      (_a = refs.close.current) === null || _a === void 0 ? void 0 : _a.focus();\n    } else {\n      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {\n        previousFocusedElement.current.focus();\n        previousFocusedElement.current = undefined;\n      } else {\n        (_b = refs.toggle.current) === null || _b === void 0 ? void 0 : _b.focus();\n      }\n    }\n  }, [isOpen, restoreFocus, refs.close, refs.toggle]);\n  var loseFocus = useCallback(function () {\n    previousFocusedElement.current = undefined;\n  }, []);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(setFocus, [isOpen, restoreFocus]);\n  return {\n    refs: refs,\n    setFocus: setFocus,\n    loseFocus: loseFocus\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAAoBA,WAAW,EAAEC,eAAe,EAAEC,MAAM,QAAQ,OAAO;AAYvE,OAAM,SAAUC,eAAe,CAACC,MAAe,EAAEC,YAAoB;EAApB;IAAAA,oBAAoB;EAAA;EACnE,IAAMC,IAAI,GAAG;IACXC,MAAM,EAAEL,MAAM,CAAkB,IAAI,CAAC;IACrCM,KAAK,EAAEN,MAAM,CAAkB,IAAI;GACpC;EACD,IAAMO,sBAAsB,GAAGP,MAAM,EAAe;EAEpD,IAAMQ,QAAQ,GAAGV,WAAW,CAAC;;IAC3B;IACA;IACA,IAAI,EAAEM,IAAI,CAACC,MAAM,CAACI,OAAO,IAAIL,IAAI,CAACE,KAAK,CAACG,OAAO,CAAC,EAAE;MAChD;;IAEF,IAAIP,MAAM,EAAE;MACVK,sBAAsB,CAACE,OAAO,GAAGC,QAAQ,CAACC,aAA4B;MACtE,UAAI,CAACL,KAAK,CAACG,OAAO,0CAAEG,KAAK,EAAE;KAC5B,MAAM;MACL,IAAIT,YAAY,IAAII,sBAAsB,CAACE,OAAO,IAAIC,QAAQ,CAACG,QAAQ,CAACN,sBAAsB,CAACE,OAAO,CAAC,EAAE;QACvGF,sBAAsB,CAACE,OAAO,CAACG,KAAK,EAAE;QACtCL,sBAAsB,CAACE,OAAO,GAAGK,SAAS;OAC3C,MAAM;QACL,UAAI,CAACT,MAAM,CAACI,OAAO,0CAAEG,KAAK,EAAE;;;EAGlC,CAAC,EAAE,CAACV,MAAM,EAAEC,YAAY,EAAEC,IAAI,CAACE,KAAK,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC;EAEnD,IAAMU,SAAS,GAAGjB,WAAW,CAAC;IAC5BS,sBAAsB,CAACE,OAAO,GAAGK,SAAS;EAC5C,CAAC,EAAE,EAAE,CAAC;EAEN;EACAf,eAAe,CAACS,QAAQ,EAAE,CAACN,MAAM,EAAEC,YAAY,CAAC,CAAC;EAEjD,OAAO;IAAEC,IAAI;IAAEI,QAAQ;IAAEO,SAAS;EAAA,CAAE;AACtC","names":["useCallback","useLayoutEffect","useRef","useFocusControl","isOpen","restoreFocus","refs","toggle","close","previousFocusedElement","setFocus","current","document","activeElement","focus","contains","undefined","loseFocus"],"sources":["/Users/dcastro/node_modules/src/app-layout/utils/use-focus-control.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { RefObject, useCallback, useLayoutEffect, useRef } from 'react';\nimport { ButtonProps } from '../../button/interfaces';\n\nexport interface FocusControlState {\n  refs: {\n    toggle: RefObject<ButtonProps.Ref>;\n    close: RefObject<ButtonProps.Ref>;\n  };\n  setFocus: () => void;\n  loseFocus: () => void;\n}\n\nexport function useFocusControl(isOpen: boolean, restoreFocus = false): FocusControlState {\n  const refs = {\n    toggle: useRef<ButtonProps.Ref>(null),\n    close: useRef<ButtonProps.Ref>(null),\n  };\n  const previousFocusedElement = useRef<HTMLElement>();\n\n  const setFocus = useCallback(() => {\n    // due to mounting/remounting, this hook gets called multiple times for a single change,\n    // so we ignore any calls where the refs are undefined\n    if (!(refs.toggle.current || refs.close.current)) {\n      return;\n    }\n    if (isOpen) {\n      previousFocusedElement.current = document.activeElement as HTMLElement;\n      refs.close.current?.focus();\n    } else {\n      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {\n        previousFocusedElement.current.focus();\n        previousFocusedElement.current = undefined;\n      } else {\n        refs.toggle.current?.focus();\n      }\n    }\n  }, [isOpen, restoreFocus, refs.close, refs.toggle]);\n\n  const loseFocus = useCallback(() => {\n    previousFocusedElement.current = undefined;\n  }, []);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(setFocus, [isOpen, restoreFocus]);\n\n  return { refs, setFocus, loseFocus };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}