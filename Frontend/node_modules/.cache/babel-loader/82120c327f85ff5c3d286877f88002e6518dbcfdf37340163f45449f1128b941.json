{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useState, useRef, useEffect } from 'react';\nimport InternalBox from '../box/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { S3InContext } from './s3-in-context';\nimport { S3Modal } from './s3-modal';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nvar S3ResourceSelector = React.forwardRef(function (_a, ref) {\n  var i18nStrings = _a.i18nStrings,\n    alert = _a.alert,\n    resource = _a.resource,\n    viewHref = _a.viewHref,\n    invalid = _a.invalid,\n    _b = _a.selectableItemsTypes,\n    selectableItemsTypes = _b === void 0 ? [] : _b,\n    inputAriaDescribedby = _a.inputAriaDescribedby,\n    _c = _a.bucketsVisibleColumns,\n    bucketsVisibleColumns = _c === void 0 ? ['Name', 'CreationDate'] : _c,\n    bucketsIsItemDisabled = _a.bucketsIsItemDisabled,\n    fetchBuckets = _a.fetchBuckets,\n    fetchObjects = _a.fetchObjects,\n    _d = _a.objectsVisibleColumns,\n    objectsVisibleColumns = _d === void 0 ? ['Key', 'LastModified', 'Size'] : _d,\n    objectsIsItemDisabled = _a.objectsIsItemDisabled,\n    fetchVersions = _a.fetchVersions,\n    _e = _a.versionsVisibleColumns,\n    versionsVisibleColumns = _e === void 0 ? ['ID', 'LastModified', 'Size'] : _e,\n    versionsIsItemDisabled = _a.versionsIsItemDisabled,\n    onChange = _a.onChange,\n    rest = __rest(_a, [\"i18nStrings\", \"alert\", \"resource\", \"viewHref\", \"invalid\", \"selectableItemsTypes\", \"inputAriaDescribedby\", \"bucketsVisibleColumns\", \"bucketsIsItemDisabled\", \"fetchBuckets\", \"fetchObjects\", \"objectsVisibleColumns\", \"objectsIsItemDisabled\", \"fetchVersions\", \"versionsVisibleColumns\", \"versionsIsItemDisabled\", \"onChange\"]);\n  checkSafeUrl('S3ResourceSelector', viewHref);\n  var __internalRootRef = useBaseComponent('S3ResourceSelector').__internalRootRef;\n  var _f = useState(false),\n    modalOpen = _f[0],\n    setModalOpen = _f[1];\n  var inContextRef = useRef(null);\n  var modalWasSubmitted = useRef(false);\n  useForwardFocus(ref, inContextRef);\n  useEffect(function () {\n    var _a;\n    // Focus uriInput only when modal was submitted.\n    // When it was dismissed, the focus naturally goes to previously focused element (browse button)\n    if (!modalOpen && modalWasSubmitted.current) {\n      modalWasSubmitted.current = false;\n      (_a = inContextRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [modalOpen]);\n  var baseProps = getBaseProps(rest);\n  var modalProps = {\n    alert: alert,\n    i18nStrings: i18nStrings,\n    fetchBuckets: fetchBuckets,\n    selectableItemsTypes: selectableItemsTypes,\n    bucketsVisibleColumns: bucketsVisibleColumns,\n    bucketsIsItemDisabled: bucketsIsItemDisabled,\n    fetchObjects: fetchObjects,\n    objectsVisibleColumns: objectsVisibleColumns,\n    objectsIsItemDisabled: objectsIsItemDisabled,\n    fetchVersions: fetchVersions,\n    versionsVisibleColumns: versionsVisibleColumns,\n    versionsIsItemDisabled: versionsIsItemDisabled,\n    onSubmit: function (resource) {\n      fireNonCancelableEvent(onChange, {\n        resource: resource\n      });\n      setModalOpen(false);\n      modalWasSubmitted.current = true;\n    },\n    onDismiss: function () {\n      return setModalOpen(false);\n    }\n  };\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: __internalRootRef\n  }), React.createElement(S3InContext, {\n    ref: inContextRef,\n    selectableItemsTypes: selectableItemsTypes,\n    i18nStrings: i18nStrings,\n    resource: resource,\n    viewHref: viewHref,\n    invalid: invalid,\n    inputAriaDescribedby: inputAriaDescribedby,\n    fetchVersions: fetchVersions,\n    onBrowse: function () {\n      return setModalOpen(true);\n    },\n    onChange: function (resource, errorText) {\n      return fireNonCancelableEvent(onChange, {\n        resource: resource,\n        errorText: errorText\n      });\n    }\n  }), !modalOpen && alert && React.createElement(InternalBox, {\n    className: styles.alert,\n    margin: {\n      top: 's'\n    }\n  }, alert), modalOpen && React.createElement(S3Modal, __assign({}, modalProps)));\n});\napplyDisplayName(S3ResourceSelector, 'S3ResourceSelector');\nexport default S3ResourceSelector;","map":{"version":3,"mappings":"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","names":["clsx","React","useState","useRef","useEffect","InternalBox","getBaseProps","fireNonCancelableEvent","useForwardFocus","applyDisplayName","S3InContext","S3Modal","styles","useBaseComponent","checkSafeUrl","S3ResourceSelector","forwardRef","_a","ref","alert","resource","viewHref","invalid","_b","selectableItemsTypes","inputAriaDescribedby","_c","bucketsVisibleColumns","bucketsIsItemDisabled","fetchBuckets","fetchObjects","_d","objectsVisibleColumns","objectsIsItemDisabled","fetchVersions","_e","versionsVisibleColumns","versionsIsItemDisabled","onChange","rest","modalOpen","setModalOpen","inContextRef","modalWasSubmitted","current","focus","baseProps","modalProps","i18nStrings","onSubmit","onDismiss","className","root","__internalRootRef","onBrowse","errorText","margin","top"],"sources":["/Users/dcastro/node_modules/src/s3-resource-selector/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useState, useRef, useEffect } from 'react';\nimport InternalBox from '../box/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { S3InContext, S3InContextRef } from './s3-in-context';\nimport { S3ResourceSelectorProps } from './interfaces';\nimport { S3Modal, S3ModalProps } from './s3-modal';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\n\nexport { S3ResourceSelectorProps };\n\nconst S3ResourceSelector = React.forwardRef(\n  (\n    {\n      i18nStrings,\n      alert,\n      resource,\n      viewHref,\n      invalid,\n      selectableItemsTypes = [],\n      inputAriaDescribedby,\n      bucketsVisibleColumns = ['Name', 'CreationDate'],\n      bucketsIsItemDisabled,\n      fetchBuckets,\n      fetchObjects,\n      objectsVisibleColumns = ['Key', 'LastModified', 'Size'],\n      objectsIsItemDisabled,\n      fetchVersions,\n      versionsVisibleColumns = ['ID', 'LastModified', 'Size'],\n      versionsIsItemDisabled,\n      onChange,\n      ...rest\n    }: S3ResourceSelectorProps,\n    ref: React.Ref<S3ResourceSelectorProps.Ref>\n  ) => {\n    checkSafeUrl('S3ResourceSelector', viewHref);\n    const { __internalRootRef } = useBaseComponent('S3ResourceSelector');\n    const [modalOpen, setModalOpen] = useState(false);\n    const inContextRef = useRef<S3InContextRef>(null);\n    const modalWasSubmitted = useRef<boolean>(false);\n    useForwardFocus(ref, inContextRef);\n\n    useEffect(() => {\n      // Focus uriInput only when modal was submitted.\n      // When it was dismissed, the focus naturally goes to previously focused element (browse button)\n      if (!modalOpen && modalWasSubmitted.current) {\n        modalWasSubmitted.current = false;\n        inContextRef.current?.focus();\n      }\n    }, [modalOpen]);\n\n    const baseProps = getBaseProps(rest);\n    const modalProps: S3ModalProps = {\n      alert,\n      i18nStrings,\n      fetchBuckets,\n      selectableItemsTypes,\n      bucketsVisibleColumns,\n      bucketsIsItemDisabled,\n      fetchObjects,\n      objectsVisibleColumns,\n      objectsIsItemDisabled,\n      fetchVersions,\n      versionsVisibleColumns,\n      versionsIsItemDisabled,\n      onSubmit: resource => {\n        fireNonCancelableEvent(onChange, { resource });\n        setModalOpen(false);\n        modalWasSubmitted.current = true;\n      },\n      onDismiss: () => setModalOpen(false),\n    };\n    return (\n      <div {...baseProps} className={clsx(styles.root, baseProps.className)} ref={__internalRootRef}>\n        <S3InContext\n          ref={inContextRef}\n          selectableItemsTypes={selectableItemsTypes}\n          i18nStrings={i18nStrings}\n          resource={resource}\n          viewHref={viewHref}\n          invalid={invalid}\n          inputAriaDescribedby={inputAriaDescribedby}\n          fetchVersions={fetchVersions}\n          onBrowse={() => setModalOpen(true)}\n          onChange={(resource, errorText) => fireNonCancelableEvent(onChange, { resource, errorText })}\n        />\n        {!modalOpen && alert && (\n          <InternalBox className={styles.alert} margin={{ top: 's' }}>\n            {alert}\n          </InternalBox>\n        )}\n        {modalOpen && <S3Modal {...modalProps} />}\n      </div>\n    );\n  }\n);\n\napplyDisplayName(S3ResourceSelector, 'S3ResourceSelector');\nexport default S3ResourceSelector;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}