{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef, useState, useMemo, useImperativeHandle } from 'react';\nimport InternalSpaceBetween from '../space-between/internal';\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { KeyCode } from '../internal/keycode';\nimport SelectToggle from '../token-group/toggle';\nimport { generateUniqueId } from '../internal/hooks/use-unique-id/index';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { TokenButton } from './token';\nimport { getQueryActions, parseText, getAutosuggestOptions, getAllowedOperators, getExtendedOperator } from './controller';\nimport { useLoadItems } from './use-load-items';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport PropertyFilterAutosuggest from './property-filter-autosuggest';\nimport { PropertyEditor } from './property-editor';\nvar PropertyFilter = React.forwardRef(function (_a, ref) {\n  var _b;\n  var disabled = _a.disabled,\n    i18nStrings = _a.i18nStrings,\n    countText = _a.countText,\n    query = _a.query,\n    hideOperations = _a.hideOperations,\n    onChange = _a.onChange,\n    filteringProperties = _a.filteringProperties,\n    _c = _a.filteringOptions,\n    filteringOptions = _c === void 0 ? [] : _c,\n    _d = _a.customGroupsText,\n    customGroupsText = _d === void 0 ? [] : _d,\n    _e = _a.disableFreeTextFiltering,\n    disableFreeTextFiltering = _e === void 0 ? false : _e,\n    onLoadItems = _a.onLoadItems,\n    virtualScroll = _a.virtualScroll,\n    customControl = _a.customControl,\n    filteringEmpty = _a.filteringEmpty,\n    filteringLoadingText = _a.filteringLoadingText,\n    filteringFinishedText = _a.filteringFinishedText,\n    filteringErrorText = _a.filteringErrorText,\n    filteringRecoveryText = _a.filteringRecoveryText,\n    filteringStatusType = _a.filteringStatusType,\n    asyncProperties = _a.asyncProperties,\n    tokenLimit = _a.tokenLimit,\n    expandToViewport = _a.expandToViewport,\n    rest = __rest(_a, [\"disabled\", \"i18nStrings\", \"countText\", \"query\", \"hideOperations\", \"onChange\", \"filteringProperties\", \"filteringOptions\", \"customGroupsText\", \"disableFreeTextFiltering\", \"onLoadItems\", \"virtualScroll\", \"customControl\", \"filteringEmpty\", \"filteringLoadingText\", \"filteringFinishedText\", \"filteringErrorText\", \"filteringRecoveryText\", \"filteringStatusType\", \"asyncProperties\", \"tokenLimit\", \"expandToViewport\"]);\n  var __internalRootRef = useBaseComponent('PropertyFilter').__internalRootRef;\n  var inputRef = useRef(null);\n  var baseProps = getBaseProps(rest);\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function () {\n        var _a;\n        return (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      }\n    };\n  }, []);\n  var tokens = query.tokens,\n    operation = query.operation;\n  var showResults = (tokens === null || tokens === void 0 ? void 0 : tokens.length) && !disabled;\n  var _f = getQueryActions(query, onChange, inputRef),\n    addToken = _f.addToken,\n    removeToken = _f.removeToken,\n    setToken = _f.setToken,\n    setOperation = _f.setOperation,\n    removeAllTokens = _f.removeAllTokens;\n  var _g = useState(''),\n    filteringText = _g[0],\n    setFilteringText = _g[1];\n  var parsedText = parseText(filteringText, filteringProperties, disableFreeTextFiltering);\n  var autosuggestOptions = getAutosuggestOptions(parsedText, filteringOptions, filteringProperties, customGroupsText, i18nStrings);\n  var createToken = function (currentText) {\n    var parsedText = parseText(currentText, filteringProperties, disableFreeTextFiltering);\n    var newToken;\n    switch (parsedText.step) {\n      case 'property':\n        {\n          newToken = {\n            propertyKey: parsedText.property.key,\n            operator: parsedText.operator,\n            value: parsedText.value\n          };\n          break;\n        }\n      case 'free-text':\n        {\n          newToken = {\n            operator: parsedText.operator || ':',\n            value: parsedText.value\n          };\n          break;\n        }\n      case 'operator':\n        {\n          newToken = {\n            operator: ':',\n            value: currentText\n          };\n          break;\n        }\n    }\n    if (disableFreeTextFiltering && !('propertyKey' in newToken)) {\n      return;\n    }\n    addToken(newToken);\n    setFilteringText('');\n  };\n  var ignoreKeyDown = useRef(false);\n  var handleKeyDown = function (event) {\n    if (filteringText && !ignoreKeyDown.current && event.detail.keyCode === KeyCode.enter) {\n      createToken(filteringText);\n    }\n  };\n  var getLoadMoreDetail = function (parsedText, filteringText) {\n    var loadMoreDetail = {\n      filteringProperty: undefined,\n      filteringText: filteringText,\n      filteringOperator: undefined\n    };\n    if (parsedText.step === 'property') {\n      loadMoreDetail.filteringProperty = parsedText.property;\n      loadMoreDetail.filteringText = parsedText.value;\n      loadMoreDetail.filteringOperator = parsedText.operator;\n    }\n    return loadMoreDetail;\n  };\n  var loadMoreDetail = getLoadMoreDetail(parsedText, filteringText);\n  var inputLoadItemsHandlers = useLoadItems(onLoadItems, loadMoreDetail.filteringText, loadMoreDetail.filteringProperty, loadMoreDetail.filteringText, loadMoreDetail.filteringOperator);\n  var asyncProps = {\n    empty: filteringEmpty,\n    loadingText: filteringLoadingText,\n    finishedText: filteringFinishedText,\n    errorText: filteringErrorText,\n    recoveryText: filteringRecoveryText,\n    statusType: filteringStatusType\n  };\n  var asyncAutosuggestProps = !!filteringText.length || asyncProperties ? __assign(__assign({}, inputLoadItemsHandlers), asyncProps) : {};\n  var handleSelected = function (event) {\n    // The ignoreKeyDown flag makes sure `createToken` routine runs only once. Autosuggest's `onKeyDown` fires,\n    // when an item is selected from the list using \"enter\" key.\n    ignoreKeyDown.current = true;\n    setTimeout(function () {\n      ignoreKeyDown.current = false;\n    }, 0);\n    var option = event.detail;\n    var value = option.value || '';\n    if ('tokenValue' in option) {\n      createToken(option.tokenValue);\n      return;\n    }\n    // create a token from the 'use' option\n    if (!('keepOpenOnSelect' in option)) {\n      createToken(value);\n      return;\n    }\n    // stop dropdown from closing\n    event.preventDefault();\n    var parsedText = parseText(value, filteringProperties, disableFreeTextFiltering);\n    var loadMoreDetail = getLoadMoreDetail(parsedText, value);\n    // Insert operator automatically if only one operator is defined for the given property.\n    if (parsedText.step === 'operator') {\n      var operators = getAllowedOperators(parsedText.property);\n      if (value.trim() === parsedText.property.propertyLabel && operators.length === 1) {\n        loadMoreDetail.filteringProperty = parsedText.property;\n        loadMoreDetail.filteringOperator = operators[0];\n        loadMoreDetail.filteringText = '';\n        setFilteringText(parsedText.property.propertyLabel + ' ' + operators[0] + ' ');\n      }\n    }\n    fireNonCancelableEvent(onLoadItems, __assign(__assign({}, loadMoreDetail), {\n      firstPage: true,\n      samePage: false\n    }));\n  };\n  var _h = useState(false),\n    tokensExpanded = _h[0],\n    setTokensExpanded = _h[1];\n  var toggleExpandedTokens = function () {\n    return setTokensExpanded(!tokensExpanded);\n  };\n  var hasHiddenOptions = tokenLimit !== undefined && tokens.length > tokenLimit;\n  var slicedTokens = hasHiddenOptions && !tokensExpanded ? tokens.slice(0, tokenLimit) : tokens;\n  var controlId = useMemo(function () {\n    return generateUniqueId();\n  }, []);\n  var operatorForm = parsedText.step === 'property' && ((_b = getExtendedOperator(filteringProperties, parsedText.property.key, parsedText.operator)) === null || _b === void 0 ? void 0 : _b.form);\n  return React.createElement(\"span\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: __internalRootRef\n  }), React.createElement(\"div\", {\n    className: styles['search-field']\n  }, customControl && React.createElement(\"div\", {\n    className: styles['custom-control']\n  }, customControl), React.createElement(PropertyFilterAutosuggest, __assign({\n    ref: inputRef,\n    virtualScroll: virtualScroll,\n    enteredTextLabel: i18nStrings.enteredTextLabel,\n    ariaLabel: i18nStrings.filteringAriaLabel,\n    placeholder: i18nStrings.filteringPlaceholder,\n    value: filteringText,\n    disabled: disabled,\n    onKeyDown: handleKeyDown\n  }, autosuggestOptions, {\n    onChange: function (event) {\n      return setFilteringText(event.detail.value);\n    },\n    empty: filteringEmpty\n  }, asyncAutosuggestProps, {\n    expandToViewport: expandToViewport,\n    onOptionClick: handleSelected,\n    customForm: operatorForm && React.createElement(PropertyEditor, {\n      property: parsedText.property,\n      operator: parsedText.operator,\n      filter: parsedText.value,\n      operatorForm: operatorForm,\n      i18nStrings: i18nStrings,\n      onCancel: function () {\n        var _a, _b;\n        setFilteringText('');\n        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.close();\n        (_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.focus({\n          preventDropdown: true\n        });\n      },\n      onSubmit: function (token) {\n        var _a, _b;\n        addToken(token);\n        setFilteringText('');\n        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus({\n          preventDropdown: true\n        });\n        (_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.close();\n      }\n    }),\n    hideEnteredTextOption: disableFreeTextFiltering && parsedText.step !== 'property'\n  })), React.createElement(\"span\", {\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\",\n    className: clsx(styles.results, showResults && styles['results-visible'])\n  }, showResults ? countText : '')), tokens && tokens.length > 0 && React.createElement(\"div\", {\n    className: styles.tokens\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"xs\",\n    direction: \"horizontal\",\n    id: controlId\n  }, slicedTokens.map(function (token, index) {\n    return React.createElement(TokenButton, {\n      token: token,\n      first: index === 0,\n      operation: operation,\n      key: index,\n      removeToken: function () {\n        return removeToken(index);\n      },\n      setToken: function (newToken) {\n        return setToken(index, newToken);\n      },\n      setOperation: setOperation,\n      filteringOptions: filteringOptions,\n      filteringProperties: filteringProperties,\n      asyncProps: asyncProps,\n      onLoadItems: onLoadItems,\n      i18nStrings: i18nStrings,\n      asyncProperties: asyncProperties,\n      hideOperations: hideOperations,\n      customGroupsText: customGroupsText,\n      disableFreeTextFiltering: disableFreeTextFiltering,\n      disabled: disabled,\n      expandToViewport: expandToViewport\n    });\n  }), hasHiddenOptions && React.createElement(\"div\", {\n    className: styles['toggle-collapsed']\n  }, React.createElement(SelectToggle, {\n    controlId: controlId,\n    allHidden: tokenLimit === 0,\n    expanded: tokensExpanded,\n    numberOfHiddenOptions: tokens.length - slicedTokens.length,\n    i18nStrings: {\n      limitShowFewer: i18nStrings.tokenLimitShowFewer,\n      limitShowMore: i18nStrings.tokenLimitShowMore\n    },\n    onClick: toggleExpandedTokens\n  })), React.createElement(\"div\", {\n    className: styles.separator\n  }), React.createElement(InternalButton, {\n    onClick: removeAllTokens,\n    className: styles['remove-all'],\n    disabled: disabled\n  }, i18nStrings.clearFiltersText))));\n});\napplyDisplayName(PropertyFilter, 'PropertyFilter');\nexport default PropertyFilter;","map":{"version":3,"mappings":"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","names":["clsx","React","useRef","useState","useMemo","useImperativeHandle","InternalSpaceBetween","InternalButton","getBaseProps","applyDisplayName","KeyCode","SelectToggle","generateUniqueId","fireNonCancelableEvent","TokenButton","getQueryActions","parseText","getAutosuggestOptions","getAllowedOperators","getExtendedOperator","useLoadItems","styles","useBaseComponent","PropertyFilterAutosuggest","PropertyEditor","PropertyFilter","forwardRef","_a","ref","i18nStrings","countText","query","hideOperations","onChange","filteringProperties","_c","filteringOptions","_d","customGroupsText","_e","disableFreeTextFiltering","onLoadItems","virtualScroll","customControl","filteringEmpty","filteringLoadingText","filteringFinishedText","filteringErrorText","filteringRecoveryText","filteringStatusType","asyncProperties","tokenLimit","expandToViewport","rest","inputRef","baseProps","focus","current","operation","showResults","tokens","length","disabled","addToken","removeToken","setToken","setOperation","removeAllTokens","filteringText","setFilteringText","parsedText","autosuggestOptions","createToken","currentText","newToken","step","propertyKey","property","key","operator","value","ignoreKeyDown","handleKeyDown","event","detail","keyCode","enter","getLoadMoreDetail","loadMoreDetail","filteringProperty","undefined","filteringOperator","inputLoadItemsHandlers","asyncProps","empty","loadingText","finishedText","errorText","recoveryText","statusType","asyncAutosuggestProps","__assign","handleSelected","setTimeout","option","tokenValue","preventDefault","operators","trim","propertyLabel","firstPage","samePage","tokensExpanded","setTokensExpanded","toggleExpandedTokens","hasHiddenOptions","slicedTokens","slice","controlId","operatorForm","form","className","root","__internalRootRef","enteredTextLabel","ariaLabel","filteringAriaLabel","placeholder","filteringPlaceholder","onKeyDown","onOptionClick","customForm","filter","onCancel","close","preventDropdown","onSubmit","token","hideEnteredTextOption","results","size","direction","id","map","index","first","allHidden","expanded","numberOfHiddenOptions","limitShowFewer","tokenLimitShowFewer","limitShowMore","tokenLimitShowMore","onClick","separator","clearFiltersText"],"sources":["/Users/dcastro/node_modules/src/property-filter/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef, useState, useMemo, useImperativeHandle } from 'react';\n\nimport InternalSpaceBetween from '../space-between/internal';\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { KeyCode } from '../internal/keycode';\nimport SelectToggle from '../token-group/toggle';\nimport { generateUniqueId } from '../internal/hooks/use-unique-id/index';\nimport { fireNonCancelableEvent } from '../internal/events';\n\nimport { PropertyFilterProps, ParsedText, Ref, FilteringProperty, ComparisonOperator, Token } from './interfaces';\nimport { TokenButton } from './token';\nimport {\n  getQueryActions,\n  parseText,\n  getAutosuggestOptions,\n  getAllowedOperators,\n  getExtendedOperator,\n} from './controller';\nimport { useLoadItems } from './use-load-items';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport PropertyFilterAutosuggest, { PropertyFilterAutosuggestProps } from './property-filter-autosuggest';\nimport { PropertyEditor } from './property-editor';\nimport { AutosuggestInputRef } from '../internal/components/autosuggest-input';\n\nexport { PropertyFilterProps };\n\nconst PropertyFilter = React.forwardRef(\n  (\n    {\n      disabled,\n      i18nStrings,\n      countText,\n      query,\n      hideOperations,\n      onChange,\n      filteringProperties,\n      filteringOptions = [],\n      customGroupsText = [],\n      disableFreeTextFiltering = false,\n      onLoadItems,\n      virtualScroll,\n      customControl,\n      filteringEmpty,\n      filteringLoadingText,\n      filteringFinishedText,\n      filteringErrorText,\n      filteringRecoveryText,\n      filteringStatusType,\n      asyncProperties,\n      tokenLimit,\n      expandToViewport,\n      ...rest\n    }: PropertyFilterProps,\n    ref: React.Ref<Ref>\n  ) => {\n    const { __internalRootRef } = useBaseComponent('PropertyFilter');\n    const inputRef = useRef<AutosuggestInputRef>(null);\n    const baseProps = getBaseProps(rest);\n    useImperativeHandle(ref, () => ({ focus: () => inputRef.current?.focus() }), []);\n    const { tokens, operation } = query;\n    const showResults = tokens?.length && !disabled;\n    const { addToken, removeToken, setToken, setOperation, removeAllTokens } = getQueryActions(\n      query,\n      onChange,\n      inputRef\n    );\n    const [filteringText, setFilteringText] = useState<string>('');\n    const parsedText = parseText(filteringText, filteringProperties, disableFreeTextFiltering);\n    const autosuggestOptions = getAutosuggestOptions(\n      parsedText,\n      filteringOptions,\n      filteringProperties,\n      customGroupsText,\n      i18nStrings\n    );\n\n    const createToken = (currentText: string) => {\n      const parsedText = parseText(currentText, filteringProperties, disableFreeTextFiltering);\n      let newToken: Token;\n      switch (parsedText.step) {\n        case 'property': {\n          newToken = {\n            propertyKey: parsedText.property.key,\n            operator: parsedText.operator,\n            value: parsedText.value,\n          };\n          break;\n        }\n        case 'free-text': {\n          newToken = {\n            operator: parsedText.operator || ':',\n            value: parsedText.value,\n          };\n          break;\n        }\n        case 'operator': {\n          newToken = {\n            operator: ':',\n            value: currentText,\n          };\n          break;\n        }\n      }\n      if (disableFreeTextFiltering && !('propertyKey' in newToken)) {\n        return;\n      }\n      addToken(newToken);\n      setFilteringText('');\n    };\n    const ignoreKeyDown = useRef<boolean>(false);\n    const handleKeyDown: PropertyFilterAutosuggestProps['onKeyDown'] = event => {\n      if (filteringText && !ignoreKeyDown.current && event.detail.keyCode === KeyCode.enter) {\n        createToken(filteringText);\n      }\n    };\n    const getLoadMoreDetail = (parsedText: ParsedText, filteringText: string) => {\n      const loadMoreDetail: {\n        filteringProperty: FilteringProperty | undefined;\n        filteringText: string;\n        filteringOperator: ComparisonOperator | undefined;\n      } = {\n        filteringProperty: undefined,\n        filteringText,\n        filteringOperator: undefined,\n      };\n      if (parsedText.step === 'property') {\n        loadMoreDetail.filteringProperty = parsedText.property;\n        loadMoreDetail.filteringText = parsedText.value;\n        loadMoreDetail.filteringOperator = parsedText.operator;\n      }\n      return loadMoreDetail;\n    };\n    const loadMoreDetail = getLoadMoreDetail(parsedText, filteringText);\n    const inputLoadItemsHandlers = useLoadItems(\n      onLoadItems,\n      loadMoreDetail.filteringText,\n      loadMoreDetail.filteringProperty,\n      loadMoreDetail.filteringText,\n      loadMoreDetail.filteringOperator\n    );\n    const asyncProps = {\n      empty: filteringEmpty,\n      loadingText: filteringLoadingText,\n      finishedText: filteringFinishedText,\n      errorText: filteringErrorText,\n      recoveryText: filteringRecoveryText,\n      statusType: filteringStatusType,\n    };\n    const asyncAutosuggestProps =\n      !!filteringText.length || asyncProperties\n        ? {\n            ...inputLoadItemsHandlers,\n            ...asyncProps,\n          }\n        : {};\n    const handleSelected: PropertyFilterAutosuggestProps['onOptionClick'] = event => {\n      // The ignoreKeyDown flag makes sure `createToken` routine runs only once. Autosuggest's `onKeyDown` fires,\n      // when an item is selected from the list using \"enter\" key.\n      ignoreKeyDown.current = true;\n      setTimeout(() => {\n        ignoreKeyDown.current = false;\n      }, 0);\n      const { detail: option } = event;\n      const value = option.value || '';\n      if ('tokenValue' in option) {\n        createToken((option as { tokenValue: string }).tokenValue);\n        return;\n      }\n      // create a token from the 'use' option\n      if (!('keepOpenOnSelect' in option)) {\n        createToken(value);\n        return;\n      }\n\n      // stop dropdown from closing\n      event.preventDefault();\n\n      const parsedText = parseText(value, filteringProperties, disableFreeTextFiltering);\n      const loadMoreDetail = getLoadMoreDetail(parsedText, value);\n\n      // Insert operator automatically if only one operator is defined for the given property.\n      if (parsedText.step === 'operator') {\n        const operators = getAllowedOperators(parsedText.property);\n        if (value.trim() === parsedText.property.propertyLabel && operators.length === 1) {\n          loadMoreDetail.filteringProperty = parsedText.property;\n          loadMoreDetail.filteringOperator = operators[0];\n          loadMoreDetail.filteringText = '';\n          setFilteringText(parsedText.property.propertyLabel + ' ' + operators[0] + ' ');\n        }\n      }\n\n      fireNonCancelableEvent(onLoadItems, { ...loadMoreDetail, firstPage: true, samePage: false });\n    };\n    const [tokensExpanded, setTokensExpanded] = useState(false);\n    const toggleExpandedTokens = () => setTokensExpanded(!tokensExpanded);\n    const hasHiddenOptions = tokenLimit !== undefined && tokens.length > tokenLimit;\n    const slicedTokens = hasHiddenOptions && !tokensExpanded ? tokens.slice(0, tokenLimit) : tokens;\n    const controlId = useMemo(() => generateUniqueId(), []);\n\n    const operatorForm =\n      parsedText.step === 'property' &&\n      getExtendedOperator(filteringProperties, parsedText.property.key, parsedText.operator)?.form;\n\n    return (\n      <span {...baseProps} className={clsx(baseProps.className, styles.root)} ref={__internalRootRef}>\n        <div className={styles['search-field']}>\n          {customControl && <div className={styles['custom-control']}>{customControl}</div>}\n          <PropertyFilterAutosuggest\n            ref={inputRef}\n            virtualScroll={virtualScroll}\n            enteredTextLabel={i18nStrings.enteredTextLabel}\n            ariaLabel={i18nStrings.filteringAriaLabel}\n            placeholder={i18nStrings.filteringPlaceholder}\n            value={filteringText}\n            disabled={disabled}\n            onKeyDown={handleKeyDown}\n            {...autosuggestOptions}\n            onChange={event => setFilteringText(event.detail.value)}\n            empty={filteringEmpty}\n            {...asyncAutosuggestProps}\n            expandToViewport={expandToViewport}\n            onOptionClick={handleSelected}\n            customForm={\n              operatorForm && (\n                <PropertyEditor\n                  property={parsedText.property}\n                  operator={parsedText.operator}\n                  filter={parsedText.value}\n                  operatorForm={operatorForm}\n                  i18nStrings={i18nStrings}\n                  onCancel={() => {\n                    setFilteringText('');\n                    inputRef.current?.close();\n                    inputRef.current?.focus({ preventDropdown: true });\n                  }}\n                  onSubmit={token => {\n                    addToken(token);\n                    setFilteringText('');\n                    inputRef.current?.focus({ preventDropdown: true });\n                    inputRef.current?.close();\n                  }}\n                />\n              )\n            }\n            hideEnteredTextOption={disableFreeTextFiltering && parsedText.step !== 'property'}\n          />\n          <span\n            aria-live=\"polite\"\n            aria-atomic=\"true\"\n            className={clsx(styles.results, showResults && styles['results-visible'])}\n          >\n            {showResults ? countText : ''}\n          </span>\n        </div>\n        {tokens && tokens.length > 0 && (\n          <div className={styles.tokens}>\n            <InternalSpaceBetween size=\"xs\" direction=\"horizontal\" id={controlId}>\n              {slicedTokens.map((token, index) => (\n                <TokenButton\n                  token={token}\n                  first={index === 0}\n                  operation={operation}\n                  key={index}\n                  removeToken={() => removeToken(index)}\n                  setToken={(newToken: Token) => setToken(index, newToken)}\n                  setOperation={setOperation}\n                  filteringOptions={filteringOptions}\n                  filteringProperties={filteringProperties}\n                  asyncProps={asyncProps}\n                  onLoadItems={onLoadItems}\n                  i18nStrings={i18nStrings}\n                  asyncProperties={asyncProperties}\n                  hideOperations={hideOperations}\n                  customGroupsText={customGroupsText}\n                  disableFreeTextFiltering={disableFreeTextFiltering}\n                  disabled={disabled}\n                  expandToViewport={expandToViewport}\n                />\n              ))}\n              {hasHiddenOptions && (\n                <div className={styles['toggle-collapsed']}>\n                  <SelectToggle\n                    controlId={controlId}\n                    allHidden={tokenLimit === 0}\n                    expanded={tokensExpanded}\n                    numberOfHiddenOptions={tokens.length - slicedTokens.length}\n                    i18nStrings={{\n                      limitShowFewer: i18nStrings.tokenLimitShowFewer,\n                      limitShowMore: i18nStrings.tokenLimitShowMore,\n                    }}\n                    onClick={toggleExpandedTokens}\n                  />\n                </div>\n              )}\n              <div className={styles.separator} />\n              <InternalButton onClick={removeAllTokens} className={styles['remove-all']} disabled={disabled}>\n                {i18nStrings.clearFiltersText}\n              </InternalButton>\n            </InternalSpaceBetween>\n          </div>\n        )}\n      </span>\n    );\n  }\n);\n\napplyDisplayName(PropertyFilter, 'PropertyFilter');\nexport default PropertyFilter;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}