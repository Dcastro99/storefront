{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { isDevelopment } from '../internal/is-development';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalBox from '../box/internal';\nimport ChartStatusContainer, { getChartStatus } from '../internal/components/chart-status-container';\nimport AreaChartFilter from './elements/area-chart-filter';\nimport AreaChartLegend from './elements/area-chart-legend';\nimport InternalSpaceBetween from '../space-between/internal';\nimport ChartContainer from './chart-container';\nimport cartesianStyles from '../internal/components/cartesian-chart/styles.css.js';\nimport styles from './styles.css.js';\nimport useChartModel from './model/use-chart-model';\nimport useFilterProps from './model/use-filter-props';\nimport useHighlightProps from './model/use-highlight-props';\nimport { isSeriesValid } from './model/utils';\nimport { warnOnce } from '../internal/logging';\nimport { nodeContains } from '../internal/utils/dom';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nexport default function InternalAreaChart(_a) {\n  var _b, _c;\n  var height = _a.height,\n    xScaleType = _a.xScaleType,\n    yScaleType = _a.yScaleType,\n    xDomain = _a.xDomain,\n    yDomain = _a.yDomain,\n    controlledHighlightedSeries = _a.highlightedSeries,\n    controlledVisibleSeries = _a.visibleSeries,\n    externalSeries = _a.series,\n    controlledOnVisibleChange = _a.onFilterChange,\n    controlledOnHighlightChange = _a.onHighlightChange,\n    i18nStrings = _a.i18nStrings,\n    ariaLabel = _a.ariaLabel,\n    ariaLabelledby = _a.ariaLabelledby,\n    ariaDescription = _a.ariaDescription,\n    xTitle = _a.xTitle,\n    yTitle = _a.yTitle,\n    hideFilter = _a.hideFilter,\n    additionalFilters = _a.additionalFilters,\n    hideLegend = _a.hideLegend,\n    legendTitle = _a.legendTitle,\n    statusType = _a.statusType,\n    detailPopoverSize = _a.detailPopoverSize,\n    empty = _a.empty,\n    noMatch = _a.noMatch,\n    errorText = _a.errorText,\n    loadingText = _a.loadingText,\n    recoveryText = _a.recoveryText,\n    onRecoveryClick = _a.onRecoveryClick,\n    _d = _a.__internalRootRef,\n    __internalRootRef = _d === void 0 ? null : _d,\n    props = __rest(_a, [\"height\", \"xScaleType\", \"yScaleType\", \"xDomain\", \"yDomain\", \"highlightedSeries\", \"visibleSeries\", \"series\", \"onFilterChange\", \"onHighlightChange\", \"i18nStrings\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescription\", \"xTitle\", \"yTitle\", \"hideFilter\", \"additionalFilters\", \"hideLegend\", \"legendTitle\", \"statusType\", \"detailPopoverSize\", \"empty\", \"noMatch\", \"errorText\", \"loadingText\", \"recoveryText\", \"onRecoveryClick\", \"__internalRootRef\"]);\n  var baseProps = getBaseProps(props);\n  var containerRef = useRef(null);\n  if (isDevelopment) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(function () {\n      if (!isSeriesValid(externalSeries)) {\n        warnOnce('AreaChart', \"The `series` property violates the component's constraints: all `area` \" + 'series must have `data` arrays of the same length and with the same x-values.');\n      }\n    }, [externalSeries]);\n  }\n  var _e = useState(0),\n    width = _e[0],\n    setWidth = _e[1];\n  var _f = useFilterProps(externalSeries, controlledVisibleSeries, controlledOnVisibleChange),\n    visibleSeries = _f[0],\n    setVisibleSeries = _f[1];\n  var _g = useHighlightProps(externalSeries, controlledHighlightedSeries, controlledOnHighlightChange),\n    highlightedSeries = _g[0],\n    setHighlightedSeries = _g[1];\n  var model = useChartModel({\n    externalSeries: externalSeries,\n    visibleSeries: visibleSeries,\n    setVisibleSeries: setVisibleSeries,\n    highlightedSeries: highlightedSeries,\n    setHighlightedSeries: setHighlightedSeries,\n    xDomain: xDomain,\n    yDomain: yDomain,\n    xScaleType: xScaleType,\n    yScaleType: yScaleType,\n    height: height,\n    width: width\n  });\n  var _h = getChartStatus({\n      externalData: externalSeries,\n      visibleData: visibleSeries,\n      statusType: statusType\n    }),\n    isEmpty = _h.isEmpty,\n    isNoMatch = _h.isNoMatch,\n    showChart = _h.showChart;\n  var showFilters = statusType === 'finished' && (!isEmpty || isNoMatch);\n  var showLegend = !hideLegend && !isEmpty && statusType === 'finished';\n  var reserveLegendSpace = !showChart && !hideLegend;\n  var reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);\n  var onBlur = function (event) {\n    if (event.relatedTarget && !nodeContains(containerRef.current, event.relatedTarget)) {\n      model.handlers.onContainerBlur();\n    }\n  };\n  var mergedRef = useMergeRefs(containerRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: mergedRef,\n    onBlur: onBlur\n  }), showFilters && React.createElement(InternalBox, {\n    className: cartesianStyles['filter-container'],\n    margin: {\n      bottom: 'l'\n    }\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"l\",\n    direction: \"horizontal\",\n    className: clsx((_b = {}, _b[styles['has-default-filter']] = !hideFilter, _b))\n  }, !hideFilter && React.createElement(AreaChartFilter, {\n    model: model,\n    filterLabel: i18nStrings.filterLabel,\n    filterPlaceholder: i18nStrings.filterPlaceholder,\n    filterSelectedAriaLabel: i18nStrings.filterSelectedAriaLabel\n  }), additionalFilters)), React.createElement(\"div\", {\n    className: clsx(styles.content, (_c = {}, _c[styles['content--reserve-filter']] = reserveFilterSpace, _c[styles['content--reserve-legend']] = reserveLegendSpace, _c)),\n    style: {\n      minHeight: height\n    }\n  }, React.createElement(ChartStatusContainer, {\n    isEmpty: isEmpty,\n    isNoMatch: isNoMatch,\n    showChart: showChart,\n    statusType: statusType,\n    empty: empty,\n    noMatch: noMatch,\n    loadingText: loadingText,\n    errorText: errorText,\n    recoveryText: recoveryText,\n    onRecoveryClick: onRecoveryClick\n  }), showChart && React.createElement(ChartContainer, {\n    model: model,\n    autoWidth: setWidth,\n    detailPopoverSize: detailPopoverSize,\n    xTitle: xTitle,\n    yTitle: yTitle,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescription: ariaDescription,\n    i18nStrings: i18nStrings\n  })), showLegend && React.createElement(InternalBox, {\n    margin: {\n      top: 'm'\n    }\n  }, React.createElement(AreaChartLegend, {\n    plotContainerRef: containerRef,\n    model: model,\n    legendTitle: legendTitle,\n    ariaLabel: i18nStrings.legendAriaLabel\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","useState","clsx","isDevelopment","getBaseProps","InternalBox","ChartStatusContainer","getChartStatus","AreaChartFilter","AreaChartLegend","InternalSpaceBetween","ChartContainer","cartesianStyles","styles","useChartModel","useFilterProps","useHighlightProps","isSeriesValid","warnOnce","nodeContains","useMergeRefs","InternalAreaChart","_a","xScaleType","yScaleType","xDomain","yDomain","controlledHighlightedSeries","controlledVisibleSeries","externalSeries","controlledOnVisibleChange","controlledOnHighlightChange","i18nStrings","ariaLabel","ariaLabelledby","ariaDescription","xTitle","yTitle","hideFilter","additionalFilters","hideLegend","legendTitle","statusType","detailPopoverSize","empty","noMatch","errorText","loadingText","recoveryText","onRecoveryClick","_d","__internalRootRef","props","baseProps","containerRef","width","setWidth","visibleSeries","setVisibleSeries","highlightedSeries","setHighlightedSeries","model","height","externalData","visibleData","isEmpty","isNoMatch","showChart","showFilters","showLegend","reserveLegendSpace","reserveFilterSpace","onBlur","event","relatedTarget","current","handlers","onContainerBlur","mergedRef","className","root","ref","margin","bottom","size","direction","_b","filterLabel","filterPlaceholder","filterSelectedAriaLabel","content","_c","style","minHeight","autoWidth","top","plotContainerRef","legendAriaLabel"],"sources":["/Users/dcastro/node_modules/src/area-chart/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { isDevelopment } from '../internal/is-development';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalBox from '../box/internal';\nimport ChartStatusContainer, { getChartStatus } from '../internal/components/chart-status-container';\n\nimport AreaChartFilter from './elements/area-chart-filter';\nimport AreaChartLegend from './elements/area-chart-legend';\nimport { AreaChartProps } from './interfaces';\nimport InternalSpaceBetween from '../space-between/internal';\nimport ChartContainer from './chart-container';\nimport cartesianStyles from '../internal/components/cartesian-chart/styles.css.js';\nimport styles from './styles.css.js';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport useChartModel from './model/use-chart-model';\nimport useFilterProps from './model/use-filter-props';\nimport useHighlightProps from './model/use-highlight-props';\nimport { isSeriesValid } from './model/utils';\nimport { warnOnce } from '../internal/logging';\nimport { nodeContains } from '../internal/utils/dom';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { SomeRequired } from '../internal/types';\n\ntype InternalAreaChartProps<T extends AreaChartProps.DataTypes> = SomeRequired<\n  AreaChartProps<T>,\n  'height' | 'xScaleType' | 'yScaleType' | 'statusType' | 'detailPopoverSize' | 'i18nStrings'\n> &\n  InternalBaseComponentProps;\n\nexport default function InternalAreaChart<T extends AreaChartProps.DataTypes>({\n  height,\n  xScaleType,\n  yScaleType,\n  xDomain,\n  yDomain,\n  highlightedSeries: controlledHighlightedSeries,\n  visibleSeries: controlledVisibleSeries,\n  series: externalSeries,\n  onFilterChange: controlledOnVisibleChange,\n  onHighlightChange: controlledOnHighlightChange,\n  i18nStrings,\n  ariaLabel,\n  ariaLabelledby,\n  ariaDescription,\n  xTitle,\n  yTitle,\n  hideFilter,\n  additionalFilters,\n  hideLegend,\n  legendTitle,\n  statusType,\n  detailPopoverSize,\n  empty,\n  noMatch,\n  errorText,\n  loadingText,\n  recoveryText,\n  onRecoveryClick,\n  __internalRootRef = null,\n  ...props\n}: InternalAreaChartProps<T>) {\n  const baseProps = getBaseProps(props);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  if (isDevelopment) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (!isSeriesValid(externalSeries)) {\n        warnOnce(\n          'AreaChart',\n          \"The `series` property violates the component's constraints: all `area` \" +\n            'series must have `data` arrays of the same length and with the same x-values.'\n        );\n      }\n    }, [externalSeries]);\n  }\n\n  const [width, setWidth] = useState(0);\n  const [visibleSeries, setVisibleSeries] = useFilterProps(\n    externalSeries,\n    controlledVisibleSeries,\n    controlledOnVisibleChange\n  );\n  const [highlightedSeries, setHighlightedSeries] = useHighlightProps(\n    externalSeries,\n    controlledHighlightedSeries,\n    controlledOnHighlightChange\n  );\n  const model = useChartModel({\n    externalSeries,\n    visibleSeries,\n    setVisibleSeries,\n    highlightedSeries,\n    setHighlightedSeries,\n    xDomain,\n    yDomain,\n    xScaleType,\n    yScaleType,\n    height,\n    width,\n  });\n\n  const { isEmpty, isNoMatch, showChart } = getChartStatus({\n    externalData: externalSeries,\n    visibleData: visibleSeries,\n    statusType,\n  });\n  const showFilters = statusType === 'finished' && (!isEmpty || isNoMatch);\n  const showLegend = !hideLegend && !isEmpty && statusType === 'finished';\n  const reserveLegendSpace = !showChart && !hideLegend;\n  const reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);\n\n  const onBlur = (event: React.FocusEvent) => {\n    if (event.relatedTarget && !nodeContains(containerRef.current, event.relatedTarget)) {\n      model.handlers.onContainerBlur();\n    }\n  };\n\n  const mergedRef = useMergeRefs(containerRef, __internalRootRef);\n\n  return (\n    <div {...baseProps} className={clsx(baseProps.className, styles.root)} ref={mergedRef} onBlur={onBlur}>\n      {showFilters && (\n        <InternalBox className={cartesianStyles['filter-container']} margin={{ bottom: 'l' }}>\n          <InternalSpaceBetween\n            size=\"l\"\n            direction=\"horizontal\"\n            className={clsx({ [styles['has-default-filter']]: !hideFilter })}\n          >\n            {!hideFilter && (\n              <AreaChartFilter\n                model={model}\n                filterLabel={i18nStrings.filterLabel}\n                filterPlaceholder={i18nStrings.filterPlaceholder}\n                filterSelectedAriaLabel={i18nStrings.filterSelectedAriaLabel}\n              />\n            )}\n            {additionalFilters}\n          </InternalSpaceBetween>\n        </InternalBox>\n      )}\n\n      <div\n        className={clsx(styles.content, {\n          [styles['content--reserve-filter']]: reserveFilterSpace,\n          [styles['content--reserve-legend']]: reserveLegendSpace,\n        })}\n        style={{ minHeight: height }}\n      >\n        <ChartStatusContainer\n          isEmpty={isEmpty}\n          isNoMatch={isNoMatch}\n          showChart={showChart}\n          statusType={statusType}\n          empty={empty}\n          noMatch={noMatch}\n          loadingText={loadingText}\n          errorText={errorText}\n          recoveryText={recoveryText}\n          onRecoveryClick={onRecoveryClick}\n        />\n        {showChart && (\n          <ChartContainer\n            model={model}\n            autoWidth={setWidth}\n            detailPopoverSize={detailPopoverSize}\n            xTitle={xTitle}\n            yTitle={yTitle}\n            ariaLabel={ariaLabel}\n            ariaLabelledby={ariaLabelledby}\n            ariaDescription={ariaDescription}\n            i18nStrings={i18nStrings}\n          />\n        )}\n      </div>\n\n      {showLegend && (\n        <InternalBox margin={{ top: 'm' }}>\n          <AreaChartLegend\n            plotContainerRef={containerRef}\n            model={model}\n            legendTitle={legendTitle}\n            ariaLabel={i18nStrings.legendAriaLabel}\n          />\n        </InternalBox>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}