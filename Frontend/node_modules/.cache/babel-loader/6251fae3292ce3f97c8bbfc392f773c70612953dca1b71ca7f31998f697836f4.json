{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getMatchingBreakpoint, mobileBreakpoint } from '../../breakpoints';\nimport { createSingletonState } from '../use-singleton-handler';\nfunction getIsMobile() {\n  if (typeof window === 'undefined') {\n    // assume desktop in server-rendering\n    return false;\n  }\n  if (window.matchMedia) {\n    /**\n     * Some browsers include the scrollbar width in their media query calculations, but\n     * some browsers don't. Thus we can't use `window.innerWidth` or\n     * `document.documentElement.clientWidth` to get a very accurate result (since we\n     * wouldn't know which one of them to use).\n     * Instead, we use the media query here in JS too.\n     */\n    return window.matchMedia(\"(max-width: \".concat(mobileBreakpoint, \"px)\")).matches;\n  }\n  return getMatchingBreakpoint(window.innerWidth, ['xs']) !== 'xs';\n}\nexport var useMobile = createSingletonState({\n  initialState: function () {\n    return getIsMobile();\n  },\n  factory: function (handler) {\n    var listener = function () {\n      return handler(getIsMobile());\n    };\n    window.addEventListener('resize', listener);\n    return function () {\n      window.removeEventListener('resize', listener);\n    };\n  }\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,qBAAqB,EAAEC,gBAAgB,QAAQ,mBAAmB;AAC3E,SAASC,oBAAoB,QAAQ,0BAA0B;AAE/D,SAASC,WAAW;EAClB,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IACjC;IACA,OAAO,KAAK;;EAGd,IAAIA,MAAM,CAACC,UAAU,EAAE;IACrB;;;;;;;IAOA,OAAOD,MAAM,CAACC,UAAU,CAAC,sBAAeJ,gBAAgB,QAAK,CAAC,CAACK,OAAO;;EAGxE,OAAON,qBAAqB,CAACI,MAAM,CAACG,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI;AAClE;AAEA,OAAO,IAAMC,SAAS,GAAGN,oBAAoB,CAAU;EACrDO,YAAY,EAAE;IAAM,kBAAW,EAAE;EAAb,CAAa;EACjCC,OAAO,EAAE,iBAAO;IACd,IAAMC,QAAQ,GAAG;MAAM,cAAO,CAACR,WAAW,EAAE,CAAC;IAAtB,CAAsB;IAC7CC,MAAM,CAACQ,gBAAgB,CAAC,QAAQ,EAAED,QAAQ,CAAC;IAC3C,OAAO;MACLP,MAAM,CAACS,mBAAmB,CAAC,QAAQ,EAAEF,QAAQ,CAAC;IAChD,CAAC;EACH;CACD,CAAC","names":["getMatchingBreakpoint","mobileBreakpoint","createSingletonState","getIsMobile","window","matchMedia","matches","innerWidth","useMobile","initialState","factory","listener","addEventListener","removeEventListener"],"sources":["/Users/dcastro/node_modules/src/internal/hooks/use-mobile/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getMatchingBreakpoint, mobileBreakpoint } from '../../breakpoints';\nimport { createSingletonState } from '../use-singleton-handler';\n\nfunction getIsMobile() {\n  if (typeof window === 'undefined') {\n    // assume desktop in server-rendering\n    return false;\n  }\n\n  if (window.matchMedia) {\n    /**\n     * Some browsers include the scrollbar width in their media query calculations, but\n     * some browsers don't. Thus we can't use `window.innerWidth` or\n     * `document.documentElement.clientWidth` to get a very accurate result (since we\n     * wouldn't know which one of them to use).\n     * Instead, we use the media query here in JS too.\n     */\n    return window.matchMedia(`(max-width: ${mobileBreakpoint}px)`).matches;\n  }\n\n  return getMatchingBreakpoint(window.innerWidth, ['xs']) !== 'xs';\n}\n\nexport const useMobile = createSingletonState<boolean>({\n  initialState: () => getIsMobile(),\n  factory: handler => {\n    const listener = () => handler(getIsMobile());\n    window.addEventListener('resize', listener);\n    return () => {\n      window.removeEventListener('resize', listener);\n    };\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}