{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\nimport AbstractSwitch from '../internal/components/abstract-switch';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport styles from './styles.css.js';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nvar InternalToggle = React.forwardRef(function (_a, ref) {\n  var _b, _c;\n  var controlId = _a.controlId,\n    checked = _a.checked,\n    name = _a.name,\n    disabled = _a.disabled,\n    children = _a.children,\n    description = _a.description,\n    ariaLabel = _a.ariaLabel,\n    onFocus = _a.onFocus,\n    onBlur = _a.onBlur,\n    onChange = _a.onChange,\n    _d = _a.__internalRootRef,\n    __internalRootRef = _d === void 0 ? null : _d,\n    rest = __rest(_a, [\"controlId\", \"checked\", \"name\", \"disabled\", \"children\", \"description\", \"ariaLabel\", \"onFocus\", \"onBlur\", \"onChange\", \"__internalRootRef\"]);\n  var _e = useFormFieldContext(rest),\n    ariaDescribedby = _e.ariaDescribedby,\n    ariaLabelledby = _e.ariaLabelledby;\n  var baseProps = getBaseProps(rest);\n  var checkboxRef = useRef(null);\n  useForwardFocus(ref, checkboxRef);\n  return React.createElement(AbstractSwitch, __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    controlClassName: clsx(styles['toggle-control'], (_b = {}, _b[styles['toggle-control-checked']] = checked, _b[styles['toggle-control-disabled']] = disabled, _b)),\n    outlineClassName: styles.outline,\n    controlId: controlId,\n    disabled: disabled,\n    label: children,\n    description: description,\n    descriptionBottomPadding: true,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescribedby: ariaDescribedby,\n    nativeControl: function (nativeControlProps) {\n      return React.createElement(\"input\", __assign({}, nativeControlProps, {\n        ref: checkboxRef,\n        type: \"checkbox\",\n        checked: checked,\n        name: name,\n        onFocus: onFocus && function () {\n          return fireNonCancelableEvent(onFocus);\n        },\n        onBlur: onBlur && function () {\n          return fireNonCancelableEvent(onBlur);\n        },\n        onChange: onChange && function (event) {\n          return fireNonCancelableEvent(onChange, {\n            checked: event.target.checked\n          });\n        }\n      }));\n    },\n    styledControl: /*Using span, not div for HTML validity*/\n    React.createElement(\"span\", {\n      className: clsx(styles['toggle-handle'], (_c = {}, _c[styles['toggle-handle-checked']] = checked, _c[styles['toggle-handle-disabled']] = disabled, _c))\n    }),\n    __internalRootRef: __internalRootRef\n  }));\n});\nexport default InternalToggle;","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAOC,cAAc,MAAM,wCAAwC;AACnE,OAAOC,eAAe,MAAM,iCAAiC;AAC7D,SAASC,sBAAsB,QAAQ,oBAAoB;AAC3D,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAOC,MAAM,MAAM,iBAAiB;AAGpC,SAASC,mBAAmB,QAAQ,wCAAwC;AAI5E,IAAMC,cAAc,GAAGR,KAAK,CAACS,UAAU,CACrC,UACEC,EAaC,EACDC,GAAG;;EAbD,aAAS;IACTC,OAAO;IACPC,IAAI;IACJC,QAAQ;IACRC,QAAQ;IACRC,WAAW;IACXC,SAAS;IACTC,OAAO;IACPC,MAAM;IACNC,QAAQ;IACRC,yBAAwB;IAAxBC,iBAAiB,mBAAG,IAAI;IACrBC,IAAI,cAZT,0IAaC,CADQ;EAIH,SAAsChB,mBAAmB,CAACgB,IAAI,CAAC;IAA7DC,eAAe;IAAEC,cAAc,oBAA8B;EACrE,IAAMC,SAAS,GAAGrB,YAAY,CAACkB,IAAI,CAAC;EACpC,IAAMI,WAAW,GAAG1B,MAAM,CAAmB,IAAI,CAAC;EAClDE,eAAe,CAACQ,GAAG,EAAEgB,WAAW,CAAC;EACjC,OACE3B,oBAACE,cAAc,eACTwB,SAAS;IACbE,SAAS,EAAE7B,IAAI,CAACO,MAAM,CAACuB,IAAI,EAAEH,SAAS,CAACE,SAAS,CAAC;IACjDE,gBAAgB,EAAE/B,IAAI,CAACO,MAAM,CAAC,gBAAgB,CAAC,YAC7CyB,GAACzB,MAAM,CAAC,wBAAwB,CAAC,IAAGM,OAAO,EAC3CmB,GAACzB,MAAM,CAAC,yBAAyB,CAAC,IAAGQ,QAAQ,MAC7C;IACFkB,gBAAgB,EAAE1B,MAAM,CAAC2B,OAAO;IAChCC,SAAS,EAAEA,SAAS;IACpBpB,QAAQ,EAAEA,QAAQ;IAClBqB,KAAK,EAAEpB,QAAQ;IACfC,WAAW,EAAEA,WAAW;IACxBoB,wBAAwB,EAAE,IAAI;IAC9BnB,SAAS,EAAEA,SAAS;IACpBQ,cAAc,EAAEA,cAAc;IAC9BD,eAAe,EAAEA,eAAe;IAChCa,aAAa,EAAE,4BAAkB;MAAI,OACnCrC,0CACMsC,kBAAkB;QACtB3B,GAAG,EAAEgB,WAAW;QAChBY,IAAI,EAAC,UAAU;QACf3B,OAAO,EAAEA,OAAO;QAChBC,IAAI,EAAEA,IAAI;QACVK,OAAO,EAAEA,OAAO,IAAK;UAAM,6BAAsB,CAACA,OAAO,CAAC;QAA/B,CAAgC;QAC3DC,MAAM,EAAEA,MAAM,IAAK;UAAM,6BAAsB,CAACA,MAAM,CAAC;QAA9B,CAA+B;QACxDC,QAAQ,EAAEA,QAAQ,IAAK,eAAK;UAAI,6BAAsB,CAACA,QAAQ,EAAE;YAAER,OAAO,EAAE4B,KAAK,CAACC,MAAM,CAAC7B;UAAO,CAAE,CAAC;QAAnE;MAAoE,GACpG;IAViC,CAWpC;IACD8B,aAAa,EACX;IACA1C;MACE4B,SAAS,EAAE7B,IAAI,CAACO,MAAM,CAAC,eAAe,CAAC,YACrCqC,GAACrC,MAAM,CAAC,uBAAuB,CAAC,IAAGM,OAAO,EAC1C+B,GAACrC,MAAM,CAAC,wBAAwB,CAAC,IAAGQ,QAAQ;IAC5C,EACF;IAEJQ,iBAAiB,EAAEA;EAAiB,GACpC;AAEN,CAAC,CACF;AAED,eAAed,cAAc","names":["clsx","React","useRef","AbstractSwitch","useForwardFocus","fireNonCancelableEvent","getBaseProps","styles","useFormFieldContext","InternalToggle","forwardRef","_a","ref","checked","name","disabled","children","description","ariaLabel","onFocus","onBlur","onChange","_d","__internalRootRef","rest","ariaDescribedby","ariaLabelledby","baseProps","checkboxRef","className","root","controlClassName","_b","outlineClassName","outline","controlId","label","descriptionBottomPadding","nativeControl","nativeControlProps","type","event","target","styledControl","_c"],"sources":["/Users/dcastro/node_modules/src/toggle/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\nimport AbstractSwitch from '../internal/components/abstract-switch';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport styles from './styles.css.js';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { ToggleProps } from './interfaces';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\n\ntype InternalToggleProps = ToggleProps & InternalBaseComponentProps;\n\nconst InternalToggle = React.forwardRef<ToggleProps.Ref, InternalToggleProps>(\n  (\n    {\n      controlId,\n      checked,\n      name,\n      disabled,\n      children,\n      description,\n      ariaLabel,\n      onFocus,\n      onBlur,\n      onChange,\n      __internalRootRef = null,\n      ...rest\n    },\n    ref\n  ) => {\n    const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);\n    const baseProps = getBaseProps(rest);\n    const checkboxRef = useRef<HTMLInputElement>(null);\n    useForwardFocus(ref, checkboxRef);\n    return (\n      <AbstractSwitch\n        {...baseProps}\n        className={clsx(styles.root, baseProps.className)}\n        controlClassName={clsx(styles['toggle-control'], {\n          [styles['toggle-control-checked']]: checked,\n          [styles['toggle-control-disabled']]: disabled,\n        })}\n        outlineClassName={styles.outline}\n        controlId={controlId}\n        disabled={disabled}\n        label={children}\n        description={description}\n        descriptionBottomPadding={true}\n        ariaLabel={ariaLabel}\n        ariaLabelledby={ariaLabelledby}\n        ariaDescribedby={ariaDescribedby}\n        nativeControl={nativeControlProps => (\n          <input\n            {...nativeControlProps}\n            ref={checkboxRef}\n            type=\"checkbox\"\n            checked={checked}\n            name={name}\n            onFocus={onFocus && (() => fireNonCancelableEvent(onFocus))}\n            onBlur={onBlur && (() => fireNonCancelableEvent(onBlur))}\n            onChange={onChange && (event => fireNonCancelableEvent(onChange, { checked: event.target.checked }))}\n          />\n        )}\n        styledControl={\n          /*Using span, not div for HTML validity*/\n          <span\n            className={clsx(styles['toggle-handle'], {\n              [styles['toggle-handle-checked']]: checked,\n              [styles['toggle-handle-disabled']]: disabled,\n            })}\n          />\n        }\n        __internalRootRef={__internalRootRef}\n      />\n    );\n  }\n);\n\nexport default InternalToggle;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}