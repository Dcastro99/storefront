{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __rest } from \"tslib\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { addMonths, isSameMonth } from 'date-fns';\nimport styles from './styles.css.js';\nimport CalendarHeader from './header';\nimport Grid from './grid';\nimport { memoizedDate } from './utils/memoized-date.js';\nimport { normalizeLocale, normalizeStartOfWeek } from './utils/locales.js';\nimport { formatDate } from '../internal/utils/date-time';\nimport { fireNonCancelableEvent } from '../internal/events/index.js';\nimport checkControlled from '../internal/hooks/check-controlled/index.js';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { getBaseDate } from './utils/navigation';\nexport default function Calendar(_a) {\n  var value = _a.value,\n    _b = _a.locale,\n    locale = _b === void 0 ? '' : _b,\n    startOfWeek = _a.startOfWeek,\n    _c = _a.isDateEnabled,\n    isDateEnabled = _c === void 0 ? function () {\n      return true;\n    } : _c,\n    todayAriaLabel = _a.todayAriaLabel,\n    nextMonthAriaLabel = _a.nextMonthAriaLabel,\n    previousMonthAriaLabel = _a.previousMonthAriaLabel,\n    onChange = _a.onChange,\n    __internalRootRef = _a.__internalRootRef,\n    rest = __rest(_a, [\"value\", \"locale\", \"startOfWeek\", \"isDateEnabled\", \"todayAriaLabel\", \"nextMonthAriaLabel\", \"previousMonthAriaLabel\", \"onChange\", \"__internalRootRef\"]);\n  checkControlled('Calendar', 'value', value, 'onChange', onChange);\n  var baseProps = getBaseProps(rest);\n  var normalizedLocale = normalizeLocale('Calendar', locale);\n  var normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, normalizedLocale);\n  var gridWrapperRef = useRef(null);\n  var _d = useState(null),\n    focusedDate = _d[0],\n    setFocusedDate = _d[1];\n  // Set displayed date to value if defined or to current date otherwise.\n  var memoizedValue = memoizedDate('value', value);\n  var defaultDisplayedDate = memoizedValue !== null && memoizedValue !== void 0 ? memoizedValue : new Date();\n  var _e = useState(defaultDisplayedDate),\n    displayedDate = _e[0],\n    setDisplayedDate = _e[1];\n  // Update displayed date if value changes.\n  useEffect(function () {\n    memoizedValue && setDisplayedDate(function (prev) {\n      return prev.getTime() !== memoizedValue.getTime() ? memoizedValue : prev;\n    });\n  }, [memoizedValue]);\n  var selectFocusedDate = function (selected, baseDate) {\n    if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {\n      return selected;\n    }\n    var today = new Date();\n    if (isDateEnabled(today) && isSameMonth(today, baseDate)) {\n      return today;\n    }\n    if (isDateEnabled(baseDate)) {\n      return baseDate;\n    }\n    return null;\n  };\n  var baseDate = getBaseDate(displayedDate, isDateEnabled);\n  var focusableDate = focusedDate || selectFocusedDate(memoizedValue, baseDate);\n  var onHeaderChangeMonthHandler = function (isPreviousButtonClick) {\n    setDisplayedDate(addMonths(baseDate, isPreviousButtonClick ? -1 : 1));\n    setFocusedDate(null);\n  };\n  var onGridChangeMonthHandler = function (newMonth) {\n    setDisplayedDate(newMonth);\n    setFocusedDate(null);\n  };\n  var onGridFocusDateHandler = function (date) {\n    if (date) {\n      var value_1 = memoizedDate('focused', formatDate(date));\n      setFocusedDate(value_1);\n    }\n  };\n  var onGridSelectDateHandler = function (date) {\n    fireNonCancelableEvent(onChange, {\n      value: formatDate(date)\n    });\n    setFocusedDate(null);\n  };\n  var onGridBlur = function (event) {\n    var _a;\n    var newFocusTargetIsInGrid = event.relatedTarget && ((_a = gridWrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget));\n    if (!newFocusTargetIsInGrid) {\n      setFocusedDate(null);\n    }\n  };\n  return React.createElement(\"div\", __assign({\n    ref: __internalRootRef\n  }, baseProps, {\n    className: clsx(styles.root, styles.calendar, baseProps.className)\n  }), React.createElement(\"div\", {\n    className: styles['calendar-inner']\n  }, React.createElement(CalendarHeader, {\n    baseDate: baseDate,\n    locale: normalizedLocale,\n    onChangeMonth: onHeaderChangeMonthHandler,\n    previousMonthLabel: previousMonthAriaLabel,\n    nextMonthLabel: nextMonthAriaLabel\n  }), React.createElement(\"div\", {\n    onBlur: onGridBlur,\n    ref: gridWrapperRef\n  }, React.createElement(Grid, {\n    locale: normalizedLocale,\n    baseDate: baseDate,\n    isDateEnabled: isDateEnabled,\n    focusedDate: focusedDate,\n    focusableDate: focusableDate,\n    onSelectDate: onGridSelectDateHandler,\n    onFocusDate: onGridFocusDateHandler,\n    onChangeMonth: onGridChangeMonthHandler,\n    startOfWeek: normalizedStartOfWeek,\n    todayAriaLabel: todayAriaLabel,\n    selectedDate: memoizedValue\n  }))));\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","useState","addMonths","isSameMonth","styles","CalendarHeader","Grid","memoizedDate","normalizeLocale","normalizeStartOfWeek","formatDate","fireNonCancelableEvent","checkControlled","clsx","getBaseProps","getBaseDate","Calendar","_a","_b","locale","startOfWeek","_c","isDateEnabled","todayAriaLabel","nextMonthAriaLabel","previousMonthAriaLabel","onChange","__internalRootRef","rest","value","baseProps","normalizedLocale","normalizedStartOfWeek","gridWrapperRef","focusedDate","setFocusedDate","memoizedValue","defaultDisplayedDate","Date","displayedDate","setDisplayedDate","prev","getTime","selectFocusedDate","selected","baseDate","today","focusableDate","onHeaderChangeMonthHandler","isPreviousButtonClick","onGridChangeMonthHandler","newMonth","onGridFocusDateHandler","date","value_1","onGridSelectDateHandler","onGridBlur","event","newFocusTargetIsInGrid","relatedTarget","current","contains","ref","className","root","calendar","onChangeMonth","previousMonthLabel","nextMonthLabel","onBlur","onSelectDate","onFocusDate","selectedDate"],"sources":["/Users/dcastro/node_modules/src/calendar/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { addMonths, isSameMonth } from 'date-fns';\nimport styles from './styles.css.js';\nimport CalendarHeader from './header';\nimport Grid from './grid';\nimport { memoizedDate } from './utils/memoized-date.js';\nimport { normalizeLocale, normalizeStartOfWeek } from './utils/locales.js';\nimport { formatDate } from '../internal/utils/date-time';\nimport { fireNonCancelableEvent } from '../internal/events/index.js';\nimport checkControlled from '../internal/hooks/check-controlled/index.js';\nimport clsx from 'clsx';\nimport { CalendarProps } from './interfaces.js';\nimport { getBaseProps } from '../internal/base-component';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component/index.js';\nimport { getBaseDate } from './utils/navigation';\n\nexport type DayIndex = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport default function Calendar({\n  value,\n  locale = '',\n  startOfWeek,\n  isDateEnabled = () => true,\n  todayAriaLabel,\n  nextMonthAriaLabel,\n  previousMonthAriaLabel,\n  onChange,\n  __internalRootRef,\n  ...rest\n}: CalendarProps & InternalBaseComponentProps) {\n  checkControlled('Calendar', 'value', value, 'onChange', onChange);\n\n  const baseProps = getBaseProps(rest);\n  const normalizedLocale = normalizeLocale('Calendar', locale);\n  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, normalizedLocale);\n  const gridWrapperRef = useRef<HTMLDivElement>(null);\n  const [focusedDate, setFocusedDate] = useState<Date | null>(null);\n\n  // Set displayed date to value if defined or to current date otherwise.\n  const memoizedValue = memoizedDate('value', value);\n  const defaultDisplayedDate = memoizedValue ?? new Date();\n  const [displayedDate, setDisplayedDate] = useState(defaultDisplayedDate);\n\n  // Update displayed date if value changes.\n  useEffect(() => {\n    memoizedValue && setDisplayedDate(prev => (prev.getTime() !== memoizedValue.getTime() ? memoizedValue : prev));\n  }, [memoizedValue]);\n\n  const selectFocusedDate = (selected: Date | null, baseDate: Date): Date | null => {\n    if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {\n      return selected;\n    }\n    const today = new Date();\n    if (isDateEnabled(today) && isSameMonth(today, baseDate)) {\n      return today;\n    }\n    if (isDateEnabled(baseDate)) {\n      return baseDate;\n    }\n    return null;\n  };\n\n  const baseDate = getBaseDate(displayedDate, isDateEnabled);\n  const focusableDate = focusedDate || selectFocusedDate(memoizedValue, baseDate);\n\n  const onHeaderChangeMonthHandler = (isPreviousButtonClick?: boolean) => {\n    setDisplayedDate(addMonths(baseDate, isPreviousButtonClick ? -1 : 1));\n    setFocusedDate(null);\n  };\n\n  const onGridChangeMonthHandler = (newMonth: Date) => {\n    setDisplayedDate(newMonth);\n    setFocusedDate(null);\n  };\n\n  const onGridFocusDateHandler = (date: null | Date) => {\n    if (date) {\n      const value = memoizedDate('focused', formatDate(date));\n      setFocusedDate(value);\n    }\n  };\n\n  const onGridSelectDateHandler = (date: Date) => {\n    fireNonCancelableEvent(onChange, { value: formatDate(date) });\n    setFocusedDate(null);\n  };\n\n  const onGridBlur = (event: React.FocusEvent) => {\n    const newFocusTargetIsInGrid = event.relatedTarget && gridWrapperRef.current?.contains(event.relatedTarget as Node);\n    if (!newFocusTargetIsInGrid) {\n      setFocusedDate(null);\n    }\n  };\n\n  return (\n    <div ref={__internalRootRef} {...baseProps} className={clsx(styles.root, styles.calendar, baseProps.className)}>\n      <div className={styles['calendar-inner']}>\n        <CalendarHeader\n          baseDate={baseDate}\n          locale={normalizedLocale}\n          onChangeMonth={onHeaderChangeMonthHandler}\n          previousMonthLabel={previousMonthAriaLabel}\n          nextMonthLabel={nextMonthAriaLabel}\n        />\n        <div onBlur={onGridBlur} ref={gridWrapperRef}>\n          <Grid\n            locale={normalizedLocale}\n            baseDate={baseDate}\n            isDateEnabled={isDateEnabled}\n            focusedDate={focusedDate}\n            focusableDate={focusableDate}\n            onSelectDate={onGridSelectDateHandler}\n            onFocusDate={onGridFocusDateHandler}\n            onChangeMonth={onGridChangeMonthHandler}\n            startOfWeek={normalizedStartOfWeek}\n            todayAriaLabel={todayAriaLabel}\n            selectedDate={memoizedValue}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}