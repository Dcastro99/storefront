{"ast":null,"code":"var SPACE_BETWEEN = 4;\nexport function formatTicks(_a) {\n  var ticks = _a.ticks,\n    scale = _a.scale,\n    getLabelSpace = _a.getLabelSpace,\n    tickFormatter = _a.tickFormatter;\n  return ticks.map(function (tick) {\n    var _a;\n    var position = (_a = scale.d3Scale(tick)) !== null && _a !== void 0 ? _a : NaN;\n    var label = tickFormatter ? tickFormatter(tick) : tick.toString();\n    var lines = (label + '').split('\\n');\n    return {\n      position: position,\n      lines: lines,\n      space: Math.max.apply(Math, lines.map(getLabelSpace))\n    };\n  });\n}\nexport function getVisibleTicks(ticks, from, until, balanceTicks) {\n  if (balanceTicks === void 0) {\n    balanceTicks = false;\n  }\n  ticks = getTicksInRange(ticks, from, until);\n  return balanceTicks ? getReducedTicks(ticks) : removeIntersections(ticks);\n}\nfunction getTicksInRange(ticks, from, until) {\n  return ticks.filter(function (tick) {\n    return from <= tick.position - tick.space / 2 && tick.position + tick.space / 2 <= until;\n  });\n}\nfunction getReducedTicks(ticks) {\n  var reduceLabelRatio = findReduceLabelRatio(ticks);\n  var reducedTicks = [];\n  for (var index = 0; index < ticks.length; index += reduceLabelRatio) {\n    reducedTicks.push(ticks[index]);\n  }\n  return reducedTicks;\n}\n// Returns a ratio such that all elements can be displayed with no intersections.\nfunction findReduceLabelRatio(ticks, ratio) {\n  if (ratio === void 0) {\n    ratio = 1;\n  }\n  if (ratio >= ticks.length) {\n    return ratio;\n  }\n  for (var i = ratio; i < ticks.length; i += ratio) {\n    if (hasIntersection(ticks[i - ratio], ticks[i])) {\n      return findReduceLabelRatio(ticks, ratio + 1);\n    }\n  }\n  return ratio;\n}\nfunction removeIntersections(ticks) {\n  var visibleTicks = [];\n  var prevTick = null;\n  for (var _i = 0, ticks_1 = ticks; _i < ticks_1.length; _i++) {\n    var tick = ticks_1[_i];\n    if (!prevTick || !hasIntersection(prevTick, tick)) {\n      visibleTicks.push(tick);\n      prevTick = tick;\n    }\n  }\n  return visibleTicks;\n}\nfunction hasIntersection(a, b) {\n  var _a = a.position < b.position ? [a, b] : [b, a],\n    left = _a[0],\n    right = _a[1];\n  var leftEdge = left.position + left.space / 2 + SPACE_BETWEEN;\n  var rightEdge = right.position - right.space / 2;\n  return leftEdge > rightEdge;\n}","map":{"version":3,"mappings":"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","names":["SPACE_BETWEEN","formatTicks","_a","ticks","scale","getLabelSpace","tickFormatter","map","position","d3Scale","tick","NaN","label","toString","lines","split","space","Math","max","getVisibleTicks","from","until","balanceTicks","getTicksInRange","getReducedTicks","removeIntersections","filter","reduceLabelRatio","findReduceLabelRatio","reducedTicks","index","length","push","ratio","i","hasIntersection","visibleTicks","prevTick","ticks_1","_i","a","b","left","right","leftEdge","rightEdge"],"sources":["/Users/dcastro/node_modules/src/internal/components/cartesian-chart/label-utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ChartDataTypes } from './interfaces';\nimport { ChartScale, NumericChartScale } from './scales';\n\nconst SPACE_BETWEEN = 4;\n\nexport interface FormattedTick {\n  position: number;\n  space: number;\n  lines: string[];\n}\n\nexport function formatTicks({\n  ticks,\n  scale,\n  getLabelSpace,\n  tickFormatter,\n}: {\n  ticks: readonly ChartDataTypes[];\n  scale: ChartScale | NumericChartScale;\n  getLabelSpace: (label: string) => number;\n  tickFormatter?: (value: any) => string;\n}): FormattedTick[] {\n  return ticks.map(tick => {\n    const position = scale.d3Scale(tick as any) ?? NaN;\n    const label = tickFormatter ? tickFormatter(tick as any) : tick.toString();\n    const lines = (label + '').split('\\n');\n    return { position, lines, space: Math.max(...lines.map(getLabelSpace)) };\n  });\n}\n\nexport function getVisibleTicks(ticks: readonly FormattedTick[], from: number, until: number, balanceTicks = false) {\n  ticks = getTicksInRange(ticks, from, until);\n  return balanceTicks ? getReducedTicks(ticks) : removeIntersections(ticks);\n}\n\nfunction getTicksInRange(ticks: readonly FormattedTick[], from: number, until: number) {\n  return ticks.filter(tick => from <= tick.position - tick.space / 2 && tick.position + tick.space / 2 <= until);\n}\n\nfunction getReducedTicks(ticks: readonly FormattedTick[]): readonly FormattedTick[] {\n  const reduceLabelRatio = findReduceLabelRatio(ticks);\n\n  const reducedTicks = [];\n  for (let index = 0; index < ticks.length; index += reduceLabelRatio) {\n    reducedTicks.push(ticks[index]);\n  }\n  return reducedTicks;\n}\n\n// Returns a ratio such that all elements can be displayed with no intersections.\nfunction findReduceLabelRatio(ticks: readonly FormattedTick[], ratio = 1): number {\n  if (ratio >= ticks.length) {\n    return ratio;\n  }\n  for (let i = ratio; i < ticks.length; i += ratio) {\n    if (hasIntersection(ticks[i - ratio], ticks[i])) {\n      return findReduceLabelRatio(ticks, ratio + 1);\n    }\n  }\n  return ratio;\n}\n\nfunction removeIntersections(ticks: readonly FormattedTick[]) {\n  const visibleTicks = [];\n  let prevTick = null;\n  for (const tick of ticks) {\n    if (!prevTick || !hasIntersection(prevTick, tick)) {\n      visibleTicks.push(tick);\n      prevTick = tick;\n    }\n  }\n  return visibleTicks;\n}\n\nfunction hasIntersection(a: FormattedTick, b: FormattedTick) {\n  const [left, right] = a.position < b.position ? [a, b] : [b, a];\n  const leftEdge = left.position + left.space / 2 + SPACE_BETWEEN;\n  const rightEdge = right.position - right.space / 2;\n  return leftEdge > rightEdge;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}