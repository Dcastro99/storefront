{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport InternalBox from '../box/internal';\nimport ChartStatusContainer, { getChartStatus } from '../internal/components/chart-status-container';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport { warnOnce } from '../internal/logging';\nimport InternalChartFilters from './chart-filters';\nimport InternalChartLegend from './chart-legend';\nimport ChartContainer from './chart-container';\nimport cartesianStyles from '../internal/components/cartesian-chart/styles.css.js';\nimport styles from './styles.css.js';\nimport { isDevelopment } from '../internal/is-development';\nimport createCategoryColorScale from '../internal/utils/create-category-color-scale';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { nodeContains } from '../internal/utils/dom';\nimport { isXThreshold, isYThreshold } from './utils';\nexport default function InternalMixedLineBarChart(_a) {\n  var _b;\n  var height = _a.height,\n    xScaleType = _a.xScaleType,\n    yScaleType = _a.yScaleType,\n    xDomain = _a.xDomain,\n    yDomain = _a.yDomain,\n    controlledHighlightedSeries = _a.highlightedSeries,\n    controlledVisibleSeries = _a.visibleSeries,\n    externalSeries = _a.series,\n    onFilterChange = _a.onFilterChange,\n    controlledOnHighlightChange = _a.onHighlightChange,\n    i18nStrings = _a.i18nStrings,\n    ariaLabel = _a.ariaLabel,\n    ariaLabelledby = _a.ariaLabelledby,\n    ariaDescription = _a.ariaDescription,\n    xTitle = _a.xTitle,\n    yTitle = _a.yTitle,\n    stackedBars = _a.stackedBars,\n    horizontalBars = _a.horizontalBars,\n    hideFilter = _a.hideFilter,\n    additionalFilters = _a.additionalFilters,\n    hideLegend = _a.hideLegend,\n    legendTitle = _a.legendTitle,\n    statusType = _a.statusType,\n    detailPopoverSize = _a.detailPopoverSize,\n    emphasizeBaselineAxis = _a.emphasizeBaselineAxis,\n    empty = _a.empty,\n    noMatch = _a.noMatch,\n    errorText = _a.errorText,\n    loadingText = _a.loadingText,\n    recoveryText = _a.recoveryText,\n    onRecoveryClick = _a.onRecoveryClick,\n    _c = _a.__internalRootRef,\n    __internalRootRef = _c === void 0 ? null : _c,\n    props = __rest(_a, [\"height\", \"xScaleType\", \"yScaleType\", \"xDomain\", \"yDomain\", \"highlightedSeries\", \"visibleSeries\", \"series\", \"onFilterChange\", \"onHighlightChange\", \"i18nStrings\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescription\", \"xTitle\", \"yTitle\", \"stackedBars\", \"horizontalBars\", \"hideFilter\", \"additionalFilters\", \"hideLegend\", \"legendTitle\", \"statusType\", \"detailPopoverSize\", \"emphasizeBaselineAxis\", \"empty\", \"noMatch\", \"errorText\", \"loadingText\", \"recoveryText\", \"onRecoveryClick\", \"__internalRootRef\"]);\n  var baseProps = getBaseProps(props);\n  var containerRef = useRef(null);\n  useEffect(function () {\n    var gotBarSeries = externalSeries.some(function (s) {\n      return s.type === 'bar';\n    });\n    var gotLineSeries = externalSeries.some(function (s) {\n      return s.type === 'line';\n    });\n    if (xScaleType !== 'categorical' && gotBarSeries) {\n      warnOnce('MixedLineBarChart', \"Bar series cannot be used with a \".concat(xScaleType, \" scale. Use a categorical x axis instead.\"));\n    }\n    if (horizontalBars && gotLineSeries) {\n      warnOnce('MixedLineBarChart', \"Property horizontalBars can only be used with charts that contain only bar or threshold series.\");\n    }\n    for (var _i = 0, externalSeries_1 = externalSeries; _i < externalSeries_1.length; _i++) {\n      var s = externalSeries_1[_i];\n      if (s.type === 'threshold' && s.x !== undefined && s.y !== undefined) {\n        warnOnce('MixedLineBarChart', \"Series of type \\\"threshold\\\" must contain either x or y property.\");\n      }\n      if (s.type === 'threshold' && s.x === undefined && s.y === undefined) {\n        warnOnce('MixedLineBarChart', \"Series of type \\\"threshold\\\" must contain either x or y property.\");\n      }\n    }\n  }, [xScaleType, horizontalBars, externalSeries]);\n  var series = useMemo(function () {\n    // Generate series colors if not explicitly provided.\n    // The thresholds use a dedicated colour scale.\n    var colors = createCategoryColorScale(externalSeries, function (it) {\n      return isYThreshold(it) || isXThreshold(it);\n    }, function (it) {\n      return it.color || null;\n    });\n    return externalSeries.map(function (s, i) {\n      return {\n        index: i,\n        color: colors[i],\n        series: s\n      };\n    });\n  }, [externalSeries]);\n  var _d = useState(null),\n    highlightedPoint = _d[0],\n    setHighlightedPoint = _d[1];\n  var _e = useState(null),\n    highlightedGroupIndex = _e[0],\n    setHighlightedGroupIndex = _e[1];\n  var _f = useControllable(controlledHighlightedSeries, controlledOnHighlightChange, null, {\n      componentName: 'MixedLineBarChart',\n      controlledProp: 'highlightedSeries',\n      changeHandler: 'onHighlightChange'\n    }),\n    _g = _f[0],\n    highlightedSeries = _g === void 0 ? null : _g,\n    setHighlightedSeries = _f[1];\n  var _h = useState(highlightedSeries),\n    legendSeries = _h[0],\n    setLegendSeries = _h[1];\n  useEffect(function () {\n    setLegendSeries(controlledHighlightedSeries || null);\n  }, [controlledHighlightedSeries]);\n  var _j = useControllable(controlledVisibleSeries, onFilterChange, externalSeries, {\n      componentName: 'MixedLineBarChart',\n      controlledProp: 'visibleSeries',\n      changeHandler: 'onFilterChange'\n    }),\n    externalVisibleSeries = _j[0],\n    setExternalVisibleSeries = _j[1];\n  if (isDevelopment) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var previousSeries = usePrevious(externalSeries);\n    var hasPrevious = !!(previousSeries && previousSeries.length);\n    var hasCurrent = !!externalSeries.length;\n    if (hasPrevious && hasCurrent && externalSeries !== previousSeries && !controlledVisibleSeries && !hideFilter) {\n      warnOnce('MixedLineBarChart', 'The `series` value passed into the component changed. ' + 'This may cause problems with filtering - we recommend that you make the `series` value constant, ' + 'or provide a `visibleSeries` value that derives from the current `series` value.');\n    }\n  }\n  var visibleSeries = useMemo(function () {\n    return series.filter(function (s) {\n      return (externalVisibleSeries === null || externalVisibleSeries === void 0 ? void 0 : externalVisibleSeries.indexOf(s.series)) !== -1;\n    });\n  }, [series, externalVisibleSeries]);\n  var filterChange = function (selectedSeries) {\n    setExternalVisibleSeries(selectedSeries);\n    fireNonCancelableEvent(onFilterChange, {\n      visibleSeries: selectedSeries\n    });\n  };\n  var onHighlightChange = function (series) {\n    setHighlightedSeries(series);\n    fireNonCancelableEvent(controlledOnHighlightChange, {\n      highlightedSeries: series\n    });\n    setLegendSeries(series);\n  };\n  var onBlur = function (event) {\n    if (event.relatedTarget && !nodeContains(containerRef.current, event.relatedTarget)) {\n      highlightedSeries && onHighlightChange(highlightedSeries);\n      setHighlightedPoint(null);\n      setHighlightedGroupIndex(null);\n      setLegendSeries(null);\n    }\n  };\n  var _k = getChartStatus({\n      externalData: externalSeries,\n      visibleData: visibleSeries || [],\n      statusType: statusType\n    }),\n    isEmpty = _k.isEmpty,\n    isNoMatch = _k.isNoMatch,\n    showChart = _k.showChart;\n  var showFilters = statusType === 'finished' && (!isEmpty || isNoMatch);\n  var showLegend = !hideLegend && !isEmpty && statusType === 'finished';\n  var reserveLegendSpace = !showChart && !hideLegend;\n  var reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);\n  var mergedRef = useMergeRefs(containerRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: mergedRef,\n    onBlur: onBlur\n  }), showFilters && React.createElement(InternalBox, {\n    className: cartesianStyles['filter-container'],\n    margin: {\n      bottom: 'l'\n    }\n  }, React.createElement(InternalChartFilters, {\n    series: series,\n    visibleSeries: externalVisibleSeries || [],\n    onChange: filterChange,\n    i18nStrings: i18nStrings,\n    hideFilter: hideFilter,\n    additionalFilters: additionalFilters\n  })), React.createElement(\"div\", {\n    className: clsx(styles.content, (_b = {}, _b[styles['content--reserve-filter']] = reserveFilterSpace, _b[styles['content--reserve-legend']] = reserveLegendSpace, _b)),\n    style: {\n      minHeight: height\n    }\n  }, React.createElement(ChartStatusContainer, {\n    isEmpty: isEmpty,\n    isNoMatch: isNoMatch,\n    showChart: showChart,\n    statusType: statusType,\n    empty: empty,\n    noMatch: noMatch,\n    loadingText: loadingText,\n    errorText: errorText,\n    recoveryText: recoveryText,\n    onRecoveryClick: onRecoveryClick\n  }), showChart && React.createElement(ChartContainer, {\n    height: height,\n    xScaleType: xScaleType,\n    yScaleType: yScaleType,\n    xDomain: xDomain,\n    yDomain: yDomain,\n    xTickFormatter: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.xTickFormatter,\n    yTickFormatter: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.yTickFormatter,\n    emphasizeBaselineAxis: emphasizeBaselineAxis,\n    stackedBars: stackedBars,\n    horizontalBars: horizontalBars,\n    series: series,\n    visibleSeries: visibleSeries,\n    highlightedSeries: highlightedSeries,\n    onHighlightChange: onHighlightChange,\n    highlightedPoint: highlightedPoint,\n    setHighlightedPoint: setHighlightedPoint,\n    highlightedGroupIndex: highlightedGroupIndex,\n    setHighlightedGroupIndex: setHighlightedGroupIndex,\n    legendSeries: legendSeries,\n    detailPopoverSize: detailPopoverSize,\n    xTitle: xTitle,\n    yTitle: yTitle,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescription: ariaDescription,\n    i18nStrings: i18nStrings,\n    plotContainerRef: containerRef\n  })), showLegend && React.createElement(InternalBox, {\n    margin: {\n      top: 'm'\n    }\n  }, React.createElement(InternalChartLegend, {\n    series: series,\n    visibleSeries: externalVisibleSeries || [],\n    highlightedSeries: legendSeries,\n    onHighlightChange: onHighlightChange,\n    legendTitle: legendTitle,\n    ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.legendAriaLabel,\n    plotContainerRef: containerRef\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useMemo","useRef","useState","clsx","getBaseProps","fireNonCancelableEvent","InternalBox","ChartStatusContainer","getChartStatus","useControllable","usePrevious","warnOnce","InternalChartFilters","InternalChartLegend","ChartContainer","cartesianStyles","styles","isDevelopment","createCategoryColorScale","useMergeRefs","nodeContains","isXThreshold","isYThreshold","InternalMixedLineBarChart","_a","xScaleType","yScaleType","xDomain","yDomain","controlledHighlightedSeries","controlledVisibleSeries","externalSeries","onFilterChange","controlledOnHighlightChange","i18nStrings","ariaLabel","ariaLabelledby","ariaDescription","xTitle","yTitle","stackedBars","horizontalBars","hideFilter","additionalFilters","hideLegend","legendTitle","statusType","detailPopoverSize","emphasizeBaselineAxis","empty","noMatch","errorText","loadingText","recoveryText","onRecoveryClick","_c","__internalRootRef","props","baseProps","containerRef","gotBarSeries","some","type","gotLineSeries","externalSeries_1","_i","s","x","undefined","y","series","colors","it","color","map","i","index","highlightedPoint","setHighlightedPoint","highlightedGroupIndex","setHighlightedGroupIndex","componentName","controlledProp","changeHandler","_g","highlightedSeries","setHighlightedSeries","legendSeries","setLegendSeries","externalVisibleSeries","setExternalVisibleSeries","previousSeries","hasPrevious","length","hasCurrent","visibleSeries","filter","indexOf","filterChange","selectedSeries","onHighlightChange","onBlur","event","relatedTarget","current","externalData","visibleData","isEmpty","isNoMatch","showChart","showFilters","showLegend","reserveLegendSpace","reserveFilterSpace","mergedRef","className","root","ref","margin","bottom","onChange","content","_b","style","minHeight","height","xTickFormatter","yTickFormatter","plotContainerRef","top","legendAriaLabel"],"sources":["/Users/dcastro/node_modules/src/mixed-line-bar-chart/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport InternalBox from '../box/internal';\nimport ChartStatusContainer, { getChartStatus } from '../internal/components/chart-status-container';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport { warnOnce } from '../internal/logging';\n\nimport { ChartDataTypes, MixedLineBarChartProps } from './interfaces';\nimport InternalChartFilters from './chart-filters';\nimport InternalChartLegend from './chart-legend';\nimport ChartContainer from './chart-container';\nimport cartesianStyles from '../internal/components/cartesian-chart/styles.css.js';\nimport styles from './styles.css.js';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { isDevelopment } from '../internal/is-development';\nimport createCategoryColorScale from '../internal/utils/create-category-color-scale';\nimport { ScaledPoint } from './make-scaled-series';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { nodeContains } from '../internal/utils/dom';\nimport { SomeRequired } from '../internal/types';\nimport { isXThreshold, isYThreshold } from './utils';\n\ntype InternalMixedLineBarChartProps<T extends ChartDataTypes> = SomeRequired<\n  MixedLineBarChartProps<T>,\n  | 'series'\n  | 'height'\n  | 'xScaleType'\n  | 'yScaleType'\n  | 'stackedBars'\n  | 'horizontalBars'\n  | 'statusType'\n  | 'detailPopoverSize'\n  | 'emphasizeBaselineAxis'\n> &\n  InternalBaseComponentProps;\n\nexport default function InternalMixedLineBarChart<T extends number | string | Date>({\n  height,\n  xScaleType,\n  yScaleType,\n  xDomain,\n  yDomain,\n  highlightedSeries: controlledHighlightedSeries,\n  visibleSeries: controlledVisibleSeries,\n  series: externalSeries,\n  onFilterChange,\n  onHighlightChange: controlledOnHighlightChange,\n  i18nStrings,\n  ariaLabel,\n  ariaLabelledby,\n  ariaDescription,\n  xTitle,\n  yTitle,\n  stackedBars,\n  horizontalBars,\n  hideFilter,\n  additionalFilters,\n  hideLegend,\n  legendTitle,\n  statusType,\n  detailPopoverSize,\n  emphasizeBaselineAxis,\n  empty,\n  noMatch,\n  errorText,\n  loadingText,\n  recoveryText,\n  onRecoveryClick,\n  __internalRootRef = null,\n  ...props\n}: InternalMixedLineBarChartProps<T>) {\n  const baseProps = getBaseProps(props);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const gotBarSeries = externalSeries.some(s => s.type === 'bar');\n    const gotLineSeries = externalSeries.some(s => s.type === 'line');\n\n    if (xScaleType !== 'categorical' && gotBarSeries) {\n      warnOnce(\n        'MixedLineBarChart',\n        `Bar series cannot be used with a ${xScaleType} scale. Use a categorical x axis instead.`\n      );\n    }\n\n    if (horizontalBars && gotLineSeries) {\n      warnOnce(\n        'MixedLineBarChart',\n        `Property horizontalBars can only be used with charts that contain only bar or threshold series.`\n      );\n    }\n\n    for (const s of externalSeries) {\n      if (s.type === 'threshold' && s.x !== undefined && s.y !== undefined) {\n        warnOnce('MixedLineBarChart', `Series of type \"threshold\" must contain either x or y property.`);\n      }\n      if (s.type === 'threshold' && s.x === undefined && s.y === undefined) {\n        warnOnce('MixedLineBarChart', `Series of type \"threshold\" must contain either x or y property.`);\n      }\n    }\n  }, [xScaleType, horizontalBars, externalSeries]);\n\n  const series = useMemo(() => {\n    // Generate series colors if not explicitly provided.\n    // The thresholds use a dedicated colour scale.\n    const colors = createCategoryColorScale(\n      externalSeries,\n      it => isYThreshold(it) || isXThreshold(it),\n      it => it.color || null\n    );\n\n    return externalSeries.map((s, i) => ({ index: i, color: colors[i], series: s }));\n  }, [externalSeries]);\n\n  const [highlightedPoint, setHighlightedPoint] = useState<ScaledPoint<T> | null>(null);\n  const [highlightedGroupIndex, setHighlightedGroupIndex] = useState<number | null>(null);\n  const [highlightedSeries = null, setHighlightedSeries] = useControllable(\n    controlledHighlightedSeries,\n    controlledOnHighlightChange,\n    null,\n    {\n      componentName: 'MixedLineBarChart',\n      controlledProp: 'highlightedSeries',\n      changeHandler: 'onHighlightChange',\n    }\n  );\n  const [legendSeries, setLegendSeries] = useState<MixedLineBarChartProps.ChartSeries<T> | null>(highlightedSeries);\n  useEffect(() => {\n    setLegendSeries(controlledHighlightedSeries || null);\n  }, [controlledHighlightedSeries]);\n\n  const [externalVisibleSeries, setExternalVisibleSeries] = useControllable(\n    controlledVisibleSeries,\n    onFilterChange,\n    externalSeries,\n    {\n      componentName: 'MixedLineBarChart',\n      controlledProp: 'visibleSeries',\n      changeHandler: 'onFilterChange',\n    }\n  );\n\n  if (isDevelopment) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const previousSeries = usePrevious(externalSeries);\n\n    const hasPrevious = !!(previousSeries && previousSeries.length);\n    const hasCurrent = !!externalSeries.length;\n\n    if (hasPrevious && hasCurrent && externalSeries !== previousSeries && !controlledVisibleSeries && !hideFilter) {\n      warnOnce(\n        'MixedLineBarChart',\n        'The `series` value passed into the component changed. ' +\n          'This may cause problems with filtering - we recommend that you make the `series` value constant, ' +\n          'or provide a `visibleSeries` value that derives from the current `series` value.'\n      );\n    }\n  }\n\n  const visibleSeries = useMemo(\n    () => series.filter(s => externalVisibleSeries?.indexOf(s.series) !== -1),\n    [series, externalVisibleSeries]\n  );\n\n  const filterChange = (selectedSeries: ReadonlyArray<MixedLineBarChartProps.ChartSeries<T>>) => {\n    setExternalVisibleSeries(selectedSeries);\n    fireNonCancelableEvent(onFilterChange, {\n      visibleSeries: selectedSeries,\n    });\n  };\n\n  const onHighlightChange = (series: MixedLineBarChartProps.ChartSeries<T> | null) => {\n    setHighlightedSeries(series);\n    fireNonCancelableEvent(controlledOnHighlightChange, {\n      highlightedSeries: series,\n    });\n    setLegendSeries(series);\n  };\n\n  const onBlur = (event: React.FocusEvent) => {\n    if (event.relatedTarget && !nodeContains(containerRef.current, event.relatedTarget)) {\n      highlightedSeries && onHighlightChange(highlightedSeries);\n      setHighlightedPoint(null);\n      setHighlightedGroupIndex(null);\n      setLegendSeries(null);\n    }\n  };\n\n  const { isEmpty, isNoMatch, showChart } = getChartStatus({\n    externalData: externalSeries,\n    visibleData: visibleSeries || [],\n    statusType,\n  });\n  const showFilters = statusType === 'finished' && (!isEmpty || isNoMatch);\n  const showLegend = !hideLegend && !isEmpty && statusType === 'finished';\n  const reserveLegendSpace = !showChart && !hideLegend;\n  const reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);\n  const mergedRef = useMergeRefs(containerRef, __internalRootRef);\n\n  return (\n    <div {...baseProps} className={clsx(baseProps.className, styles.root)} ref={mergedRef} onBlur={onBlur}>\n      {showFilters && (\n        <InternalBox className={cartesianStyles['filter-container']} margin={{ bottom: 'l' }}>\n          <InternalChartFilters\n            series={series}\n            visibleSeries={externalVisibleSeries || []}\n            onChange={filterChange}\n            i18nStrings={i18nStrings}\n            hideFilter={hideFilter}\n            additionalFilters={additionalFilters}\n          />\n        </InternalBox>\n      )}\n\n      <div\n        className={clsx(styles.content, {\n          [styles['content--reserve-filter']]: reserveFilterSpace,\n          [styles['content--reserve-legend']]: reserveLegendSpace,\n        })}\n        style={{ minHeight: height }}\n      >\n        <ChartStatusContainer\n          isEmpty={isEmpty}\n          isNoMatch={isNoMatch}\n          showChart={showChart}\n          statusType={statusType}\n          empty={empty}\n          noMatch={noMatch}\n          loadingText={loadingText}\n          errorText={errorText}\n          recoveryText={recoveryText}\n          onRecoveryClick={onRecoveryClick}\n        />\n        {showChart && (\n          <ChartContainer\n            height={height}\n            xScaleType={xScaleType}\n            yScaleType={yScaleType}\n            xDomain={xDomain}\n            yDomain={yDomain}\n            xTickFormatter={i18nStrings?.xTickFormatter}\n            yTickFormatter={i18nStrings?.yTickFormatter}\n            emphasizeBaselineAxis={emphasizeBaselineAxis}\n            stackedBars={stackedBars}\n            horizontalBars={horizontalBars}\n            series={series}\n            visibleSeries={visibleSeries}\n            highlightedSeries={highlightedSeries}\n            onHighlightChange={onHighlightChange}\n            highlightedPoint={highlightedPoint}\n            setHighlightedPoint={setHighlightedPoint}\n            highlightedGroupIndex={highlightedGroupIndex}\n            setHighlightedGroupIndex={setHighlightedGroupIndex}\n            legendSeries={legendSeries}\n            detailPopoverSize={detailPopoverSize}\n            xTitle={xTitle}\n            yTitle={yTitle}\n            ariaLabel={ariaLabel}\n            ariaLabelledby={ariaLabelledby}\n            ariaDescription={ariaDescription}\n            i18nStrings={i18nStrings}\n            plotContainerRef={containerRef}\n          />\n        )}\n      </div>\n\n      {showLegend && (\n        <InternalBox margin={{ top: 'm' }}>\n          <InternalChartLegend\n            series={series}\n            visibleSeries={externalVisibleSeries || []}\n            highlightedSeries={legendSeries}\n            onHighlightChange={onHighlightChange}\n            legendTitle={legendTitle}\n            ariaLabel={i18nStrings?.legendAriaLabel}\n            plotContainerRef={containerRef}\n          />\n        </InternalBox>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}