{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalBox from '../box/internal';\nimport { InternalButton } from '../button/internal';\nimport InternalModal from '../modal/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport { copyPreferences, mergePreferences, ModalContentLayout, PageSizePreference, WrapLinesPreference, CustomPreference } from './utils';\nimport VisibleContentPreference from './visible-content';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nvar ModalContent = function (_a) {\n  var _b = _a.preferences,\n    preferences = _b === void 0 ? {} : _b,\n    pageSizePreference = _a.pageSizePreference,\n    wrapLinesPreference = _a.wrapLinesPreference,\n    customPreference = _a.customPreference,\n    visibleContentPreference = _a.visibleContentPreference,\n    onChange = _a.onChange;\n  if (!visibleContentPreference && !pageSizePreference && !wrapLinesPreference && customPreference) {\n    return React.createElement(CustomPreference, {\n      value: preferences.custom,\n      customPreference: customPreference,\n      onChange: function (custom) {\n        return onChange({\n          custom: custom\n        });\n      }\n    });\n  }\n  return React.createElement(ModalContentLayout, {\n    left: React.createElement(InternalSpaceBetween, {\n      size: \"l\"\n    }, pageSizePreference && React.createElement(PageSizePreference, __assign({\n      value: preferences.pageSize\n    }, pageSizePreference, {\n      onChange: function (pageSize) {\n        return onChange({\n          pageSize: pageSize\n        });\n      }\n    })), wrapLinesPreference && React.createElement(WrapLinesPreference, __assign({\n      value: preferences.wrapLines\n    }, wrapLinesPreference, {\n      onChange: function (wrapLines) {\n        return onChange({\n          wrapLines: wrapLines\n        });\n      }\n    })), customPreference && React.createElement(CustomPreference, {\n      value: preferences.custom,\n      customPreference: customPreference,\n      onChange: function (custom) {\n        return onChange({\n          custom: custom\n        });\n      }\n    })),\n    right: visibleContentPreference && React.createElement(VisibleContentPreference, __assign({\n      value: preferences.visibleContent\n    }, visibleContentPreference, {\n      onChange: function (visibleContent) {\n        return onChange({\n          visibleContent: visibleContent\n        });\n      }\n    }))\n  });\n};\nexport default function CollectionPreferences(_a) {\n  var title = _a.title,\n    confirmLabel = _a.confirmLabel,\n    cancelLabel = _a.cancelLabel,\n    _b = _a.disabled,\n    disabled = _b === void 0 ? false : _b,\n    onConfirm = _a.onConfirm,\n    onCancel = _a.onCancel,\n    visibleContentPreference = _a.visibleContentPreference,\n    pageSizePreference = _a.pageSizePreference,\n    wrapLinesPreference = _a.wrapLinesPreference,\n    preferences = _a.preferences,\n    customPreference = _a.customPreference,\n    rest = __rest(_a, [\"title\", \"confirmLabel\", \"cancelLabel\", \"disabled\", \"onConfirm\", \"onCancel\", \"visibleContentPreference\", \"pageSizePreference\", \"wrapLinesPreference\", \"preferences\", \"customPreference\"]);\n  var __internalRootRef = useBaseComponent('CollectionPreferences').__internalRootRef;\n  checkControlled('CollectioPreferences', 'preferences', preferences, 'onConfirm', onConfirm);\n  var baseProps = getBaseProps(rest);\n  var _c = useState(false),\n    modalVisible = _c[0],\n    setModalVisible = _c[1];\n  var _d = useState(copyPreferences(preferences || {})),\n    temporaryPreferences = _d[0],\n    setTemporaryPreferences = _d[1];\n  var triggerRef = useRef(null);\n  var dialogPreviouslyOpen = useRef(false);\n  useEffect(function () {\n    if (!modalVisible) {\n      dialogPreviouslyOpen.current && triggerRef.current && triggerRef.current.focus();\n    } else {\n      dialogPreviouslyOpen.current = true;\n    }\n  }, [modalVisible]);\n  var onConfirmListener = function () {\n    setModalVisible(false);\n    fireNonCancelableEvent(onConfirm, temporaryPreferences);\n  };\n  var onCancelListener = function () {\n    fireNonCancelableEvent(onCancel, {});\n    setModalVisible(false);\n    setTemporaryPreferences(copyPreferences(preferences || {}));\n  };\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: __internalRootRef\n  }), React.createElement(InternalButton, {\n    ref: triggerRef,\n    className: styles['trigger-button'],\n    disabled: disabled,\n    ariaLabel: title,\n    onClick: function () {\n      setTemporaryPreferences(copyPreferences(preferences || {}));\n      setModalVisible(true);\n    },\n    variant: \"icon\",\n    iconName: \"settings\",\n    formAction: \"none\"\n  }), !disabled && modalVisible && React.createElement(InternalModal, {\n    className: styles['modal-root'],\n    visible: true,\n    header: title,\n    footer: React.createElement(InternalBox, {\n      float: \"right\"\n    }, React.createElement(InternalSpaceBetween, {\n      direction: \"horizontal\",\n      size: \"xs\"\n    }, React.createElement(InternalButton, {\n      className: styles['cancel-button'],\n      variant: \"link\",\n      formAction: \"none\",\n      onClick: onCancelListener\n    }, cancelLabel), React.createElement(InternalButton, {\n      className: styles['confirm-button'],\n      variant: \"primary\",\n      formAction: \"none\",\n      onClick: onConfirmListener\n    }, confirmLabel))),\n    closeAriaLabel: cancelLabel,\n    size: \"large\",\n    onDismiss: onCancelListener\n  }, React.createElement(ModalContent, {\n    preferences: temporaryPreferences,\n    visibleContentPreference: visibleContentPreference,\n    pageSizePreference: pageSizePreference,\n    wrapLinesPreference: wrapLinesPreference,\n    customPreference: customPreference,\n    onChange: function (changedPreferences) {\n      return setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences));\n    }\n  })));\n}\napplyDisplayName(CollectionPreferences, 'CollectionPreferences');","map":{"version":3,"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,sBAAsB,QAAQ,oBAAoB;AAC3D,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAOC,WAAW,MAAM,iBAAiB;AAEzC,SAASC,cAAc,QAAQ,oBAAoB;AACnD,OAAOC,aAAa,MAAM,mBAAmB;AAC7C,OAAOC,oBAAoB,MAAM,2BAA2B;AAC5D,SACEC,eAAe,EACfC,gBAAgB,EAChBC,kBAAkB,EAClBC,kBAAkB,EAClBC,mBAAmB,EACnBC,gBAAgB,QACX,SAAS;AAChB,OAAOC,wBAAwB,MAAM,mBAAmB;AACxD,OAAOC,eAAe,MAAM,oCAAoC;AAEhE,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,gBAAgB,QAAQ,sCAAsC;AACvE,OAAOC,gBAAgB,MAAM,sCAAsC;AAYnE,IAAMC,YAAY,GAAG,UAACC,EAOF;MANlBC,mBAAgB;IAAhBC,WAAW,mBAAG,EAAE;IAChBC,kBAAkB;IAClBC,mBAAmB;IACnBC,gBAAgB;IAChBC,wBAAwB;IACxBC,QAAQ;EAER,IAAI,CAACD,wBAAwB,IAAI,CAACH,kBAAkB,IAAI,CAACC,mBAAmB,IAAIC,gBAAgB,EAAE;IAChG,OACE5B,oBAACgB,gBAAgB;MACfe,KAAK,EAAEN,WAAW,CAACO,MAAM;MACzBJ,gBAAgB,EAAEA,gBAAgB;MAClCE,QAAQ,EAAE,gBAAM;QAAI,eAAQ,CAAC;UAAEE,MAAM;QAAA,CAAE,CAAC;MAApB;IAAoB,EACxC;;EAGN,OACEhC,oBAACa,kBAAkB;IACjBoB,IAAI,EACFjC,oBAACU,oBAAoB;MAACwB,IAAI,EAAC;IAAG,GAC3BR,kBAAkB,IACjB1B,oBAACc,kBAAkB;MACjBiB,KAAK,EAAEN,WAAW,CAACU;IAAQ,GACvBT,kBAAkB;MACtBI,QAAQ,EAAE,kBAAQ;QAAI,eAAQ,CAAC;UAAEK,QAAQ;QAAA,CAAE,CAAC;MAAtB;IAAsB,GAE/C,EACAR,mBAAmB,IAClB3B,oBAACe,mBAAmB;MAClBgB,KAAK,EAAEN,WAAW,CAACW;IAAS,GACxBT,mBAAmB;MACvBG,QAAQ,EAAE,mBAAS;QAAI,eAAQ,CAAC;UAAEM,SAAS;QAAA,CAAE,CAAC;MAAvB;IAAuB,GAEjD,EACAR,gBAAgB,IACf5B,oBAACgB,gBAAgB;MACfe,KAAK,EAAEN,WAAW,CAACO,MAAM;MACzBJ,gBAAgB,EAAEA,gBAAgB;MAClCE,QAAQ,EAAE,gBAAM;QAAI,eAAQ,CAAC;UAAEE,MAAM;QAAA,CAAE,CAAC;MAApB;IAAoB,EAE3C,CACoB;IAEzBK,KAAK,EACHR,wBAAwB,IACtB7B,oBAACiB,wBAAwB;MACvBc,KAAK,EAAEN,WAAW,CAACa;IAAc,GAC7BT,wBAAwB;MAC5BC,QAAQ,EAAE,wBAAc;QAAI,eAAQ,CAAC;UAAEQ,cAAc;QAAA,CAAE,CAAC;MAA5B;IAA4B;EAE3D,EAEH;AAEN,CAAC;AAED,eAAc,SAAUC,qBAAqB,CAAChB,EAajB;EAZ3B,SAAK;IACLiB,YAAY;IACZC,WAAW;IACXjB,gBAAgB;IAAhBkB,QAAQ,mBAAG,KAAK;IAChBC,SAAS;IACTC,QAAQ;IACRf,wBAAwB;IACxBH,kBAAkB;IAClBC,mBAAmB;IACnBF,WAAW;IACXG,gBAAgB;IACbiB,IAAI,cAZqC,yLAa7C,CADQ;EAEC,qBAAiB,GAAKxB,gBAAgB,CAAC,uBAAuB,CAAC,kBAA9C;EACzBH,eAAe,CAAC,sBAAsB,EAAE,aAAa,EAAEO,WAAW,EAAE,WAAW,EAAEkB,SAAS,CAAC;EAC3F,IAAMG,SAAS,GAAGxC,YAAY,CAACuC,IAAI,CAAC;EAC9B,SAAkC1C,QAAQ,CAAC,KAAK,CAAC;IAAhD4C,YAAY;IAAEC,eAAe,QAAmB;EACjD,SAAkD7C,QAAQ,CAACQ,eAAe,CAACc,WAAW,IAAI,EAAE,CAAC,CAAC;IAA7FwB,oBAAoB;IAAEC,uBAAuB,QAAgD;EACpG,IAAMC,UAAU,GAAGjD,MAAM,CAAkB,IAAI,CAAC;EAChD,IAAMkD,oBAAoB,GAAGlD,MAAM,CAAC,KAAK,CAAC;EAC1CD,SAAS,CAAC;IACR,IAAI,CAAC8C,YAAY,EAAE;MACjBK,oBAAoB,CAACC,OAAO,IAAIF,UAAU,CAACE,OAAO,IAAIF,UAAU,CAACE,OAAO,CAACC,KAAK,EAAE;KACjF,MAAM;MACLF,oBAAoB,CAACC,OAAO,GAAG,IAAI;;EAEvC,CAAC,EAAE,CAACN,YAAY,CAAC,CAAC;EAElB,IAAMQ,iBAAiB,GAAG;IACxBP,eAAe,CAAC,KAAK,CAAC;IACtB3C,sBAAsB,CAACsC,SAAS,EAAEM,oBAAoB,CAAC;EACzD,CAAC;EAED,IAAMO,gBAAgB,GAAG;IACvBnD,sBAAsB,CAACuC,QAAQ,EAAE,EAAE,CAAC;IACpCI,eAAe,CAAC,KAAK,CAAC;IACtBE,uBAAuB,CAACvC,eAAe,CAACc,WAAW,IAAI,EAAE,CAAC,CAAC;EAC7D,CAAC;EAED,OACEzB,wCAAS8C,SAAS;IAAEW,SAAS,EAAErD,IAAI,CAAC0C,SAAS,CAACW,SAAS,EAAEtC,MAAM,CAACuC,IAAI,CAAC;IAAEC,GAAG,EAAEC;EAAiB,IAC3F5D,oBAACQ,cAAc;IACbmD,GAAG,EAAER,UAAU;IACfM,SAAS,EAAEtC,MAAM,CAAC,gBAAgB,CAAC;IACnCuB,QAAQ,EAAEA,QAAQ;IAClBmB,SAAS,EAAEC,KAAK;IAChBC,OAAO,EAAE;MACPb,uBAAuB,CAACvC,eAAe,CAACc,WAAW,IAAI,EAAE,CAAC,CAAC;MAC3DuB,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC;IACDgB,OAAO,EAAC,MAAM;IACdC,QAAQ,EAAC,UAAU;IACnBC,UAAU,EAAC;EAAM,EACjB,EACD,CAACxB,QAAQ,IAAIK,YAAY,IACxB/C,oBAACS,aAAa;IACZgD,SAAS,EAAEtC,MAAM,CAAC,YAAY,CAAC;IAC/BgD,OAAO,EAAE,IAAI;IACbC,MAAM,EAAEN,KAAK;IACbO,MAAM,EACJrE,oBAACO,WAAW;MAAC+D,KAAK,EAAC;IAAO,GACxBtE,oBAACU,oBAAoB;MAAC6D,SAAS,EAAC,YAAY;MAACrC,IAAI,EAAC;IAAI,GACpDlC,oBAACQ,cAAc;MACbiD,SAAS,EAAEtC,MAAM,CAAC,eAAe,CAAC;MAClC6C,OAAO,EAAC,MAAM;MACdE,UAAU,EAAC,MAAM;MACjBH,OAAO,EAAEP;IAAgB,GAExBf,WAAW,CACG,EACjBzC,oBAACQ,cAAc;MACbiD,SAAS,EAAEtC,MAAM,CAAC,gBAAgB,CAAC;MACnC6C,OAAO,EAAC,SAAS;MACjBE,UAAU,EAAC,MAAM;MACjBH,OAAO,EAAER;IAAiB,GAEzBf,YAAY,CACE,CACI,CACX;IAEhBgC,cAAc,EAAE/B,WAAW;IAC3BP,IAAI,EAAC,OAAO;IACZuC,SAAS,EAAEjB;EAAgB,GAE3BxD,oBAACsB,YAAY;IACXG,WAAW,EAAEwB,oBAAoB;IACjCpB,wBAAwB,EAAEA,wBAAwB;IAClDH,kBAAkB,EAAEA,kBAAkB;IACtCC,mBAAmB,EAAEA,mBAAmB;IACxCC,gBAAgB,EAAEA,gBAAgB;IAClCE,QAAQ,EAAE,4BAAkB;MAC1B,8BAAuB,CAAClB,gBAAgB,CAAC8D,kBAAkB,EAAEzB,oBAAoB,CAAC,CAAC;IAAnF;EAAmF,EAErF,CAEL,CACG;AAEV;AAEA7B,gBAAgB,CAACmB,qBAAqB,EAAE,uBAAuB,CAAC","names":["React","useEffect","useRef","useState","clsx","fireNonCancelableEvent","getBaseProps","InternalBox","InternalButton","InternalModal","InternalSpaceBetween","copyPreferences","mergePreferences","ModalContentLayout","PageSizePreference","WrapLinesPreference","CustomPreference","VisibleContentPreference","checkControlled","styles","applyDisplayName","useBaseComponent","ModalContent","_a","_b","preferences","pageSizePreference","wrapLinesPreference","customPreference","visibleContentPreference","onChange","value","custom","left","size","pageSize","wrapLines","right","visibleContent","CollectionPreferences","confirmLabel","cancelLabel","disabled","onConfirm","onCancel","rest","baseProps","modalVisible","setModalVisible","temporaryPreferences","setTemporaryPreferences","triggerRef","dialogPreviouslyOpen","current","focus","onConfirmListener","onCancelListener","className","root","ref","__internalRootRef","ariaLabel","title","onClick","variant","iconName","formAction","visible","header","footer","float","direction","closeAriaLabel","onDismiss","changedPreferences"],"sources":["/Users/dcastro/node_modules/src/collection-preferences/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalBox from '../box/internal';\nimport { ButtonProps } from '../button/interfaces';\nimport { InternalButton } from '../button/internal';\nimport InternalModal from '../modal/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport {\n  copyPreferences,\n  mergePreferences,\n  ModalContentLayout,\n  PageSizePreference,\n  WrapLinesPreference,\n  CustomPreference,\n} from './utils';\nimport VisibleContentPreference from './visible-content';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport { CollectionPreferencesProps } from './interfaces';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\n\nexport { CollectionPreferencesProps };\n\ninterface ModalContentProps\n  extends Pick<\n    CollectionPreferencesProps,\n    'preferences' | 'visibleContentPreference' | 'pageSizePreference' | 'wrapLinesPreference' | 'customPreference'\n  > {\n  onChange: (preferences: CollectionPreferencesProps.Preferences) => void;\n}\n\nconst ModalContent = ({\n  preferences = {},\n  pageSizePreference,\n  wrapLinesPreference,\n  customPreference,\n  visibleContentPreference,\n  onChange,\n}: ModalContentProps) => {\n  if (!visibleContentPreference && !pageSizePreference && !wrapLinesPreference && customPreference) {\n    return (\n      <CustomPreference\n        value={preferences.custom}\n        customPreference={customPreference}\n        onChange={custom => onChange({ custom })}\n      />\n    );\n  }\n  return (\n    <ModalContentLayout\n      left={\n        <InternalSpaceBetween size=\"l\">\n          {pageSizePreference && (\n            <PageSizePreference\n              value={preferences.pageSize}\n              {...pageSizePreference}\n              onChange={pageSize => onChange({ pageSize })}\n            />\n          )}\n          {wrapLinesPreference && (\n            <WrapLinesPreference\n              value={preferences.wrapLines}\n              {...wrapLinesPreference}\n              onChange={wrapLines => onChange({ wrapLines })}\n            />\n          )}\n          {customPreference && (\n            <CustomPreference\n              value={preferences.custom}\n              customPreference={customPreference}\n              onChange={custom => onChange({ custom })}\n            />\n          )}\n        </InternalSpaceBetween>\n      }\n      right={\n        visibleContentPreference && (\n          <VisibleContentPreference\n            value={preferences.visibleContent}\n            {...visibleContentPreference}\n            onChange={visibleContent => onChange({ visibleContent })}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default function CollectionPreferences({\n  title,\n  confirmLabel,\n  cancelLabel,\n  disabled = false,\n  onConfirm,\n  onCancel,\n  visibleContentPreference,\n  pageSizePreference,\n  wrapLinesPreference,\n  preferences,\n  customPreference,\n  ...rest\n}: CollectionPreferencesProps) {\n  const { __internalRootRef } = useBaseComponent('CollectionPreferences');\n  checkControlled('CollectioPreferences', 'preferences', preferences, 'onConfirm', onConfirm);\n  const baseProps = getBaseProps(rest);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [temporaryPreferences, setTemporaryPreferences] = useState(copyPreferences(preferences || {}));\n  const triggerRef = useRef<ButtonProps.Ref>(null);\n  const dialogPreviouslyOpen = useRef(false);\n  useEffect(() => {\n    if (!modalVisible) {\n      dialogPreviouslyOpen.current && triggerRef.current && triggerRef.current.focus();\n    } else {\n      dialogPreviouslyOpen.current = true;\n    }\n  }, [modalVisible]);\n\n  const onConfirmListener = () => {\n    setModalVisible(false);\n    fireNonCancelableEvent(onConfirm, temporaryPreferences);\n  };\n\n  const onCancelListener = () => {\n    fireNonCancelableEvent(onCancel, {});\n    setModalVisible(false);\n    setTemporaryPreferences(copyPreferences(preferences || {}));\n  };\n\n  return (\n    <div {...baseProps} className={clsx(baseProps.className, styles.root)} ref={__internalRootRef}>\n      <InternalButton\n        ref={triggerRef}\n        className={styles['trigger-button']}\n        disabled={disabled}\n        ariaLabel={title}\n        onClick={() => {\n          setTemporaryPreferences(copyPreferences(preferences || {}));\n          setModalVisible(true);\n        }}\n        variant=\"icon\"\n        iconName=\"settings\"\n        formAction=\"none\"\n      />\n      {!disabled && modalVisible && (\n        <InternalModal\n          className={styles['modal-root']}\n          visible={true}\n          header={title}\n          footer={\n            <InternalBox float=\"right\">\n              <InternalSpaceBetween direction=\"horizontal\" size=\"xs\">\n                <InternalButton\n                  className={styles['cancel-button']}\n                  variant=\"link\"\n                  formAction=\"none\"\n                  onClick={onCancelListener}\n                >\n                  {cancelLabel}\n                </InternalButton>\n                <InternalButton\n                  className={styles['confirm-button']}\n                  variant=\"primary\"\n                  formAction=\"none\"\n                  onClick={onConfirmListener}\n                >\n                  {confirmLabel}\n                </InternalButton>\n              </InternalSpaceBetween>\n            </InternalBox>\n          }\n          closeAriaLabel={cancelLabel}\n          size=\"large\"\n          onDismiss={onCancelListener}\n        >\n          <ModalContent\n            preferences={temporaryPreferences}\n            visibleContentPreference={visibleContentPreference}\n            pageSizePreference={pageSizePreference}\n            wrapLinesPreference={wrapLinesPreference}\n            customPreference={customPreference}\n            onChange={changedPreferences =>\n              setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences))\n            }\n          />\n        </InternalModal>\n      )}\n    </div>\n  );\n}\n\napplyDisplayName(CollectionPreferences, 'CollectionPreferences');\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}