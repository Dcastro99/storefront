{"ast":null,"code":"import { useEffect, useMemo, useRef } from 'react';\nimport { findClosest, circleIndex, throttle } from './utils';\nimport { nodeContains } from '../../internal/utils/dom';\nimport { KeyCode } from '../../internal/keycode';\nimport { useReaction } from './async-store';\nimport computeChartProps from './compute-chart-props';\nimport createSeriesDecorator from './create-series-decorator';\nimport InteractionsStore from './interactions-store';\nimport { useStableEventHandler } from '../../internal/hooks/use-stable-event-handler';\nvar MAX_HOVER_MARGIN = 6;\nvar SVG_HOVER_THROTTLE = 25;\n// Represents the core the chart logic, including the model of all allowed user interactions.\nexport default function useChartModel(_a) {\n  var allSeries = _a.externalSeries,\n    series = _a.visibleSeries,\n    setVisibleSeries = _a.setVisibleSeries,\n    highlightedSeries = _a.highlightedSeries,\n    setHighlightedSeries = _a.setHighlightedSeries,\n    xDomain = _a.xDomain,\n    yDomain = _a.yDomain,\n    xScaleType = _a.xScaleType,\n    yScaleType = _a.yScaleType,\n    height = _a.height,\n    width = _a.width;\n  // Chart elements refs used in handlers.\n  var plotRef = useRef(null);\n  var containerRef = useRef(null);\n  var verticalMarkerRef = useRef(null);\n  var stableSetVisibleSeries = useStableEventHandler(setVisibleSeries);\n  var model = useMemo(function () {\n    // Compute scales, ticks and two-dimensional plots.\n    var computed = computeChartProps({\n      series: series,\n      xDomain: xDomain,\n      yDomain: yDomain,\n      xScaleType: xScaleType,\n      yScaleType: yScaleType,\n      height: height,\n      width: width\n    });\n    // A store for chart interactions that don't require plot recomputation.\n    var interactions = new InteractionsStore(series, computed.plot);\n    // A series decorator to provide extra props such as color and marker type.\n    var getInternalSeries = createSeriesDecorator(allSeries);\n    // A Callback for svg mouseover to hover the plot points.\n    // Throttling is necessary for a substantially smoother customer experience.\n    var onSVGMouseMoveThrottled = throttle(function (clientX, clientY) {\n      // No hover logic when the popover is pinned or no data available.\n      if (interactions.get().isPopoverPinned || !plotRef.current || interactions.plot.xy.length === 0) {\n        return;\n      }\n      var svgRect = plotRef.current.svg.getBoundingClientRect();\n      var offsetX = clientX - svgRect.left;\n      var offsetY = clientY - svgRect.top;\n      var closestX = findClosest(interactions.plot.xy, offsetX, function (xPoints) {\n        return xPoints[0].scaled.x;\n      });\n      var closestPoint = findClosest(closestX, offsetY, function (point) {\n        return point.scaled.y1;\n      });\n      // If close enough to the point - highlight the point and its column.\n      // If not - only highlight the closest column.\n      if (Math.abs(offsetX - closestPoint.scaled.x) < MAX_HOVER_MARGIN && Math.abs(offsetY - closestPoint.scaled.y1) < MAX_HOVER_MARGIN) {\n        interactions.highlightPoint(closestPoint);\n      } else {\n        interactions.highlightX(closestX);\n      }\n    }, SVG_HOVER_THROTTLE);\n    var onSVGMouseMove = function (_a) {\n      var clientX = _a.clientX,\n        clientY = _a.clientY;\n      return onSVGMouseMoveThrottled(clientX, clientY);\n    };\n    // A callback for svg mouseout to clear all highlights.\n    var onSVGMouseOut = function (event) {\n      // Because the mouseover is throttled, in can occur slightly after the mouseout,\n      // neglecting its effect; cancelling the throttled function prevents that.\n      onSVGMouseMoveThrottled.cancel();\n      // No hover logic when the popover is pinned.\n      if (interactions.get().isPopoverPinned) {\n        return;\n      }\n      // Check if the target is contained within svg to allow hovering on the popover body.\n      if (!nodeContains(plotRef.current.svg, event.relatedTarget)) {\n        interactions.clearHighlightedLegend();\n        interactions.clearHighlight();\n      }\n    };\n    // A callback for svg click to pin/unpin the popover.\n    var onSVGMouseDown = function () {\n      interactions.togglePopoverPin();\n    };\n    // A helper function to highlight the next or previous point within selected series.\n    var moveWithinSeries = function (direction) {\n      // Can only use motion when a particular point is highlighted.\n      var point = interactions.get().highlightedPoint;\n      if (!point) {\n        return;\n      }\n      // Take the index of the currently highlighted series.\n      var sIndex = point.index.s;\n      // Take the incremented(circularly) x-index of the currently highlighted point.\n      var xIndex = circleIndex(point.index.x + direction, [0, interactions.plot.xs.length - 1]);\n      // Highlight the next point using x:s grouped data.\n      interactions.highlightPoint(interactions.plot.xs[xIndex][sIndex]);\n    };\n    // A helper function to highlight the next or previous point withing selected column.\n    var moveBetweenSeries = function (direction) {\n      // Can only use motion when a particular point is highlighted.\n      var point = interactions.get().highlightedPoint;\n      if (!point) {\n        return;\n      }\n      // Take the index of the currently highlighted column.\n      var xIndex = point.index.x;\n      // Take the incremented(circularly) y-index of the currently highlighted point.\n      var yIndex = circleIndex(point.index.y + direction, [0, interactions.plot.xy[xIndex].length - 1]);\n      // Highlight the next point using x:y grouped data.\n      interactions.highlightPoint(interactions.plot.xy[xIndex][yIndex]);\n    };\n    // A callback for svg keydown to enable motions and popover pin with the keyboard.\n    var onSVGKeyDown = function (event) {\n      var keyCode = event.keyCode;\n      if (keyCode !== KeyCode.up && keyCode !== KeyCode.right && keyCode !== KeyCode.down && keyCode !== KeyCode.left && keyCode !== KeyCode.space && keyCode !== KeyCode.enter) {\n        return;\n      }\n      // Preventing default fixes an issue in Safari+VO when VO additionally interprets arrow keys as its commands.\n      event.preventDefault();\n      // No keydown logic when the popover is pinned.\n      if (interactions.get().isPopoverPinned) {\n        return;\n      }\n      // Move up/down.\n      if (keyCode === KeyCode.down || keyCode === KeyCode.up) {\n        moveBetweenSeries(keyCode === KeyCode.down ? -1 : 1);\n      }\n      // Move left/right.\n      else if (keyCode === KeyCode.left || keyCode === KeyCode.right) {\n        moveWithinSeries(keyCode === KeyCode.right ? 1 : -1);\n      }\n      // Pin popover.\n      else if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {\n        interactions.pinPopover();\n      }\n    };\n    // A callback for svg focus to highlight series.\n    var onSVGFocus = function (_event, trigger) {\n      // When focus is caused by a click event nothing is expected as clicks are handled separately.\n      // Otherwise, select the first series point.\n      if (trigger === 'keyboard') {\n        interactions.highlightFirstPoint();\n      }\n    };\n    // A callback for svg blur to clear all highlights unless the popover is pinned.\n    var onSVGBlur = function () {\n      // Pinned popover stays pinned even if the focus is lost.\n      // If blur is not caused by the popover, forget the previously highlighted point.\n      if (!interactions.get().isPopoverPinned) {\n        interactions.clearHighlight();\n      }\n    };\n    var onFilterSeries = function (series) {\n      stableSetVisibleSeries(series);\n    };\n    var onLegendHighlight = function (series) {\n      interactions.highlightSeries(series);\n    };\n    var onPopoverDismiss = function (outsideClick) {\n      interactions.unpinPopover();\n      // Return focus back to the application or plot (when no point is highlighted).\n      if (!outsideClick) {\n        // The delay is needed to bypass focus events caused by click or keypress needed to unpin the popover.\n        setTimeout(function () {\n          if (interactions.get().highlightedPoint) {\n            plotRef.current.focusApplication();\n          } else {\n            interactions.clearHighlight();\n            plotRef.current.focusPlot();\n          }\n        }, 0);\n      }\n    };\n    var onContainerBlur = function () {\n      interactions.clearState();\n    };\n    return {\n      width: width,\n      height: height,\n      series: series,\n      allSeries: allSeries,\n      getInternalSeries: getInternalSeries,\n      computed: computed,\n      interactions: interactions,\n      handlers: {\n        onSVGMouseMove: onSVGMouseMove,\n        onSVGMouseOut: onSVGMouseOut,\n        onSVGMouseDown: onSVGMouseDown,\n        onSVGKeyDown: onSVGKeyDown,\n        onSVGFocus: onSVGFocus,\n        onSVGBlur: onSVGBlur,\n        onFilterSeries: onFilterSeries,\n        onLegendHighlight: onLegendHighlight,\n        onPopoverDismiss: onPopoverDismiss,\n        onContainerBlur: onContainerBlur\n      },\n      refs: {\n        plot: plotRef,\n        container: containerRef,\n        verticalMarker: verticalMarkerRef\n      }\n    };\n  }, [allSeries, series, xDomain, yDomain, xScaleType, yScaleType, height, width, stableSetVisibleSeries]);\n  // Notify client when series highlight change.\n  useReaction(model.interactions, function (state) {\n    return state.highlightedSeries;\n  }, setHighlightedSeries);\n  // Update interactions store when series highlight in a controlled way.\n  useEffect(function () {\n    if (highlightedSeries !== model.interactions.get().highlightedSeries) {\n      model.interactions.highlightSeries(highlightedSeries);\n    }\n  }, [model, highlightedSeries]);\n  return model;\n}","map":{"version":3,"mappings":"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","names":["useEffect","useMemo","useRef","findClosest","circleIndex","throttle","nodeContains","KeyCode","useReaction","computeChartProps","createSeriesDecorator","InteractionsStore","useStableEventHandler","MAX_HOVER_MARGIN","SVG_HOVER_THROTTLE","useChartModel","_a","allSeries","series","setVisibleSeries","highlightedSeries","setHighlightedSeries","xDomain","yDomain","xScaleType","yScaleType","height","width","plotRef","containerRef","verticalMarkerRef","stableSetVisibleSeries","model","computed","interactions","plot","getInternalSeries","onSVGMouseMoveThrottled","clientX","clientY","get","isPopoverPinned","current","xy","length","svgRect","svg","getBoundingClientRect","offsetX","left","offsetY","top","closestX","scaled","x","closestPoint","y1","Math","abs","highlightPoint","highlightX","onSVGMouseMove","onSVGMouseOut","event","cancel","relatedTarget","clearHighlightedLegend","clearHighlight","onSVGMouseDown","togglePopoverPin","moveWithinSeries","direction","point","highlightedPoint","sIndex","index","s","xIndex","xs","moveBetweenSeries","yIndex","y","onSVGKeyDown","keyCode","up","right","down","space","enter","preventDefault","pinPopover","onSVGFocus","_event","trigger","highlightFirstPoint","onSVGBlur","onFilterSeries","onLegendHighlight","highlightSeries","onPopoverDismiss","outsideClick","unpinPopover","setTimeout","focusApplication","focusPlot","onContainerBlur","clearState","handlers","refs","container","verticalMarker"],"sources":["/Users/dcastro/node_modules/src/area-chart/model/use-chart-model.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AreaChartProps } from '../interfaces';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { findClosest, circleIndex, throttle } from './utils';\n\nimport { nodeContains } from '../../internal/utils/dom';\nimport { KeyCode } from '../../internal/keycode';\nimport { XDomain, XScaleType, YDomain, YScaleType } from '../../internal/components/cartesian-chart/interfaces';\nimport { useReaction } from './async-store';\nimport computeChartProps from './compute-chart-props';\nimport createSeriesDecorator from './create-series-decorator';\nimport InteractionsStore from './interactions-store';\nimport { useStableEventHandler } from '../../internal/hooks/use-stable-event-handler';\nimport { ChartModel } from './index';\nimport { ChartPlotRef } from '../../internal/components/chart-plot';\n\nconst MAX_HOVER_MARGIN = 6;\nconst SVG_HOVER_THROTTLE = 25;\n\ninterface UseChartModelProps<T extends AreaChartProps.DataTypes> {\n  externalSeries: readonly AreaChartProps.Series<T>[];\n  visibleSeries: readonly AreaChartProps.Series<T>[];\n  setVisibleSeries: (series: readonly AreaChartProps.Series<T>[]) => void;\n  highlightedSeries: null | AreaChartProps.Series<T>;\n  setHighlightedSeries: (series: null | AreaChartProps.Series<T>) => void;\n  xDomain?: XDomain<T>;\n  yDomain?: YDomain;\n  xScaleType: XScaleType;\n  yScaleType: YScaleType;\n  height: number;\n  width: number;\n}\n\n// Represents the core the chart logic, including the model of all allowed user interactions.\nexport default function useChartModel<T extends AreaChartProps.DataTypes>({\n  externalSeries: allSeries,\n  visibleSeries: series,\n  setVisibleSeries,\n  highlightedSeries,\n  setHighlightedSeries,\n  xDomain,\n  yDomain,\n  xScaleType,\n  yScaleType,\n  height,\n  width,\n}: UseChartModelProps<T>): ChartModel<T> {\n  // Chart elements refs used in handlers.\n  const plotRef = useRef<ChartPlotRef>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const verticalMarkerRef = useRef<SVGLineElement>(null);\n\n  const stableSetVisibleSeries = useStableEventHandler(setVisibleSeries);\n\n  const model = useMemo(() => {\n    // Compute scales, ticks and two-dimensional plots.\n    const computed = computeChartProps({\n      series,\n      xDomain,\n      yDomain,\n      xScaleType,\n      yScaleType,\n      height,\n      width,\n    });\n\n    // A store for chart interactions that don't require plot recomputation.\n    const interactions = new InteractionsStore(series, computed.plot);\n\n    // A series decorator to provide extra props such as color and marker type.\n    const getInternalSeries = createSeriesDecorator(allSeries);\n\n    // A Callback for svg mouseover to hover the plot points.\n    // Throttling is necessary for a substantially smoother customer experience.\n    const onSVGMouseMoveThrottled = throttle((clientX: number, clientY: number) => {\n      // No hover logic when the popover is pinned or no data available.\n      if (interactions.get().isPopoverPinned || !plotRef.current || interactions.plot.xy.length === 0) {\n        return;\n      }\n\n      const svgRect = plotRef.current.svg.getBoundingClientRect();\n      const offsetX = clientX - svgRect.left;\n      const offsetY = clientY - svgRect.top;\n\n      const closestX = findClosest(interactions.plot.xy, offsetX, xPoints => xPoints[0].scaled.x);\n      const closestPoint = findClosest(closestX, offsetY, point => point.scaled.y1);\n\n      // If close enough to the point - highlight the point and its column.\n      // If not - only highlight the closest column.\n      if (\n        Math.abs(offsetX - closestPoint.scaled.x) < MAX_HOVER_MARGIN &&\n        Math.abs(offsetY - closestPoint.scaled.y1) < MAX_HOVER_MARGIN\n      ) {\n        interactions.highlightPoint(closestPoint);\n      } else {\n        interactions.highlightX(closestX);\n      }\n    }, SVG_HOVER_THROTTLE);\n\n    const onSVGMouseMove = ({ clientX, clientY }: React.MouseEvent<SVGElement, MouseEvent>) =>\n      onSVGMouseMoveThrottled(clientX, clientY);\n\n    // A callback for svg mouseout to clear all highlights.\n    const onSVGMouseOut = (event: React.MouseEvent<SVGElement, MouseEvent>) => {\n      // Because the mouseover is throttled, in can occur slightly after the mouseout,\n      // neglecting its effect; cancelling the throttled function prevents that.\n      onSVGMouseMoveThrottled.cancel();\n\n      // No hover logic when the popover is pinned.\n      if (interactions.get().isPopoverPinned) {\n        return;\n      }\n\n      // Check if the target is contained within svg to allow hovering on the popover body.\n      if (!nodeContains(plotRef.current!.svg, event.relatedTarget as Element)) {\n        interactions.clearHighlightedLegend();\n        interactions.clearHighlight();\n      }\n    };\n\n    // A callback for svg click to pin/unpin the popover.\n    const onSVGMouseDown = () => {\n      interactions.togglePopoverPin();\n    };\n\n    // A helper function to highlight the next or previous point within selected series.\n    const moveWithinSeries = (direction: -1 | 1) => {\n      // Can only use motion when a particular point is highlighted.\n      const point = interactions.get().highlightedPoint;\n      if (!point) {\n        return;\n      }\n\n      // Take the index of the currently highlighted series.\n      const sIndex = point.index.s;\n      // Take the incremented(circularly) x-index of the currently highlighted point.\n      const xIndex = circleIndex(point.index.x + direction, [0, interactions.plot.xs.length - 1]);\n      // Highlight the next point using x:s grouped data.\n      interactions.highlightPoint(interactions.plot.xs[xIndex][sIndex]);\n    };\n\n    // A helper function to highlight the next or previous point withing selected column.\n    const moveBetweenSeries = (direction: -1 | 1) => {\n      // Can only use motion when a particular point is highlighted.\n      const point = interactions.get().highlightedPoint;\n      if (!point) {\n        return;\n      }\n\n      // Take the index of the currently highlighted column.\n      const xIndex = point.index.x;\n      // Take the incremented(circularly) y-index of the currently highlighted point.\n      const yIndex = circleIndex(point.index.y + direction, [0, interactions.plot.xy[xIndex].length - 1]);\n      // Highlight the next point using x:y grouped data.\n      interactions.highlightPoint(interactions.plot.xy[xIndex][yIndex]);\n    };\n\n    // A callback for svg keydown to enable motions and popover pin with the keyboard.\n    const onSVGKeyDown = (event: React.KeyboardEvent) => {\n      const keyCode = event.keyCode;\n      if (\n        keyCode !== KeyCode.up &&\n        keyCode !== KeyCode.right &&\n        keyCode !== KeyCode.down &&\n        keyCode !== KeyCode.left &&\n        keyCode !== KeyCode.space &&\n        keyCode !== KeyCode.enter\n      ) {\n        return;\n      }\n\n      // Preventing default fixes an issue in Safari+VO when VO additionally interprets arrow keys as its commands.\n      event.preventDefault();\n\n      // No keydown logic when the popover is pinned.\n      if (interactions.get().isPopoverPinned) {\n        return;\n      }\n\n      // Move up/down.\n      if (keyCode === KeyCode.down || keyCode === KeyCode.up) {\n        moveBetweenSeries(keyCode === KeyCode.down ? -1 : 1);\n      }\n      // Move left/right.\n      else if (keyCode === KeyCode.left || keyCode === KeyCode.right) {\n        moveWithinSeries(keyCode === KeyCode.right ? 1 : -1);\n      }\n      // Pin popover.\n      else if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {\n        interactions.pinPopover();\n      }\n    };\n\n    // A callback for svg focus to highlight series.\n    const onSVGFocus = (_event: React.FocusEvent, trigger: 'mouse' | 'keyboard') => {\n      // When focus is caused by a click event nothing is expected as clicks are handled separately.\n      // Otherwise, select the first series point.\n      if (trigger === 'keyboard') {\n        interactions.highlightFirstPoint();\n      }\n    };\n\n    // A callback for svg blur to clear all highlights unless the popover is pinned.\n    const onSVGBlur = () => {\n      // Pinned popover stays pinned even if the focus is lost.\n      // If blur is not caused by the popover, forget the previously highlighted point.\n      if (!interactions.get().isPopoverPinned) {\n        interactions.clearHighlight();\n      }\n    };\n\n    const onFilterSeries = (series: readonly AreaChartProps.Series<T>[]) => {\n      stableSetVisibleSeries(series);\n    };\n\n    const onLegendHighlight = (series: null | AreaChartProps.Series<T>) => {\n      interactions.highlightSeries(series);\n    };\n\n    const onPopoverDismiss = (outsideClick?: boolean) => {\n      interactions.unpinPopover();\n\n      // Return focus back to the application or plot (when no point is highlighted).\n      if (!outsideClick) {\n        // The delay is needed to bypass focus events caused by click or keypress needed to unpin the popover.\n        setTimeout(() => {\n          if (interactions.get().highlightedPoint) {\n            plotRef.current!.focusApplication();\n          } else {\n            interactions.clearHighlight();\n            plotRef.current!.focusPlot();\n          }\n        }, 0);\n      }\n    };\n\n    const onContainerBlur = () => {\n      interactions.clearState();\n    };\n\n    return {\n      width,\n      height,\n      series,\n      allSeries,\n      getInternalSeries,\n      computed,\n      interactions,\n      handlers: {\n        onSVGMouseMove,\n        onSVGMouseOut,\n        onSVGMouseDown,\n        onSVGKeyDown,\n        onSVGFocus,\n        onSVGBlur,\n        onFilterSeries,\n        onLegendHighlight,\n        onPopoverDismiss,\n        onContainerBlur,\n      },\n      refs: {\n        plot: plotRef,\n        container: containerRef,\n        verticalMarker: verticalMarkerRef,\n      },\n    };\n  }, [allSeries, series, xDomain, yDomain, xScaleType, yScaleType, height, width, stableSetVisibleSeries]);\n\n  // Notify client when series highlight change.\n  useReaction(model.interactions, state => state.highlightedSeries, setHighlightedSeries);\n\n  // Update interactions store when series highlight in a controlled way.\n  useEffect(() => {\n    if (highlightedSeries !== model.interactions.get().highlightedSeries) {\n      model.interactions.highlightSeries(highlightedSeries);\n    }\n  }, [model, highlightedSeries]);\n\n  return model;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}